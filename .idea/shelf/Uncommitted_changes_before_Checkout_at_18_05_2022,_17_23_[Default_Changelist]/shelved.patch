Index: example/android/app/src/main/res/drawable/launch_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/launch_background.xml b/example/android/app/src/main/res/drawable/launch_background.xml
new file mode 100644
--- /dev/null	(date 1652867891737)
+++ b/example/android/app/src/main/res/drawable/launch_background.xml	(date 1652867891737)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Modify this file to customize your launch splash screen -->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@android:color/white" />
+
+    <!-- You can insert your own image assets here -->
+    <!-- <item>
+        <bitmap
+            android:gravity="center"
+            android:src="@mipmap/launch_image" />
+    </item> -->
+</layer-list>
Index: example/ios/Runner/Runner.entitlements
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Runner.entitlements b/example/ios/Runner/Runner.entitlements
new file mode 100644
--- /dev/null	(date 1652867892283)
+++ b/example/ios/Runner/Runner.entitlements	(date 1652867892283)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>aps-environment</key>
+	<string>development</string>
+</dict>
+</plist>
Index: example/android/awesome_notifications_core/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/awesome_notifications_core/.gitignore b/example/android/awesome_notifications_core/.gitignore
new file mode 100644
--- /dev/null	(date 1652867891743)
+++ b/example/android/awesome_notifications_core/.gitignore	(date 1652867891743)
@@ -0,0 +1,1 @@
+/build
\ No newline at end of file
Index: example/ios/Runner/Base.lproj/Main.storyboard
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Base.lproj/Main.storyboard b/example/ios/Runner/Base.lproj/Main.storyboard
new file mode 100644
--- /dev/null	(date 1652867892286)
+++ b/example/ios/Runner/Base.lproj/Main.storyboard	(date 1652867892286)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15F34" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="BYZ-38-t0r">
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
+    </dependencies>
+    <scenes>
+        <!--Flutter View Controller-->
+        <scene sceneID="tne-QT-ifu">
+            <objects>
+                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
+                    <layoutGuides>
+                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
+                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
+                    </layoutGuides>
+                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
+                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
+            </objects>
+        </scene>
+    </scenes>
+</document>
Index: example/ios/Podfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Podfile b/example/ios/Podfile
new file mode 100644
--- /dev/null	(date 1652867892289)
+++ b/example/ios/Podfile	(date 1652867892289)
@@ -0,0 +1,41 @@
+# Uncomment this line to define a global platform for your project
+# platform :ios, '9.0'
+
+# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
+ENV['COCOAPODS_DISABLE_STATS'] = 'true'
+
+project 'Runner', {
+  'Debug' => :debug,
+  'Profile' => :release,
+  'Release' => :release,
+}
+
+def flutter_root
+  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
+  unless File.exist?(generated_xcode_build_settings_path)
+    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
+  end
+
+  File.foreach(generated_xcode_build_settings_path) do |line|
+    matches = line.match(/FLUTTER_ROOT\=(.*)/)
+    return matches[1].strip if matches
+  end
+  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
+end
+
+require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
+
+flutter_ios_podfile_setup
+
+target 'Runner' do
+  use_frameworks!
+  use_modular_headers!
+
+  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
+end
+
+post_install do |installer|
+  installer.pods_project.targets.each do |target|
+    flutter_additional_ios_build_settings(target)
+  end
+end
Index: example/ios/Flutter/Debug.xcconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Flutter/Debug.xcconfig b/example/ios/Flutter/Debug.xcconfig
new file mode 100644
--- /dev/null	(date 1652867892251)
+++ b/example/ios/Flutter/Debug.xcconfig	(date 1652867892251)
@@ -0,0 +1,2 @@
+#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
+#include "Generated.xcconfig"
Index: example/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/example/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
--- /dev/null	(date 1652867891719)
+++ b/example/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml	(date 1652867891719)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+  <background android:drawable="@drawable/ic_launcher_background"/>
+  <foreground android:drawable="@drawable/ic_launcher_foreground"/>
+</adaptive-icon>
Index: example/web/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/web/manifest.json b/example/web/manifest.json
new file mode 100644
--- /dev/null	(date 1652867891725)
+++ b/example/web/manifest.json	(date 1652867891725)
@@ -0,0 +1,23 @@
+{
+    "name": "example",
+    "short_name": "example",
+    "start_url": ".",
+    "display": "standalone",
+    "background_color": "#0175C2",
+    "theme_color": "#0175C2",
+    "description": "A new Flutter project.",
+    "orientation": "portrait-primary",
+    "prefer_related_applications": false,
+    "icons": [
+        {
+            "src": "icons/Icon-192.png",
+            "sizes": "192x192",
+            "type": "image/png"
+        },
+        {
+            "src": "icons/Icon-512.png",
+            "sizes": "512x512",
+            "type": "image/png"
+        }
+    ]
+}
Index: example/lib/utils/media_player_central.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/utils/media_player_central.dart b/example/lib/utils/media_player_central.dart
new file mode 100644
--- /dev/null	(date 1652867891731)
+++ b/example/lib/utils/media_player_central.dart	(date 1652867891731)
@@ -0,0 +1,211 @@
+import 'dart:async';
+import 'dart:math';
+
+import 'package:awesome_notifications_example/models/media_model.dart';
+import 'package:awesome_notifications_example/utils/playback_timer.dart';
+
+enum MediaLifeCycle {
+  Stopped,
+  Paused,
+  Playing,
+}
+
+class MediaPlayerCentral {
+
+  static final PlaybackTimer _timer = PlaybackTimer(
+      onDone: (Duration duration){
+        if(hasNextMedia) {
+          nextMedia();
+        } else {
+          stop();
+        }
+      },
+      onData: (Duration duration){
+        _mediaProgress.add(_timer.now);
+      }
+  );
+
+  static String getCloseCaption(Duration duration){
+    if( currentMedia?.closeCaption.isEmpty ?? true ) return '';
+
+    for(CloseCaptionElement cc in currentMedia!.closeCaption){
+      if(cc.start <= duration && cc.end >= duration) return cc.subtitle;
+    }
+
+    return '';
+  }
+
+  static Duration replayTolerance = Duration(seconds: 4);
+
+  static int _index = 0;
+  static MediaLifeCycle _lifeCycle = MediaLifeCycle.Stopped;
+  static List<MediaModel> _playlist = [];
+
+  // ignore: close_sinks
+  static StreamController<MediaModel> _mediaBroadcaster =
+      StreamController<MediaModel>.broadcast();
+  static StreamController<Duration> _mediaProgress =
+      StreamController<Duration>.broadcast();
+
+  Stream<MediaModel> get mediaBroadcaster {
+    return _mediaBroadcaster.stream;
+  }
+
+  Stream<Duration> get mediaProgress {
+    return _mediaProgress.stream;
+  }
+
+  static int get index => _index;
+  static set index(int index) {
+    _index = min(_playlist.length, max(0, index));
+  }
+
+  static Duration get currentDuration => _timer.now;
+
+  static bool get isPlaying {
+    return _lifeCycle == MediaLifeCycle.Playing;
+  }
+
+  static MediaLifeCycle get mediaLifeCycle => _lifeCycle;
+
+  static MediaModel? get currentMedia {
+    return _playlist.length == 0 ? null : _playlist[_index];
+  }
+
+  static bool get hasAnyMedia => _playlist.isNotEmpty;
+  static bool get hasNextMedia => hasAnyMedia && index < _playlist.length - 1;
+  static bool get hasPreviousMedia => hasAnyMedia && index > 0;
+
+  static Stream get mediaStream {
+    if (_mediaBroadcaster.isClosed)
+      _mediaBroadcaster = StreamController<MediaModel>.broadcast();
+    return _mediaBroadcaster.stream;
+  }
+  static Stream get progressStream {
+    if (_mediaProgress.isClosed)
+      _mediaProgress = StreamController<Duration>.broadcast();
+    return _mediaProgress.stream;
+  }
+  static StreamSink get mediaSink => _mediaBroadcaster.sink;
+  static StreamSink get progressSink => _mediaProgress.sink;
+
+  static void _broadcastChanges(){
+    _mediaBroadcaster.sink.add(
+        currentMedia!
+    );
+    _mediaProgress.sink.add(
+        _timer.now
+    );
+  }
+
+  static void add(MediaModel newMedia) {
+    if (_playlist.contains(newMedia)) {
+    } else {
+      _playlist.add(newMedia);
+    }
+  }
+
+  static void addAll(List<MediaModel> newMedias) {
+    _playlist..addAll(newMedias);
+  }
+
+  static void remove(MediaModel oldMedia) {
+    if (currentMedia == oldMedia) {
+      _timer.stop();
+      _playlist.remove(oldMedia);
+      _broadcastChanges();
+    } else {
+      _playlist.remove(oldMedia);
+    }
+  }
+
+  static void clear() {
+    _playlist.clear();
+    stop();
+  }
+
+  static void playPause() {
+    switch (_lifeCycle) {
+      case MediaLifeCycle.Stopped:
+      case MediaLifeCycle.Paused:
+        _lifeCycle = MediaLifeCycle.Playing;
+        _timer.playPause(currentMedia!.trackSize);
+        _broadcastChanges();
+        break;
+
+      case MediaLifeCycle.Playing:
+        _lifeCycle = MediaLifeCycle.Paused;
+        _timer.playPause(currentMedia!.trackSize);
+        _broadcastChanges();
+        break;
+    }
+  }
+
+  static void stop() {
+    _lifeCycle = MediaLifeCycle.Stopped;
+    _timer.stop();
+    _broadcastChanges();
+  }
+
+  static void goTo(Duration moment) {
+    _timer.goTo(moment);
+    _lifeCycle = _timer.isPlaying ? MediaLifeCycle.Playing : _lifeCycle;
+    _broadcastChanges();
+  }
+
+  static void nextMedia() {
+    if (hasNextMedia) {
+      _index++;
+    }
+
+    switch (_lifeCycle) {
+      case MediaLifeCycle.Stopped:
+        _timer.stop();
+        _lifeCycle = MediaLifeCycle.Stopped;
+        break;
+
+      case MediaLifeCycle.Paused:
+        _timer.stop();
+        _lifeCycle = MediaLifeCycle.Paused;
+        break;
+
+      case MediaLifeCycle.Playing:
+        _timer.stop();
+        _timer.playPause(currentMedia!.trackSize);
+        _lifeCycle = MediaLifeCycle.Playing;
+        break;
+    }
+    _broadcastChanges();
+  }
+
+  static void previousMedia() {
+    if (hasPreviousMedia) {
+      if (_timer.now < replayTolerance) {
+        _index--;
+      }
+    }
+
+    switch (_lifeCycle) {
+      case MediaLifeCycle.Playing:
+        _timer.stop();
+        _timer.playPause(currentMedia!.trackSize);
+        _lifeCycle = MediaLifeCycle.Playing;
+        break;
+
+      case MediaLifeCycle.Paused:
+        _timer.stop();
+        _lifeCycle = MediaLifeCycle.Paused;
+        break;
+
+      case MediaLifeCycle.Stopped:
+        break;
+    }
+
+    _broadcastChanges();
+  }
+
+  dispose() {
+    _mediaBroadcaster.sink.close();
+    _mediaProgress.sink.close();
+  }
+}
Index: example/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings b/example/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
new file mode 100644
--- /dev/null	(date 1652867892332)
+++ b/example/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings	(date 1652867892332)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>PreviewsEnabled</key>
+	<false/>
+</dict>
+</plist>
Index: example/ios/Runner/Assets.xcassets/res_mansion.imageset/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Assets.xcassets/res_mansion.imageset/Contents.json b/example/ios/Runner/Assets.xcassets/res_mansion.imageset/Contents.json
new file mode 100644
--- /dev/null	(date 1652867891788)
+++ b/example/ios/Runner/Assets.xcassets/res_mansion.imageset/Contents.json	(date 1652867891788)
@@ -0,0 +1,21 @@
+{
+  "images" : [
+    {
+      "filename" : "res_mansion.jpg",
+      "idiom" : "universal",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "universal",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "universal",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  }
+}
Index: example/ios/Runner/AppDelegate.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/AppDelegate.swift b/example/ios/Runner/AppDelegate.swift
new file mode 100644
--- /dev/null	(date 1652867892336)
+++ b/example/ios/Runner/AppDelegate.swift	(date 1652867892336)
@@ -0,0 +1,13 @@
+import UIKit
+import Flutter
+
+@UIApplicationMain
+@objc class AppDelegate: FlutterAppDelegate {
+  override func application(
+    _ application: UIApplication,
+    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
+  ) -> Bool {
+    GeneratedPluginRegistrant.register(with: self)
+    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
+  }
+}
Index: example/lib/utils/notification_util.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/utils/notification_util.dart b/example/lib/utils/notification_util.dart
new file mode 100644
--- /dev/null	(date 1652867891797)
+++ b/example/lib/utils/notification_util.dart	(date 1652867891797)
@@ -0,0 +1,1719 @@
+import 'dart:io';
+import 'dart:math';
+import 'dart:typed_data';
+
+import 'package:awesome_notifications/android_foreground_service.dart';
+import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
+
+// TO AVOID CONFLICT WITH MATERIAL DATE UTILS CLASS
+import 'package:awesome_notifications/awesome_notifications.dart'
+    hide AwesomeDateUtils;
+import 'package:awesome_notifications/awesome_notifications.dart' as Utils
+    show AwesomeDateUtils;
+
+import 'package:awesome_notifications_example/models/media_model.dart';
+import 'package:awesome_notifications_example/utils/common_functions.dart';
+import 'package:awesome_notifications_example/utils/media_player_central.dart';
+import 'package:url_launcher/url_launcher.dart';
+
+/* *********************************************
+    LARGE TEXT FOR OUR NOTIFICATIONS TESTS
+************************************************ */
+
+String lorenIpsumText =
+    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut '
+    'labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip '
+    'ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat '
+    'nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit'
+    'anim id est laborum';
+
+Future<void> externalUrl(String url) async {
+  if (await canLaunch(url)) {
+    await launch(url);
+  } else {
+    throw 'Could not launch $url';
+  }
+}
+
+int createUniqueID(int maxValue){
+  Random random = new Random();
+  return random.nextInt(maxValue);
+}
+
+/* *********************************************
+    PERMISSIONS
+************************************************ */
+
+class NotificationUtils {
+
+  static Future<bool> redirectToPermissionsPage() async {
+    await AwesomeNotifications().showNotificationConfigPage();
+    return await AwesomeNotifications().isNotificationAllowed();
+  }
+  
+  static Future<void> redirectToBasicChannelPage() async {
+    await AwesomeNotifications().showNotificationConfigPage(channelKey: 'basic_channel');
+  }
+  
+  static Future<void> redirectToAlarmPage() async {
+    await AwesomeNotifications().showAlarmPage();
+  }
+
+  static Future<void> redirectToScheduledChannelsPage() async {
+    await AwesomeNotifications().showNotificationConfigPage(channelKey: 'scheduled');
+  }
+
+  static Future<void> redirectToOverrideDndsPage() async {
+    await AwesomeNotifications().showGlobalDndOverridePage();
+  }
+  
+  static Future<bool> requestBasicPermissionToSendNotifications(BuildContext context) async {
+    bool isAllowed = await AwesomeNotifications().isNotificationAllowed();
+    if(!isAllowed){
+      await showDialog(
+          context: context,
+          builder: (context) => AlertDialog(
+            backgroundColor: Color(0xfffbfbfb),
+            title: Text(
+                'Get Notified!',
+                maxLines: 2,
+                textAlign: TextAlign.center,
+                style: TextStyle(fontSize: 22.0, fontWeight: FontWeight.w600)),
+            content: Column(
+              mainAxisSize: MainAxisSize.min,
+              children: [
+                Image.asset(
+                  'assets/images/animated-bell.gif',
+                  height: MediaQuery.of(context).size.height * 0.3,
+                  fit: BoxFit.fitWidth,
+                ),
+                Text(
+                  'Allow Awesome Notifications to send you beautiful notifications!',
+                  maxLines: 4,
+                  textAlign: TextAlign.center,
+                ),
+              ],
+            ),
+            actions: [
+              TextButton(
+                  onPressed: (){ Navigator.pop(context); },
+                  child: Text(
+                    'Later',
+                    style: TextStyle(color: Colors.grey, fontSize: 18),
+                  )
+              ),
+              TextButton(
+                onPressed: () async {
+                  isAllowed = await AwesomeNotifications().requestPermissionToSendNotifications();
+                  Navigator.pop(context);
+                },
+                child: Text(
+                  'Allow',
+                  style: TextStyle(color: Colors.deepPurple, fontSize: 18, fontWeight: FontWeight.bold),
+                ),
+              ),
+            ],
+          )
+      );
+    }
+    return isAllowed;
+  }
+
+  static Future<void> requestFullScheduleChannelPermissions(BuildContext context, List<NotificationPermission> requestedPermissions) async {
+    String channelKey = 'scheduled';
+
+    await requestUserPermissions(context, channelKey: channelKey, permissionList: requestedPermissions);
+  }
+
+  static Future<List<NotificationPermission>> requestUserPermissions(
+      BuildContext context,{
+      // if you only intends to request the permissions until app level, set the channelKey value to null
+      required String? channelKey,
+      required List<NotificationPermission> permissionList}
+    ) async {
+
+    // Check if the basic permission was conceived by the user
+    if(!await requestBasicPermissionToSendNotifications(context))
+      return [];
+
+    // Check which of the permissions you need are allowed at this time
+    List<NotificationPermission> permissionsAllowed = await AwesomeNotifications().checkPermissionList(
+        channelKey: channelKey,
+        permissions: permissionList
+    );
+
+    // If all permissions are allowed, there is nothing to do
+    if(permissionsAllowed.length == permissionList.length)
+      return permissionsAllowed;
+
+    // Refresh the permission list with only the disallowed permissions
+    List<NotificationPermission> permissionsNeeded =
+      permissionList.toSet().difference(permissionsAllowed.toSet()).toList();
+
+    // Check if some of the permissions needed request user's intervention to be enabled
+    List<NotificationPermission> lockedPermissions = await AwesomeNotifications().shouldShowRationaleToRequest(
+        channelKey: channelKey,
+        permissions: permissionsNeeded
+    );
+
+    // If there is no permitions depending of user's intervention, so request it directly
+    if(lockedPermissions.isEmpty){
+
+      // Request the permission through native resources.
+      await AwesomeNotifications().requestPermissionToSendNotifications(
+          channelKey: channelKey,
+          permissions: permissionsNeeded
+      );
+
+      // After the user come back, check if the permissions has successfully enabled
+      permissionsAllowed = await AwesomeNotifications().checkPermissionList(
+          channelKey: channelKey,
+          permissions: permissionsNeeded
+      );
+    }
+    else {
+      // If you need to show a rationale to educate the user to conceed the permission, show it
+      await showDialog(
+          context: context,
+          builder: (context) => AlertDialog(
+            backgroundColor: Color(0xfffbfbfb),
+            title: Text('Awesome Notificaitons needs your permission',
+              textAlign: TextAlign.center,
+              maxLines: 2,
+              style: TextStyle(fontSize: 22, fontWeight: FontWeight.w600),
+            ),
+            content: Column(
+              mainAxisSize: MainAxisSize.min,
+              children: [
+                Image.asset(
+                  'assets/images/animated-clock.gif',
+                  height: MediaQuery.of(context).size.height * 0.3,
+                  fit: BoxFit.fitWidth,
+                ),
+                Text(
+                  'To proceede, you need to enable the permissions above'+
+                      (channelKey?.isEmpty ?? true ? '' : ' on channel $channelKey')+':',
+                  maxLines: 2,
+                  textAlign: TextAlign.center,
+                ),
+                SizedBox(height: 5),
+                Text(
+                  lockedPermissions.join(', ').replaceAll('NotificationPermission.', ''),
+                  maxLines: 2,
+                  textAlign: TextAlign.center,
+                  style: TextStyle(fontSize: 14, fontWeight: FontWeight.w600),
+                ),
+              ],
+            ),
+            actions: [
+              TextButton(
+                  onPressed: (){ Navigator.pop(context); },
+                  child: Text(
+                    'Deny',
+                    style: TextStyle(color: Colors.red, fontSize: 18),
+                  )
+              ),
+              TextButton(
+                onPressed: () async {
+
+                  // Request the permission through native resources. Only one page redirection is done at this point.
+                  await AwesomeNotifications().requestPermissionToSendNotifications(
+                      channelKey: channelKey,
+                      permissions: lockedPermissions
+                  );
+
+                  // After the user come back, check if the permissions has successfully enabled
+                  permissionsAllowed = await AwesomeNotifications().checkPermissionList(
+                      channelKey: channelKey,
+                      permissions: lockedPermissions
+                  );
+
+                  Navigator.pop(context);
+                },
+                child: Text(
+                  'Allow',
+                  style: TextStyle(color: Colors.deepPurple, fontSize: 18, fontWeight: FontWeight.bold),
+                ),
+              ),
+            ],
+          )
+      );
+    }
+
+    // Return the updated list of allowed permissions
+    return permissionsAllowed;
+  }
+
+  static Future<bool> requestCriticalAlertsPermission(BuildContext context) async {
+
+    List<NotificationPermission> requestedPermissions = [
+      NotificationPermission.CriticalAlert
+    ];
+
+    List<NotificationPermission> permissionsAllowed =
+    await requestUserPermissions(
+        context,
+        channelKey: null,
+        permissionList: requestedPermissions);
+
+    return permissionsAllowed.isNotEmpty;
+  }
+
+  static Future<bool> requestFullIntentPermission(BuildContext context) async {
+
+    List<NotificationPermission> requestedPermissions = [
+      NotificationPermission.CriticalAlert
+    ];
+
+    List<NotificationPermission> permissionsAllowed =
+    await requestUserPermissions(
+        context,
+        channelKey: null,
+        permissionList: requestedPermissions);
+
+    return permissionsAllowed.isNotEmpty;
+  }
+
+  static Future<bool> requestPreciseAlarmPermission(BuildContext context) async {
+
+    List<NotificationPermission> requestedPermissions = [
+      NotificationPermission.PreciseAlarms
+    ];
+
+    List<NotificationPermission> permissionsAllowed =
+    await requestUserPermissions(
+        context,
+        channelKey: null,
+        permissionList: requestedPermissions);
+
+    return permissionsAllowed.isNotEmpty;
+  }
+
+  static Future<bool> requestOverrideDndPermission(BuildContext context) async {
+
+    List<NotificationPermission> requestedPermissions = [
+      NotificationPermission.OverrideDnD
+    ];
+
+    List<NotificationPermission> permissionsAllowed =
+    await requestUserPermissions(
+        context,
+        channelKey: null,
+        permissionList: requestedPermissions);
+
+    return permissionsAllowed.isNotEmpty;
+  }
+
+  /* *********************************************
+      BASIC NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showBasicNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+      content: NotificationContent(
+        id: id,
+        channelKey: 'basic_channel',
+        title: 'Simple Notification',
+        body: 'Simple body',
+        customSound: 'resource://raw/res_morph_power_rangers'
+      )
+    );
+  }
+  
+  static Future<void> showEmojiNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+      content: NotificationContent(
+        id: id,
+        channelKey: 'basic_channel',
+        category: NotificationCategory.Social,
+        title: 'Emojis are awesome too! ' +
+            Emojis.smile_face_with_tongue +
+            Emojis.smile_smiling_face +
+            Emojis.smile_smiling_face_with_heart_eyes,
+        body:
+            'Simple body with a bunch of Emojis! ${Emojis.transport_police_car} ${Emojis.animals_dog} ${Emojis.flag_UnitedStates} ${Emojis.person_baby}',
+        largeIcon: 'https://tecnoblog.net/wp-content/uploads/2019/09/emoji.jpg',
+        bigPicture: 'https://tecnoblog.net/wp-content/uploads/2019/09/emoji.jpg',
+        hideLargeIconOnExpand: true,
+        notificationLayout: NotificationLayout.BigPicture,
+    ));
+  }
+  
+  static Future<void> showNotificationWithPayloadContent(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            title: 'Simple notification',
+            body: 'Only a simple notification',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showNotificationWithoutTitle(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            body: 'Only a simple notification',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showNotificationWithoutBody(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            title: 'plain title',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> sendBackgroundNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            payload: {'secret-command': 'block_user'}));
+  }
+  
+  /* *********************************************
+      BADGE NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showBadgeNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'badge_channel',
+            title: 'Badge test notification',
+            body: 'This notification does activate badge indicator'),
+        schedule: NotificationInterval(interval: 5, timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier())
+    );
+  }
+  
+  static Future<void> showWithoutBadgeNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            title: 'Badge test notification',
+            body: 'This notification does not activate badge indicator'),
+        schedule: NotificationInterval(interval: 5, timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier())
+    );
+  }
+  
+  // ON BADGE METHODS, NULL CHANNEL SETS THE GLOBAL COUNTER
+  
+  static Future<int> getBadgeIndicator() async {
+    int amount = await AwesomeNotifications().getGlobalBadgeCounter();
+    return amount;
+  }
+  
+  static Future<void> setBadgeIndicator(int amount) async {
+    await AwesomeNotifications().setGlobalBadgeCounter(amount);
+  }
+  
+  static Future<int> incrementBadgeIndicator() async {
+    return await AwesomeNotifications().incrementGlobalBadgeCounter();
+  }
+  
+  static Future<int> decrementBadgeIndicator() async {
+    return await AwesomeNotifications().decrementGlobalBadgeCounter();
+  }
+  
+  static Future<void> resetBadgeIndicator() async {
+    await AwesomeNotifications().resetGlobalBadge();
+  }
+  
+  /* *********************************************
+      ACTION BUTTONS NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showNotificationWithActionButtons(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            title: 'Anonymous says:',
+            body: 'Hi there!',
+            payload: {'uuid': 'user-profile-uuid'}),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'READ', label: 'Mark as read', autoDismissible: true),
+          NotificationActionButton(
+              key: 'PROFILE', label: 'Profile', autoDismissible: true, enabled: false)
+        ]);
+  }
+  
+  static Future<void> showNotificationWithIconsAndActionButtons(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            title: 'Anonymous says:',
+            body: 'Hi there!',
+            payload: {'uuid': 'user-profile-uuid'}),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'READ', label: 'Mark as read', autoDismissible: true),
+          NotificationActionButton(
+              key: 'PROFILE', label: 'Profile', autoDismissible: true, color: Colors.green),
+          NotificationActionButton(
+              key: 'DISMISS',
+              label: 'Dismiss',
+              autoDismissible: true,
+              buttonType: ActionButtonType.DisabledAction,
+              isDangerousOption: true)
+        ]);
+  }
+  
+  static Future<void> showNotificationWithActionButtonsAndReply(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            title: 'Anonymous says:',
+            body: 'Hi there!',
+            payload: {'uuid': 'user-profile-uuid'}),
+        actionButtons: [
+          NotificationActionButton(
+            key: 'REPLY',
+            label: 'Reply',
+            autoDismissible: true,
+            buttonType: ActionButtonType.InputField,
+          ),
+          NotificationActionButton(
+              key: 'READ', label: 'Mark as read', autoDismissible: true),
+          NotificationActionButton(
+              key: 'ARCHIVE', label: 'Archive', autoDismissible: true)
+        ]);
+  }
+
+  /* *********************************************
+      NOTIFICATION'S SPECIAL CATEGORIES
+  ************************************************ */
+
+  static Future<void> showCallNotification(int id) async {
+    String platformVersion = await getPlatformVersion();
+    AndroidForegroundService.startForeground(
+    //await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'call_channel',
+            title: 'Incoming Call',
+            body: 'from Little Mary',
+            category: NotificationCategory.Call,
+            largeIcon: 'asset://assets/images/girl-phonecall.jpg',
+            wakeUpScreen: true,
+            fullScreenIntent: true,
+            autoDismissible: false,
+            backgroundColor: (platformVersion == 'Android-31') ?
+              Color(0x00796a) : Colors.white,
+            payload: {
+              'username': 'Little Mary'
+            }
+        ),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'ACCEPT',
+              label: 'Accept Call',
+              color: Colors.green,
+              autoDismissible: true
+          ),
+          NotificationActionButton(
+              key: 'REJECT',
+              label: 'Reject',
+              isDangerousOption: true,
+              autoDismissible: true
+          ),
+        ]
+    );
+  }
+
+  static Future<void> showAlarmNotification(int id) async {
+    AndroidForegroundService.startForeground(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'alarm_channel',
+            title: 'Alarm is playing',
+            body: 'Hey! Wake Up!',
+            category: NotificationCategory.Alarm
+        ),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'SNOOZE',
+              label: 'Snooze for 5 minutes',
+              color: Colors.blue,
+              autoDismissible: true
+          ),
+        ]
+    );
+  }
+  
+  /* *********************************************
+      LOCKED (ONGOING) NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showLockedNotification(int id) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: 'locked_notification',
+        channelName: 'Locked notification',
+        channelDescription: 'Channel created on the fly with lock option',
+        locked: true));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'locked_notification',
+            title: 'Locked notification',
+            body: 'This notification is locked and cannot be dismissed',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showUnlockedNotification(int id) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: 'locked_notification',
+        channelName: 'Unlocked notification',
+        channelDescription: 'Channel created on the fly with lock option',
+        locked: true));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'locked_notification',
+            title: 'Unlocked notification',
+            body: 'This notification is not locked and can be dismissed',
+            payload: {'uuid': 'uuid-test'},
+            locked: false));
+  }
+  
+  /* *********************************************
+      NOTIFICATION CHANNELS MANIPULATION
+  ************************************************ */
+  
+  static Future<void> showNotificationImportance(
+      int id, NotificationImportance importance) async {
+    String importanceKey = importance.toString().toLowerCase().split('.').last;
+    String channelKey = 'importance_' + importanceKey + '_channel';
+    String title = 'Importance levels (' + importanceKey + ')';
+    String body = 'Test of importance levels to ' + importanceKey;
+  
+    await AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: channelKey,
+        channelName: title,
+        channelDescription: body,
+        importance: importance,
+        defaultColor: Colors.red,
+        ledColor: Colors.red,
+        vibrationPattern: highVibrationPattern));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: channelKey,
+            title: title,
+            body: body,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  /* *********************************************
+      NOTIFICATION CHANNELS MANIPULATION
+  ************************************************ */
+  
+  static Future<void> createTestChannel(String channelName) async {
+    await AwesomeNotifications().setChannel(NotificationChannel(
+        channelGroupKey: 'channel_tests',
+        channelKey: channelName.toLowerCase().replaceAll(' ', '_'),
+        channelName: channelName,
+        channelDescription:
+            "Channel created to test the channels manipulation."));
+  }
+  
+  static Future<void> updateTestChannel(String channelName) async {
+    await AwesomeNotifications().setChannel(NotificationChannel(
+        channelGroupKey: 'channel_tests',
+        channelKey: channelName.toLowerCase().replaceAll(' ', '_'),
+        channelName: channelName + " (updated)",
+        channelDescription: "This channel was successfuly updated."));
+  }
+  
+  static Future<void> removeTestChannel(String channelName) async {
+    await AwesomeNotifications()
+        .removeChannel(channelName.toLowerCase().replaceAll(' ', '_'));
+  }
+  
+  /* *********************************************
+      DELAYED NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> delayNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "scheduled",
+            title: 'scheduled title',
+            body: 'scheduled body',
+            payload: {'uuid': 'uuid-test'}),
+        schedule: NotificationInterval(interval: 5, timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier())
+    );
+  }
+  
+  /* *********************************************
+      DELAYED NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showLowVibrationNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'low_intensity',
+            title: 'Low vibration title',
+            body: 'This is a notification with low vibration pattern',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showMediumVibrationNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'medium_intensity',
+            title: 'Medium vibration title',
+            body: 'This is a notification with medium vibration pattern',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showHighVibrationNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'high_intensity',
+            title: 'High vibration title',
+            body: 'This is a notification with high vibration pattern',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showCustomVibrationNotification(int id) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: "custom_vibration",
+        channelName: "Custom vibration",
+        channelDescription: "Channel created on the fly with custom vibration",
+        vibrationPattern:
+            Int64List.fromList([0, 1000, 200, 200, 1000, 1500, 200, 200]),
+        ledOnMs: 1000,
+        ledOffMs: 500));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'custom_vibration',
+            title: 'That\'s all for today, folks!',
+            bigPicture:
+                'https://i0.wp.com/www.jornadageek.com.br/wp-content/uploads/2018/06/Looney-tunes.png?resize=696%2C398&ssl=1',
+            notificationLayout: NotificationLayout.BigPicture,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  /* *********************************************
+      COLORFUL AND LED NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> redNotification(int id, bool delayLEDTests) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: "colorful_notification",
+        channelName: "Colorful notifications",
+        channelDescription: "A red colorful notification",
+        vibrationPattern: lowVibrationPattern,
+        defaultColor: Colors.red,
+        ledColor: Colors.red,
+        ledOnMs: 1000,
+        ledOffMs: 500));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "colorful_notification",
+            title: "<font color='${Colors.red.value}'>Red Notification</font>",
+            body:
+                "<font color='${Colors.red.value}'>A colorful notification</font>",
+            payload: {'uuid': 'uuid-red'}),
+        actionButtons: [
+          NotificationActionButton(
+            key: 'REPLY',
+            label: 'Reply',
+            autoDismissible: true,
+            buttonType: ActionButtonType.InputField,
+          ),
+          NotificationActionButton(
+              key: 'ARCHIVE', label: 'Archive', autoDismissible: true)
+        ],
+        schedule: delayLEDTests ? NotificationInterval(
+            interval: 5,
+            timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier()) : null);
+  }
+  
+  static Future<void> blueNotification(int id, bool delayLEDTests) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: "colorful_notification",
+        channelName: "Colorful notifications",
+        channelDescription: "A red colorful notification",
+        vibrationPattern: lowVibrationPattern,
+        defaultColor: Colors.blueAccent,
+        ledColor: Colors.blueAccent,
+        ledOnMs: 1000,
+        ledOffMs: 500));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "colorful_notification",
+            title:
+                '<font color="${Colors.blueAccent.value}">Blue Notification</font>',
+            body: "<font color='${Colors.blueAccent.value}'>A colorful notification</font>",
+            payload: {'uuid': 'uuid-blue'}),
+        actionButtons: [
+          NotificationActionButton(
+            key: 'REPLY',
+            label: 'Reply',
+            autoDismissible: true,
+            buttonType: ActionButtonType.InputField,
+          ),
+          NotificationActionButton(
+              key: 'ARCHIVE', label: 'Archive', autoDismissible: true)
+        ],
+        schedule: delayLEDTests ? NotificationInterval(interval: 5, timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier()) : null);
+  }
+  
+  static Future<void> yellowNotification(int id, bool delayLEDTests) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: "colorful_notification",
+        channelName: "Colorful notifications",
+        channelDescription: "A red colorful notification",
+        vibrationPattern: lowVibrationPattern,
+        defaultColor: CupertinoColors.activeOrange,
+        ledColor: CupertinoColors.activeOrange,
+        ledOnMs: 1000,
+        ledOffMs: 500));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "colorful_notification",
+            title: 'Yellow Notification',
+            body: 'A colorful notification',
+            backgroundColor: CupertinoColors.activeOrange,
+            payload: {'uuid': 'uuid-yellow'}),
+        actionButtons: [
+          NotificationActionButton(
+            key: 'REPLY',
+            label: 'Reply',
+            autoDismissible: true,
+            buttonType: ActionButtonType.InputField,
+          ),
+          NotificationActionButton(
+              key: 'ARCHIVE', label: 'Archive', autoDismissible: true)
+        ],
+        schedule: delayLEDTests ? NotificationInterval(interval: 5, timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier()) : null);
+  }
+  
+  static Future<void> purpleNotification(int id, bool delayLEDTests) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: "colorful_notification",
+        channelName: "Colorful notifications",
+        channelDescription: "A purple colorful notification",
+        vibrationPattern: lowVibrationPattern,
+        defaultColor: Colors.deepPurple,
+        ledColor: Colors.deepPurple,
+        ledOnMs: 1000,
+        ledOffMs: 500));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "colorful_notification",
+            title:
+                '<font color="${Colors.deepPurple.value}">Purple Notification</font>',
+            body: "<font color='${Colors.deepPurple.value}'>A colorful notification</font>",
+            payload: {'uuid': 'uuid-purple'}),
+        actionButtons: [
+          NotificationActionButton(
+            key: 'REPLY',
+            label: 'Reply',
+            autoDismissible: true,
+            buttonType: ActionButtonType.InputField,
+          ),
+          NotificationActionButton(
+              key: 'ARCHIVE', label: 'Archive', autoDismissible: true)
+        ],
+        schedule: delayLEDTests ? NotificationInterval(interval: 5, timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier()) : null);
+  }
+  
+  static Future<void> greenNotification(int id, bool delayLEDTests) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: "colorful_notification",
+        channelName: "Colorful notifications",
+        channelDescription: "A green colorful notification",
+        vibrationPattern: lowVibrationPattern,
+        defaultColor: Colors.lightGreen,
+        ledColor: Colors.lightGreen,
+        ledOnMs: 1000,
+        ledOffMs: 500));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "colorful_notification",
+            title:
+                '<font color="${Colors.lightGreen.value}">Green Notification</font>',
+            body: "<font color='${Colors.lightGreen.value}'>A colorful notification</font>",
+            payload: {'uuid': 'uuid-green'}),
+        actionButtons: [
+          NotificationActionButton(
+            key: 'REPLY',
+            label: 'Reply',
+            autoDismissible: true,
+            buttonType: ActionButtonType.InputField,
+          ),
+          NotificationActionButton(
+              key: 'ARCHIVE', label: 'Archive', autoDismissible: true)
+        ],
+        schedule: delayLEDTests ? NotificationInterval(interval: 5, timeZone: await AwesomeNotifications().getLocalTimeZoneIdentifier()) : null
+    );
+  }
+  
+  static Future<void> startForegroundServiceNotification() async {
+    await AndroidForegroundService.startForeground(
+        content: NotificationContent(
+            id: 2341234,
+            body: 'Service is running!',
+            title: 'Android Foreground Service',
+            channelKey: 'basic_channel',
+            bigPicture: 'asset://assets/images/android-bg-worker.jpg',
+            notificationLayout: NotificationLayout.BigPicture,
+            category: NotificationCategory.Service
+        ),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'SHOW_SERVICE_DETAILS',
+              label: 'Show details'
+          )
+        ]
+    );
+  }
+  
+  static Future<void> stopForegroundServiceNotification() async {
+    await AndroidForegroundService.stopForeground();
+  }
+  
+  /* *********************************************
+      CUSTOM SOUND NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showCustomSoundNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "custom_sound",
+            title: 'It\'s time to morph!',
+            body: 'It\'s time to go save the world!',
+            notificationLayout: NotificationLayout.BigPicture,
+            bigPicture: 'asset://assets/images/fireman-hero.jpg',
+            color: Colors.yellow,
+            payload: {
+          'secret': 'the green ranger and the white ranger are the same person'
+        }));
+  }
+  
+  /* *********************************************
+      WAKE UP LOCK SCREEN NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> scheduleNotificationWithWakeUp(int id, int seconds) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'basic_channel',
+            title: 'Hey! Wake up!!',
+            body: 'Its time to wake up!',
+            wakeUpScreen: true,
+            notificationLayout: NotificationLayout.BigPicture,
+            bigPicture: 'asset://assets/images/melted-clock.png',
+            color: Colors.blueGrey,
+            category: NotificationCategory.Alarm,
+        ),
+        schedule: NotificationInterval(interval: seconds, preciseAlarm: true));
+  }
+  
+  /* *********************************************
+      FULL SCREEEN INTENT NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> scheduleFullScrenNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+          id: id,
+          channelKey: 'scheduled',
+          title: 'Hey! Wake up!!',
+          body: 'Its time to wake up!',
+          fullScreenIntent: true,
+          wakeUpScreen: true,
+          category: NotificationCategory.Reminder,
+          notificationLayout: NotificationLayout.BigPicture,
+          bigPicture: 'asset://assets/images/melted-clock.png',
+          payload: {'uuid': 'uuid-test'},
+          autoDismissible: false,
+        ),
+        schedule: NotificationInterval(interval: 5, preciseAlarm: true));
+  }
+  
+  /* *********************************************
+      SILENCED NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showNotificationWithNoSound(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "silenced",
+            title: 'Silence, please!',
+            body: 'Shhhhhh!!!',
+            notificationLayout: NotificationLayout.BigPicture,
+            bigPicture:
+            'https://image.freepik.com/fotos-gratis/medico-serio-mostrando-o-gesto-de-silencio_1262-17188.jpg',
+            color: Colors.blueGrey,
+            payload: {'advice': 'shhhhhhh'}));
+  }
+  
+  /* *********************************************
+      BIG PICTURE NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showBigPictureNetworkNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: 11,
+            channelKey: 'big_picture',
+            title: 'Big picture (Network)',
+            body: '$lorenIpsumText\n\n$lorenIpsumText\n\n$lorenIpsumText',
+            bigPicture:
+                'https://media.wired.com/photos/598e35994ab8482c0d6946e0/master/w_2560%2Cc_limit/phonepicutres-TA.jpg',
+            notificationLayout: NotificationLayout.BigPicture));
+  }
+  
+  static Future<void> showBigPictureAssetNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            title: 'Big picture (Asset)',
+            body: '$lorenIpsumText\n\n$lorenIpsumText\n\n$lorenIpsumText',
+            bigPicture: 'asset://assets/images/balloons-in-sky.jpg',
+            notificationLayout: NotificationLayout.BigPicture,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  /// Just to simulates a file already saved inside device storage
+  static Future<void> showBigPictureFileNotification(int id) async {
+    String newFilePath = await downloadAndSaveImageOnDisk(
+        'https://images.freeimages.com/images/large-previews/be7/puppy-2-1456421.jpg',
+        'newTestImage.jpg');
+  
+    //String newFilePath = await saveImageOnDisk(AssetImage('assets/images/happy-dogs.jpg'),'newTestImage.jpg');
+    newFilePath = newFilePath.replaceFirst('/', '');
+    String finalFilePath = 'file://' + (newFilePath);
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            title: 'Big picture (File)',
+            body: '$lorenIpsumText\n\n$lorenIpsumText\n\n$lorenIpsumText',
+            bigPicture: finalFilePath,
+            notificationLayout: NotificationLayout.BigPicture,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showBigPictureResourceNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            title: 'Big picture (Resource)',
+            body: '$lorenIpsumText\n\n$lorenIpsumText\n\n$lorenIpsumText',
+            bigPicture: 'resource://drawable/res_mansion',
+            notificationLayout: NotificationLayout.BigPicture,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showLargeIconNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            title: 'Big picture title',
+            body: '$lorenIpsumText\n\n$lorenIpsumText\n\n$lorenIpsumText',
+            largeIcon:
+                'https://image.freepik.com/vetores-gratis/modelo-de-logotipo-de-restaurante-retro_23-2148451519.jpg',
+            roundedLargeIcon: true,
+            notificationLayout: NotificationLayout.BigPicture,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showBigPictureAndLargeIconNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            title: 'Big <b>BIG</b> picture title',
+            summary: 'Summary <i>text</i>',
+            body: '$lorenIpsumText<br><br>$lorenIpsumText<br><br>$lorenIpsumText',
+            largeIcon:
+                'https://image.freepik.com/vetores-gratis/modelo-de-logotipo-de-restaurante-retro_23-2148451519.jpg',
+            bigPicture: 'https://media-cdn.tripadvisor.com/media/photo-s/15/dd/20/61/al-punto.jpg',
+            notificationLayout: NotificationLayout.BigPicture,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showBigPictureNotificationActionButtons(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            title: 'Big <b>BIG</b> picture title',
+            summary: 'Summary <i>text</i>',
+            body: '$lorenIpsumText<br><br>$lorenIpsumText<br><br>$lorenIpsumText',
+            largeIcon:
+                'https://image.freepik.com/vetores-gratis/modelo-de-logotipo-de-restaurante-retro_23-2148451519.jpg',
+            bigPicture: 'https://media-cdn.tripadvisor.com/media/photo-s/15/dd/20/61/al-punto.jpg',
+            notificationLayout: NotificationLayout.BigPicture,
+            color: Colors.indigoAccent,
+            payload: {'uuid': 'uuid-test'}),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'READ', label: 'Mark as read', autoDismissible: true),
+          NotificationActionButton(
+              key: 'REMEMBER', label: 'Remember-me later', autoDismissible: false)
+        ]);
+  }
+  
+  static Future<void> showBigPictureNotificationActionButtonsAndReply(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            title: 'Big <b>BIG</b> picture title',
+            summary: 'Summary <i>text</i>',
+            category: NotificationCategory.Promo,
+            body: '$lorenIpsumText<br><br>$lorenIpsumText<br><br>$lorenIpsumText',
+            largeIcon:
+                'https://image.freepik.com/vetores-gratis/modelo-de-logotipo-de-restaurante-retro_23-2148451519.jpg',
+            bigPicture: 'https://media-cdn.tripadvisor.com/media/photo-s/15/dd/20/61/al-punto.jpg',
+            notificationLayout: NotificationLayout.BigPicture,
+            color: Colors.indigoAccent,
+            payload: {'uuid': 'uuid-test'}),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'REPLY',
+              label: 'Reply',
+              autoDismissible: true,
+              buttonType: ActionButtonType.InputField),
+          NotificationActionButton(
+              key: 'REMEMBER', label: 'Remember-me later', autoDismissible: true)
+        ]);
+  }
+  
+  static Future<void> showBigPictureNotificationHideExpandedLargeIcon(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_picture",
+            category: NotificationCategory.Promo,
+            title: 'Big <b>BIG</b> picture title',
+            summary: 'Summary <i>text</i>',
+            body: '$lorenIpsumText<br><br>$lorenIpsumText<br><br>$lorenIpsumText',
+            hideLargeIconOnExpand: true,
+            largeIcon:
+                'https://img.itdg.com.br/tdg/images/blog/uploads/2019/05/hamburguer.jpg',
+            bigPicture: 'https://img.itdg.com.br/tdg/images/blog/uploads/2019/05/hamburguer.jpg',
+            notificationLayout: NotificationLayout.BigPicture,
+            color: Colors.indigoAccent,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  /* *********************************************
+      BIG TEXT NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showBigTextNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_text",
+            title: 'Big text title',
+            body: '$lorenIpsumText\n\n$lorenIpsumText\n\n$lorenIpsumText',
+            notificationLayout: NotificationLayout.BigText,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showBigTextNotificationWithDifferentSummary(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_text",
+            title: 'Big text title',
+            summary: 'Notification summary loren ipsum',
+            body: '$lorenIpsumText\n\n$lorenIpsumText\n\n$lorenIpsumText',
+            notificationLayout: NotificationLayout.BigText,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showBigTextHtmlNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_text",
+            title: 'Big <b>BIG</b> text title',
+            summary: 'Summary <i>text</i>',
+            body: '$lorenIpsumText<br><br>$lorenIpsumText<br><br>$lorenIpsumText',
+            notificationLayout: NotificationLayout.BigText,
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showBigTextNotificationWithActionAndReply(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: "big_text",
+            title: 'Big <b>BIG</b> text title',
+            summary: 'Summary <i>text</i>',
+            body: '$lorenIpsumText<br><br>$lorenIpsumText<br><br>$lorenIpsumText',
+            color: Colors.indigoAccent,
+            notificationLayout: NotificationLayout.BigText,
+            payload: {'uuid': 'uuid-test'}),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'REPLY',
+              label: 'Reply',
+              autoDismissible: true,
+              buttonType: ActionButtonType.InputField),
+          NotificationActionButton(
+              key: 'REMEMBER', label: 'Remember-me later', autoDismissible: true)
+        ]);
+  }
+  
+  /* *********************************************
+      MEDIA CONTROLLER NOTIFICATIONS
+  ************************************************ */
+  
+  static void updateNotificationMediaPlayer(int id, MediaModel? mediaNow) {
+    if (mediaNow == null) {
+      cancelNotification(id);
+      return;
+    }
+  
+    AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'media_player',
+            category: NotificationCategory.Transport,
+            title: mediaNow.bandName,
+            body: mediaNow.trackName,
+            summary: MediaPlayerCentral.isPlaying ? 'Now playing' : '',
+            notificationLayout: NotificationLayout.MediaPlayer,
+            largeIcon: mediaNow.diskImagePath,
+            color: Colors.purple.shade700,
+            autoDismissible: false,
+            showWhen: false),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'MEDIA_PREV',
+              icon: 'resource://drawable/res_ic_prev' +
+                  (MediaPlayerCentral.hasPreviousMedia ? '' : '_disabled'),
+              label: 'Previous',
+              autoDismissible: false,
+              showInCompactView: false,
+              enabled: MediaPlayerCentral.hasPreviousMedia,
+              buttonType: ActionButtonType.KeepOnTop),
+          MediaPlayerCentral.isPlaying
+              ? NotificationActionButton(
+                  key: 'MEDIA_PAUSE',
+                  icon: 'resource://drawable/res_ic_pause',
+                  label: 'Pause',
+                  autoDismissible: false,
+                  showInCompactView: true,
+                  buttonType: ActionButtonType.KeepOnTop)
+              : NotificationActionButton(
+                  key: 'MEDIA_PLAY',
+                  icon: 'resource://drawable/res_ic_play' +
+                      (MediaPlayerCentral.hasAnyMedia ? '' : '_disabled'),
+                  label: 'Play',
+                  autoDismissible: false,
+                  showInCompactView: true,
+                  enabled: MediaPlayerCentral.hasAnyMedia,
+                  buttonType: ActionButtonType.KeepOnTop),
+          NotificationActionButton(
+              key: 'MEDIA_NEXT',
+              icon: 'resource://drawable/res_ic_next' +
+                  (MediaPlayerCentral.hasNextMedia ? '' : '_disabled'),
+              label: 'Previous',
+              showInCompactView: true,
+              enabled: MediaPlayerCentral.hasNextMedia,
+              buttonType: ActionButtonType.KeepOnTop),
+          NotificationActionButton(
+              key: 'MEDIA_CLOSE',
+              icon: 'resource://drawable/res_ic_close',
+              label: 'Close',
+              autoDismissible: true,
+              showInCompactView: true,
+              buttonType: ActionButtonType.KeepOnTop)
+        ]);
+  }
+  
+  static int _messageIncrement = 0;
+  static Future<void> simulateChatConversation({required String groupKey}) async {
+    _messageIncrement++ % 4 < 2 ?
+      createMessagingNotification(
+        channelKey: 'chats',
+        groupKey: groupKey,
+        chatName: 'Jhonny\'s Group',
+        username: 'Jhonny',
+        largeIcon: 'asset://assets/images/80s-disc.jpg',
+        message: 'Jhonny\'s message $_messageIncrement',
+      ):
+      createMessagingNotification(
+        channelKey: 'chats',
+        groupKey: 'jhonny_group',
+        chatName: 'Jhonny\'s Group',
+        username: 'Michael',
+        largeIcon: 'asset://assets/images/dj-disc.jpg',
+        message: 'Michael\'s message $_messageIncrement',
+      );
+  }
+  
+  static Future<void> simulateSendResponseChatConversation({required String msg, required String groupKey}) async {
+    createMessagingNotification(
+      channelKey: 'chats',
+      groupKey: groupKey,
+      chatName: 'Jhonny\'s Group',
+      username: 'you',
+      largeIcon: 'asset://assets/images/rock-disc.jpg',
+      message: msg,
+    );
+  }
+  
+  static Future<void> createMessagingNotification({
+    required String channelKey,
+    required String groupKey,
+    required String chatName,
+    required String username,
+    required String message,
+    String? largeIcon,
+    bool checkPermission = true
+  }) async {
+      await AwesomeNotifications().createNotification(
+          content:
+          NotificationContent(
+              id: createUniqueID(AwesomeNotifications.maxID),
+              groupKey: groupKey,
+              channelKey: channelKey,
+              summary: chatName,
+              title: username,
+              body: message,
+              largeIcon: largeIcon,
+              notificationLayout: NotificationLayout.Messaging,
+              category: NotificationCategory.Message
+          ),
+          actionButtons: [
+            NotificationActionButton(
+              key: 'REPLY',
+              label: 'Reply',
+              buttonType: ActionButtonType.InputField,
+              autoDismissible: false,
+            ),
+            NotificationActionButton(
+              key: 'READ',
+              label: 'Mark as Read',
+              autoDismissible: true,
+              buttonType: ActionButtonType.InputField,
+            )
+          ]
+      );
+  }
+  
+  /* *********************************************
+      INBOX NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showInboxNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+          id: id,
+          channelKey: "inbox",
+          title: '5 New mails from tester@gmail.com',
+          category: NotificationCategory.Email,
+          body:
+              '<b>You are our 10.000 visitor! Congratz!</b> You just won our prize'
+              '\n'
+              '<b>Want to loose weight?</b> Are you tired from false advertisements? '
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!'
+              '\n'
+              '<b>READ MY MESSAGE</b> Stop to ignore me!',
+          summary: 'E-mail inbox',
+          largeIcon:
+              'https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/366-mj-7703-fon-jj.jpg?w=800&dpr=1&fit=default&crop=default&q=65&vib=3&con=3&usm=15&bg=F4F4F3&ixlib=js-2.2.1&s=d144b28b5ebf828b7d2a1bb5b31efdb6',
+          notificationLayout: NotificationLayout.Inbox,
+          payload: {'uuid': 'uuid-test'},
+        ),
+        actionButtons: [
+          NotificationActionButton(
+              key: 'DISMISS',
+              label: 'Dismiss',
+              buttonType: ActionButtonType.DisabledAction,
+              autoDismissible: true,
+              icon: 'resource://drawable/res_ic_close'),
+          NotificationActionButton(
+            key: 'READ',
+            label: 'Mark as read',
+            autoDismissible: true,
+            //icon: 'resources://drawable/res_ic_close'
+          )
+        ]);
+  }
+  
+  /* *********************************************
+      INBOX NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> showGroupedNotifications(String channelKey) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: 1,
+            channelKey: channelKey,
+            title: 'Little Jhonny',
+            body: 'Hey dude! Look what i found!'));
+  
+    sleep(Duration(seconds: 2));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: 2, channelKey: 'grouped', title: 'Cyclano', body: 'What?'));
+  
+    sleep(Duration(seconds: 2));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: 3,
+            channelKey: channelKey,
+            title: 'Little Jhonny',
+            body: 'This push notifications plugin is amazing!'));
+  
+    sleep(Duration(seconds: 2));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: 4,
+            channelKey: channelKey,
+            title: 'Little Jhonny',
+            body: 'Its perfect!'));
+  
+    sleep(Duration(seconds: 2));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: 5,
+            channelKey: channelKey,
+            title: 'Little Jhonny',
+            body: 'I gonna contribute with the project! For sure!'));
+  }
+  
+  /* *********************************************
+      LIST SCHEDULED NOTIFICATIONS
+  ************************************************ */
+  
+  static Future<void> listScheduledNotifications(BuildContext context) async {
+    List<NotificationModel> activeSchedules =
+        await AwesomeNotifications().listScheduledNotifications();
+    for (NotificationModel schedule in activeSchedules) {
+      debugPrint(
+          'pending notification: ['
+              'id: ${schedule.content!.id}, '
+              'title: ${schedule.content!.titleWithoutHtml}, '
+              'schedule: ${schedule.schedule.toString()}'
+          ']');
+    }
+    return showDialog<void>(
+      context: context,
+      builder: (BuildContext context) {
+        return AlertDialog(
+          content: Text('${activeSchedules.length} schedules founded'),
+          actions: [
+            TextButton(
+              child: Text('OK'),
+              onPressed: () {
+                Navigator.of(context).pop();
+              },
+            ),
+          ],
+        );
+      },
+    );
+  }
+  
+  static Future<String> getCurrentTimeZone(){
+    return AwesomeNotifications().getLocalTimeZoneIdentifier();
+  }
+  
+  static Future<String> getUtcTimeZone(){
+    return AwesomeNotifications().getUtcTimeZoneIdentifier();
+  }
+  
+  static Future<void> repeatMinuteNotification() async {
+    String localTimeZone = await AwesomeNotifications().getLocalTimeZoneIdentifier();
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: -1,
+            channelKey: 'scheduled',
+            title: 'Notification at every single minute',
+            body:
+                'This notification was schedule to repeat at every single minute.',
+            notificationLayout: NotificationLayout.BigPicture,
+            bigPicture: 'asset://assets/images/melted-clock.png',
+            category: NotificationCategory.Reminder
+        ),
+        schedule: NotificationInterval(interval: 60, timeZone: localTimeZone, repeats: true, preciseAlarm: true));
+  }
+  
+  static Future<void> repeatMultiple5Crontab() async {
+    String localTimeZone = await AwesomeNotifications().getLocalTimeZoneIdentifier();
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: -1,
+            channelKey: 'scheduled',
+            title: 'Notification at every 5 seconds for 1 minute',
+            body:
+            'This notification was schedule to repeat at every 5 seconds.'),
+        schedule: NotificationAndroidCrontab(
+            initialDateTime: DateTime.now().add(Duration(seconds: 10)).toUtc(),
+            expirationDateTime: DateTime.now().add(Duration(seconds: 10, minutes: 1)).toUtc(),
+            crontabExpression: '/5 * * * * ? *',
+            timeZone: localTimeZone,
+            repeats: true));
+  }
+  
+  static Future<void> repeatPreciseThreeTimes() async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: -1,
+            channelKey: 'scheduled',
+            title: 'Notification scheduled to play precisely 3 times',
+            body: 'This notification was schedule to play precisely 3 times.',
+            notificationLayout: NotificationLayout.BigPicture,
+            bigPicture: 'asset://assets/images/melted-clock.png'),
+        schedule: NotificationAndroidCrontab(preciseSchedules: [
+              DateTime.now().add(Duration(seconds: 10)).toUtc(),
+              DateTime.now().add(Duration(seconds: 25)).toUtc(),
+              DateTime.now().add(Duration(seconds: 45)).toUtc()
+            ],
+            repeats: true));
+  }
+  
+  static Future<void> repeatMinuteNotificationOClock() async {
+    String localTimeZone = await AwesomeNotifications().getLocalTimeZoneIdentifier();
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: -1,
+            channelKey: 'scheduled',
+            title: 'Notification at exactly every single minute',
+            body:
+                'This notification was schedule to repeat at every single minute at clock.',
+            notificationLayout: NotificationLayout.BigPicture,
+            bigPicture: 'asset://assets/images/melted-clock.png'),
+        schedule: NotificationCalendar(second: 0, millisecond: 0, timeZone: localTimeZone, repeats: true));
+  }
+  
+  static Future<void> showNotificationAtSchedulePreciseDate(
+      DateTime scheduleTime) async {
+    String timeZoneIdentifier = AwesomeNotifications.localTimeZoneIdentifier;
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+          id: -1,
+          channelKey: 'scheduled',
+          title: 'Just in time!',
+          body: 'This notification was schedule to shows at ' +
+              (Utils.AwesomeDateUtils.parseDateToString(scheduleTime.toLocal()) ?? '?') +
+              ' $timeZoneIdentifier (' +
+              (Utils.AwesomeDateUtils.parseDateToString(scheduleTime.toUtc()) ?? '?') +
+              ' utc)',
+          notificationLayout: NotificationLayout.BigPicture,
+          bigPicture: 'asset://assets/images/delivery.jpeg',
+          payload: {'uuid': 'uuid-test'},
+          autoDismissible: false,
+        ),
+        schedule: NotificationCalendar.fromDate(date: scheduleTime, preciseAlarm: true));
+  }
+  
+  static Future<void> showNotificationWithNoBadge(int id) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelKey: 'no_badge',
+        channelName: 'No Badge Notifications',
+        channelDescription: 'Notifications with no badge',
+        channelShowBadge: false));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'no_badge',
+            title: 'no badge title',
+            body: 'no badge body',
+            payload: {'uuid': 'uuid-test'}));
+  }
+  
+  static Future<void> showProgressNotification(int id) async {
+    var maxStep = 10;
+    for (var simulatedStep = 1; simulatedStep <= maxStep + 1; simulatedStep++) {
+      await Future.delayed(Duration(seconds: 1), () async {
+        if (simulatedStep > maxStep) {
+          await AwesomeNotifications().createNotification(
+              content: NotificationContent(
+                  id: id,
+                  channelKey: 'progress_bar',
+                  title: 'Download finished',
+                  body: 'filename.txt',
+                  category: NotificationCategory.Progress,
+                  payload: {
+                    'file': 'filename.txt',
+                    'path': '-rmdir c://ruwindows/system32/huehuehue'
+                  },
+                  locked: false));
+        } else {
+          await AwesomeNotifications().createNotification(
+              content: NotificationContent(
+                  id: id,
+                  channelKey: 'progress_bar',
+                  title:
+                      'Downloading fake file in progress ($simulatedStep of $maxStep)',
+                  body: 'filename.txt',
+                  category: NotificationCategory.Progress,
+                  payload: {
+                    'file': 'filename.txt',
+                    'path': '-rmdir c://ruwindows/system32/huehuehue'
+                  },
+                  notificationLayout: NotificationLayout.ProgressBar,
+                  progress: min((simulatedStep / maxStep * 100).round(), 100),
+                  locked: true));
+        }
+      });
+    }
+  }
+  
+  static Future<void> showIndeterminateProgressNotification(int id) async {
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'progress_bar',
+            title: 'Downloading fake file...',
+            body: 'filename.txt',
+            category: NotificationCategory.Progress,
+            payload: {
+              'file': 'filename.txt',
+              'path': '-rmdir c://ruwindows/system32/huehuehue'
+            },
+            notificationLayout: NotificationLayout.ProgressBar,
+            progress: null,
+            locked: true));
+  }
+  
+  static Future<void> showNotificationWithUpdatedChannelDescription(int id) async {
+    AwesomeNotifications().setChannel(NotificationChannel(
+        channelGroupKey: 'channel_tests',
+        channelKey: 'updated_channel',
+        channelName: 'Channel to update (updated)',
+        channelDescription: 'Notifications with updated channel'));
+  
+    await AwesomeNotifications().createNotification(
+        content: NotificationContent(
+            id: id,
+            channelKey: 'updated_channel',
+            title: 'updated notification channel',
+            body: 'check settings to see updated channel description',
+            category: NotificationCategory.Status,
+            payload: {'uuid': '0123456789'}));
+  }
+  
+  static Future<void> removeChannel() async {
+    AwesomeNotifications().removeChannel('updated_channel');
+  }
+
+  static Future<void> dismissNotification(int id) async {
+    await AwesomeNotifications().dismiss(id);
+  }
+
+  static Future<void> cancelSchedule(int id) async {
+    await AwesomeNotifications().cancelSchedule(id);
+  }
+  
+  static Future<void> cancelNotification(int id) async {
+    await AwesomeNotifications().cancel(id);
+  }
+  
+  static Future<void> dismissNotificationsByChannelKey(String channelKey) async {
+    await AwesomeNotifications().dismissNotificationsByChannelKey(channelKey);
+  }
+  
+  static Future<void> dismissNotificationsByGroupKey(String groupKey) async {
+    await AwesomeNotifications().dismissNotificationsByGroupKey(groupKey);
+  }
+  
+  static Future<void> cancelSchedulesByChannelKey(String channelKey) async {
+    await AwesomeNotifications().cancelSchedulesByChannelKey(channelKey);
+  }
+  
+  static Future<void> cancelSchedulesByGroupKey(String groupKey) async {
+    await AwesomeNotifications().cancelSchedulesByGroupKey(groupKey);
+  }
+  
+  static Future<void> cancelNotificationsByChannelKey(String channelKey) async {
+    await AwesomeNotifications().cancelNotificationsByChannelKey(channelKey);
+  }
+  
+  static Future<void> cancelNotificationsByGroupKey(String groupKey) async {
+    await AwesomeNotifications().cancelNotificationsByGroupKey(groupKey);
+  }
+
+  static Future<void> dismissAllNotifications() async {
+    await AwesomeNotifications().dismissAllNotifications();
+  }
+
+  static Future<void> cancelAllSchedules() async {
+    await AwesomeNotifications().cancelAllSchedules();
+  }
+  
+  static Future<void> cancelAllNotifications() async {
+    await AwesomeNotifications().cancelAll();
+  }
+  
+  String toTwoDigitString(int value) {
+    return value.toString().padLeft(2, '0');
+  }
+
+}
\ No newline at end of file
Index: example/ios/Runner.xcworkspace/contents.xcworkspacedata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcworkspace/contents.xcworkspacedata b/example/ios/Runner.xcworkspace/contents.xcworkspacedata
new file mode 100644
--- /dev/null	(date 1652867892338)
+++ b/example/ios/Runner.xcworkspace/contents.xcworkspacedata	(date 1652867892338)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "group:Runner.xcodeproj">
+   </FileRef>
+   <FileRef
+      location = "group:Pods/Pods.xcodeproj">
+   </FileRef>
+</Workspace>
Index: example/android/app/src/main/kotlin/me/carda/example/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/kotlin/me/carda/example/MainActivity.kt b/example/android/app/src/main/kotlin/me/carda/example/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1652867891802)
+++ b/example/android/app/src/main/kotlin/me/carda/example/MainActivity.kt	(date 1652867891802)
@@ -0,0 +1,6 @@
+package me.carda.example
+
+import io.flutter.embedding.android.FlutterActivity
+
+class MainActivity: FlutterActivity() {
+}
Index: example/lib/common_widgets/remarkble_text.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/remarkble_text.dart b/example/lib/common_widgets/remarkble_text.dart
new file mode 100644
--- /dev/null	(date 1652867891748)
+++ b/example/lib/common_widgets/remarkble_text.dart	(date 1652867891748)
@@ -0,0 +1,25 @@
+import 'package:flutter/material.dart';
+
+class RemarkableText extends StatelessWidget {
+
+  final String text;
+  final Color? color;
+
+  const RemarkableText({Key? key, required this.text, this.color}) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: const EdgeInsets.only(bottom: 20.0),
+      child: FittedBox(
+        child: RichText(
+          textAlign: TextAlign.center,
+          text: TextSpan(
+              text: text,
+              style: TextStyle(fontWeight: FontWeight.bold, color: color, fontSize: 18)
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AndroidLogFilters\">\n    <option name=\"TOOL_WINDOW_LOG_LEVEL\" value=\"debug\" />\n    <option name=\"TOOL_WINDOW_CONFIGURED_FILTER\" value=\"Show only selected application\" />\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"NONE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e193cc25-4aee-4ee7-85e6-38b386ea7f1b\" name=\"Default Changelist\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/Call.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitIncomingActivity.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitIncomingBroadcastReceiver.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitNotificationManager.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitSoundPlayerService.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/FlutterCallkitIncomingPlugin.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/SharedPreferencesUtils.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/TransparentActivity.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/Utils.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/widgets/CircleTransform.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/widgets/RippleRelativeLayout.kt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/anim/shake_anim.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_accept.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_call_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_decline.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_video.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_video_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_accept.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_call_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_decline.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_video.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_video_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-v21/bg_button_accept.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-v21/bg_button_decline.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-v21/rounded_button_accept.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-v21/rounded_button_decline.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_accept.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_call_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_decline.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_video.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_video_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_accept.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_call_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_decline.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_video.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_video_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_accept.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_call_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_decline.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_default_avatar.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_logo.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_video.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_video_missed.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable/bg_button_accept.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable/bg_button_decline.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable/rounded_button_accept.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable/rounded_button_decline.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/drawable/transparent.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/layout/activity_callkit_incoming.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/layout/layout_custom_miss_notification.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/layout/layout_custom_notification.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/raw/ringtone_default.mp3\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/values/attrs.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/values/colors.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/values/dimens.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/values/strings.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/android/src/main/res/values/styles.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/lib/flutter_callkit_incoming.dart\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Dart_SDK.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/libraries/Dart_SDK.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/android/.idea/gradle.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/android/.idea/gradle.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/android/.idea/jarRepositories.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/android/.idea/jarRepositories.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/android/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/android/.idea/misc.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/android/.idea/runConfigurations.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/android/build.gradle\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/android/build.gradle\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/android/src/main/AndroidManifest.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/android/src/main/AndroidManifest.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Enum\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1gdlKvSd5jB5IWDBvSuAgX3lxo8\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"foldersAlwaysOnTop\" value=\"false\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n    <option name=\"showMembers\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"DEBUGGABLE_DEVICE\" value=\"Nexus_5_A06 [emulator-5554]\" />\n    <property name=\"DEBUGGABLE_PROCESS\" value=\"me.carda.awesome_notifications_example\" />\n    <property name=\"DEBUGGER_ID\" value=\"Java\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.cidr.known.project.marker\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"SHOW_ALL_PROCESSES\" value=\"false\" />\n    <property name=\"cidr.known.project.marker\" value=\"true\" />\n    <property name=\"dart.analysis.tool.window.force.activate\" value=\"false\" />\n    <property name=\"dart.analysis.tool.window.visible\" value=\"false\" />\n    <property name=\"io.flutter.reload.alreadyRun\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/lib\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.keymap\" />\n    <property name=\"show.migrate.to.gradle.popup\" value=\"false\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"E:\\plugins\\awesome_notifications\\test\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\example\\lib\\common_widgets\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\lib\\src\\models\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\lib\\src\\enumerators\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\android\\src\\main\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"E:\\plugins\\awesome_notifications\\lib\\src\\enumerators\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\example\\ios\\Runner\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\example\\android\\app\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\example\\assets\\readme\" />\n      <recent name=\"E:\\plugins\\awesome_notifications\\lib\\src\\helpers\" />\n    </key>\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\n      <recent name=\"me.carda.awesome_notifications.notifications\" />\n      <recent name=\"me.carda.awesome_notifications.notifications.managers\" />\n      <recent name=\"me.carda.awesome_notifications.notifications.models\" />\n      <recent name=\"me.carda.awesome_notifications.notifications.enumerators\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Flutter.example/lib/main.dart\">\n    <configuration name=\"extractValueTest\" type=\"FlutterTestConfigType\" factoryName=\"Flutter Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"testName\" value=\"extractValueTest\" />\n      <option name=\"testFile\" value=\"$PROJECT_DIR$/test/extraction_values_test.dart\" />\n      <option name=\"useRegexp\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"testExtractValue\" type=\"FlutterTestConfigType\" factoryName=\"Flutter Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"testName\" value=\"testExtractValue\" />\n      <option name=\"testFile\" value=\"$PROJECT_DIR$/test/extraction_values_test.dart\" />\n      <option name=\"useRegexp\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"testExtractValueConversion\" type=\"FlutterTestConfigType\" factoryName=\"Flutter Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"testName\" value=\"testExtractValueConversion\" />\n      <option name=\"testFile\" value=\"$PROJECT_DIR$/test/extraction_values_test.dart\" />\n      <option name=\"useRegexp\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"tests in extraction_values_test.dart\" type=\"FlutterTestConfigType\" factoryName=\"Flutter Test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"testFile\" value=\"$PROJECT_DIR$/test/extraction_values_test.dart\" />\n      <option name=\"useRegexp\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"Flutter.example/lib/main.dart\" />\n      <item itemvalue=\"Flutter Test.testExtractValueConversion\" />\n      <item itemvalue=\"Flutter Test.testExtractValue\" />\n      <item itemvalue=\"Flutter Test.extractValueTest\" />\n      <item itemvalue=\"Flutter Test.tests in extraction_values_test.dart\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Flutter Test.tests in extraction_values_test.dart\" />\n        <item itemvalue=\"Flutter Test.extractValueTest\" />\n        <item itemvalue=\"Flutter Test.testExtractValue\" />\n        <item itemvalue=\"Flutter Test.testExtractValueConversion\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e193cc25-4aee-4ee7-85e6-38b386ea7f1b\" name=\"Default Changelist\" comment=\"\" />\n      <created>1598452289782</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1598452289782</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <ignored-roots>\n      <path value=\"$PROJECT_DIR$/example/ios/.symlinks/plugins/awesome_notifications\" />\n    </ignored-roots>\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationBuilder.java</url>\n          <line>46</line>\n          <option name=\"timeStamp\" value=\"21\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/services/firebase/FCMService.java</url>\n          <line>58</line>\n          <option name=\"timeStamp\" value=\"22\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/utils/AudioUtils.java</url>\n          <line>68</line>\n          <option name=\"timeStamp\" value=\"42\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/broadcastReceivers/AwesomeMediaButtonReceiver.java</url>\n          <line>25</line>\n          <option name=\"timeStamp\" value=\"61\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/broadcastReceivers/ScheduledNotificationReceiver.java</url>\n          <line>21</line>\n          <option name=\"timeStamp\" value=\"106\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationSender.java</url>\n          <line>188</line>\n          <option name=\"timeStamp\" value=\"150\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/AwesomeNotificationsPlugin.java</url>\n          <line>663</line>\n          <option name=\"timeStamp\" value=\"154\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/broadcastReceivers/DismissedNotificationReceiver.java</url>\n          <line>23</line>\n          <option name=\"timeStamp\" value=\"202\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationSender.java</url>\n          <line>219</line>\n          <option name=\"timeStamp\" value=\"204\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/broadcastReceivers/KeepOnTopActionReceiver.java</url>\n          <line>25</line>\n          <option name=\"timeStamp\" value=\"207\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/services/ForegroundService.java</url>\n          <line>63</line>\n          <option name=\"timeStamp\" value=\"211\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/services/ForegroundService.java</url>\n          <line>91</line>\n          <option name=\"timeStamp\" value=\"213\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/AwesomeNotificationsPlugin.java</url>\n          <line>437</line>\n          <option name=\"timeStamp\" value=\"214\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationBuilder.java</url>\n          <line>740</line>\n          <option name=\"timeStamp\" value=\"220\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/build/intermediates/javac/release/classes/me/carda/awesome_notifications/notifications/NotificationBuilder.class</url>\n          <line>392</line>\n          <option name=\"timeStamp\" value=\"221\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/managers/ChannelManager.java</url>\n          <line>89</line>\n          <option name=\"timeStamp\" value=\"227\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"java-field\">\n          <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/services/ForegroundService.java</url>\n          <line>69</line>\n          <properties field=\"EXTRA\" class=\"me.carda.awesome_notifications.services.ForegroundService.StartParameter\" />\n          <option name=\"timeStamp\" value=\"210\" />\n        </line-breakpoint>\n      </breakpoints>\n      <default-breakpoints>\n        <breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"CidrExceptionBreakpoint\" />\n        <breakpoint suspend=\"THREAD\" type=\"dart-exception\" />\n      </default-breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"Remote\">\n        <watch expression=\"onlyAlertOnce\" language=\"JAVA\" />\n        <watch expression=\"groupKey\" language=\"JAVA\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 844b008b8507b86109424c4f052ba9b89ba01deb)
+++ b/.idea/workspace.xml	(date 1652868446353)
@@ -9,72 +9,195 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e193cc25-4aee-4ee7-85e6-38b386ea7f1b" name="Default Changelist" comment="">
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/Call.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitIncomingActivity.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitIncomingBroadcastReceiver.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitNotificationManager.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/CallkitSoundPlayerService.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/FlutterCallkitIncomingPlugin.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/SharedPreferencesUtils.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/TransparentActivity.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/Utils.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/widgets/CircleTransform.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/flutter_callkit_incoming/widgets/RippleRelativeLayout.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/anim/shake_anim.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_accept.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_call_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_decline.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_video.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-hdpi/ic_video_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_accept.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_call_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_decline.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_video.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-mdpi/ic_video_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-v21/bg_button_accept.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-v21/bg_button_decline.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-v21/rounded_button_accept.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-v21/rounded_button_decline.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_accept.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_call_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_decline.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_video.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xhdpi/ic_video_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_accept.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_call_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_decline.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_video.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxhdpi/ic_video_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_accept.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_call_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_decline.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_default_avatar.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_logo.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_video.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable-xxxhdpi/ic_video_missed.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable/bg_button_accept.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable/bg_button_decline.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable/rounded_button_accept.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable/rounded_button_decline.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/drawable/transparent.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/layout/activity_callkit_incoming.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/layout/layout_custom_miss_notification.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/layout/layout_custom_notification.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/raw/ringtone_default.mp3" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/values/attrs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/values/colors.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/values/dimens.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/values/strings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/android/src/main/res/values/styles.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/lib/flutter_callkit_incoming.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/.metadata" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/README.md" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/build.gradle" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/debug/AndroidManifest.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/AndroidManifest.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/java/me/carda/awesome_notifications_example/MainActivity.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/kotlin/me/carda/awesome_notifications_example/MainActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/kotlin/me/carda/example/MainActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-hdpi/ic_launcher_background.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-hdpi/ic_launcher_foreground.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-mdpi/ic_launcher_background.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-mdpi/ic_launcher_foreground.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-v21/launch_background.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-xhdpi/ic_launcher_background.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-xhdpi/ic_launcher_foreground.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-xxhdpi/ic_launcher_background.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-xxhdpi/ic_launcher_foreground.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-xxxhdpi/ic_launcher_background.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable-xxxhdpi/ic_launcher_foreground.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/launch_background.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_app_icon.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_download_icon.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_flutter_icon.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_close.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_next.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_next_disabled.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_pause.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_play.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_play_disabled.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_prev.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_prev_disabled.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_ic_stop.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_mansion.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_media_icon.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_power_ranger_thunder.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/drawable/res_schedule_icon.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/mipmap-hdpi/ic_launcher.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/mipmap-mdpi/ic_launcher.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/mipmap-xhdpi/ic_launcher.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/raw/res_morph_power_rangers.m4a" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/values-night/styles.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/main/res/values/styles.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/app/src/profile/AndroidManifest.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/awesome_notifications_core/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/awesome_notifications_core/build.gradle" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/awesome_notifications_core/consumer-rules.pro" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/awesome_notifications_core/proguard-rules.pro" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/awesome_notifications_core/src/androidTest/java/me/carda/awesome_notifications_core/ExampleInstrumentedTest.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/awesome_notifications_core/src/main/AndroidManifest.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/awesome_notifications_core/src/test/java/me/carda/awesome_notifications_core/ExampleUnitTest.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/build.gradle" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/gradle.properties" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/gradle/wrapper/gradle-wrapper.properties" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/settings.gradle" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/android/settings_aar.gradle" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/80s-disc.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/android-bg-worker.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/animated-bell.gif" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/animated-clock.gif" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/animated-warning.gif" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/awesome-notifications-logo-black.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/awesome-notifications-logo-color.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/awesome-notifications-logo-white.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/awesome-notifications-logo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/balloons-in-sky.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/classic-disc.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/delivery.jpeg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/dj-disc.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/fireman-hero.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/girl-phonecall.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/happy-dogs.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/melted-clock.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/old-disc.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/placeholder.gif" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/remix-disc.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/images/rock-disc.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/launcher/background.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/launcher/foreground.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/launcher/icon.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/launcher/push-notifications-icon.psd" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/Firebase_FCM_Example.postman_collection.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/add-notification-content-extension.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/add-notification-service-extension.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/awesome-notifications-android-examples.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/awesome-notifications-atention.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/awesome-notifications-ios-examples.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/awesome-notifications-progress.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/awesome-notifications.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/disable-bitcode.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/envelope-bg.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/google-json-path.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/google-plist-path.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/notification-life-cycle.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/readme/xcode-signing-and-capabilities.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/assets/sounds/morph_power_rangers.m4a" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Flutter/AppFrameworkInfo.plist" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Flutter/Debug.xcconfig" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Flutter/Release.xcconfig" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Podfile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Podfile.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcodeproj/project.pbxproj" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcworkspace/contents.xcworkspacedata" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/AppDelegate.swift" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-50x50@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-50x50@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-57x57@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-57x57@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-72x72@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-72x72@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/Contents.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@2x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@3x.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/res_mansion.imageset/Contents.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Assets.xcassets/res_mansion.imageset/res_mansion.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Base.lproj/LaunchScreen.storyboard" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Base.lproj/Main.storyboard" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Info.plist" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Runner-Bridging-Header.h" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/Runner.entitlements" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/ios/Runner/res_morph_power_rangers.aiff" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/check_button.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/double_slider.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/led_light.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/remarkable_divisor.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/remarkble_text.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/seconds_slider.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/service_control_panel.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/simple_button.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/single_slider.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/text_divisor.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/common_widgets/text_note.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/datasources/common/datasource.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/datasources/common/http_datasource.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/datasources/firebase_datasource.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/main.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/models/media_model.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/pages/firebase_test_page.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/pages/home_page.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/pages/media_details_page.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/pages/notification_details_page.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/pages/phone_call_page.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/routes.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/utils/common_functions.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/utils/media_player_central.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/utils/notification_util.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/lib/utils/playback_timer.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/pubspec.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/pubspec.yaml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/test/widget_test.dart" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/web/favicon.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/web/icons/Icon-192.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/web/icons/Icon-512.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/web/index.html" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/example/web/manifest.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/libraries/Dart_SDK.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/Dart_SDK.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/android/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/android/.idea/gradle.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/android/.idea/jarRepositories.xml" beforeDir="false" afterPath="$PROJECT_DIR$/android/.idea/jarRepositories.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/android/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/android/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/android/.idea/runConfigurations.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/android/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/android/build.gradle" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/android/src/main/AndroidManifest.xml" beforeDir="false" afterPath="$PROJECT_DIR$/android/src/main/AndroidManifest.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -222,7 +345,7 @@
       <breakpoints>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
           <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationBuilder.java</url>
-          <line>46</line>
+          <line>45</line>
           <option name="timeStamp" value="21" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
@@ -247,7 +370,7 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
           <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationSender.java</url>
-          <line>188</line>
+          <line>180</line>
           <option name="timeStamp" value="150" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
@@ -262,7 +385,7 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
           <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationSender.java</url>
-          <line>219</line>
+          <line>211</line>
           <option name="timeStamp" value="204" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
@@ -287,7 +410,7 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
           <url>file://$PROJECT_DIR$/android/src/main/java/me/carda/awesome_notifications/notifications/NotificationBuilder.java</url>
-          <line>740</line>
+          <line>739</line>
           <option name="timeStamp" value="220" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="java-line">
Index: example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md b/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md
new file mode 100644
--- /dev/null	(date 1652867892296)
+++ b/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md	(date 1652867892296)
@@ -0,0 +1,5 @@
+# Launch Screen Assets
+
+You can customize the launch screen with your own desired assets by replacing the image files in this directory.
+
+You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.
\ No newline at end of file
Index: example/lib/common_widgets/service_control_panel.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/service_control_panel.dart b/example/lib/common_widgets/service_control_panel.dart
new file mode 100644
--- /dev/null	(date 1652867891754)
+++ b/example/lib/common_widgets/service_control_panel.dart	(date 1652867891754)
@@ -0,0 +1,55 @@
+import 'package:flutter/material.dart';
+import 'package:awesome_notifications_example/common_widgets/led_light.dart';
+import 'package:awesome_notifications_example/common_widgets/simple_button.dart';
+
+class ServiceControlPanel extends StatelessWidget {
+  final String title;
+  final bool statusControl;
+  final ThemeData themeData;
+  final void Function()? onPressed;
+
+  const ServiceControlPanel(
+    this.title,
+    this.statusControl,
+    this.themeData, {
+    Key? key,
+    this.onPressed,
+  }) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+
+    return Container(
+      width: mediaQueryData.size.width * 0.4,
+      child: Column(
+        children: <Widget>[
+          Padding(
+            padding: const EdgeInsets.all(8.0),
+            child: RichText(
+              textAlign: TextAlign.center,
+              text: TextSpan(
+                  style: TextStyle(color: Colors.black87),
+                  text: '$title status:\n',
+                  children: [
+                    TextSpan(
+                        style: TextStyle(
+                            color: statusControl
+                                ? Colors.green
+                                : Colors.redAccent),
+                        text: (statusControl ? 'Available' : 'Unavailable') +
+                            '\n'),
+                    WidgetSpan(child: LedLight(statusControl))
+                  ]),
+            ),
+          ),
+          SimpleButton('Go to $title\nTest Page',
+              width: mediaQueryData.size.width * 0.4,
+              labelColor:
+                  statusControl ? themeData.hintColor : themeData.disabledColor,
+              onPressed: statusControl ? onPressed : null),
+        ],
+      ),
+    );
+  }
+}
Index: example/web/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/web/index.html b/example/web/index.html
new file mode 100644
--- /dev/null	(date 1652867891765)
+++ b/example/web/index.html	(date 1652867891765)
@@ -0,0 +1,45 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <!--
+    If you are serving your web app in a path other than the root, change the
+    href value below to reflect the base path you are serving from.
+
+    The path provided below has to start and end with a slash "/" in order for
+    it to work correctly.
+
+    Fore more details:
+    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
+  -->
+  <base href="/">
+
+  <meta charset="UTF-8">
+  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
+  <meta name="description" content="A new Flutter project.">
+
+  <!-- iOS meta tags & icons -->
+  <meta name="apple-mobile-web-app-capable" content="yes">
+  <meta name="apple-mobile-web-app-status-bar-style" content="black">
+  <meta name="apple-mobile-web-app-title" content="example">
+  <link rel="apple-touch-icon" href="icons/Icon-192.png">
+
+  <!-- Favicon -->
+  <link rel="icon" type="image/png" href="favicon.png"/>
+
+  <title>example</title>
+  <link rel="manifest" href="manifest.json">
+</head>
+<body>
+  <!-- This script installs service_worker.js to provide PWA functionality to
+       application. For more information, see:
+       https://developers.google.com/web/fundamentals/primers/service-workers -->
+  <script>
+    if ('serviceWorker' in navigator) {
+      window.addEventListener('flutter-first-frame', function () {
+        navigator.serviceWorker.register('flutter_service_worker.js');
+      });
+    }
+  </script>
+  <script src="main.dart.js" type="application/javascript"></script>
+</body>
+</html>
Index: example/lib/common_widgets/simple_button.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/simple_button.dart b/example/lib/common_widgets/simple_button.dart
new file mode 100644
--- /dev/null	(date 1652867891771)
+++ b/example/lib/common_widgets/simple_button.dart	(date 1652867891771)
@@ -0,0 +1,46 @@
+import 'package:flutter/material.dart';
+
+class SimpleButton extends StatelessWidget {
+  final String label;
+  final Color? labelColor;
+  final Color? backgroundColor;
+  final double? width;
+  final void Function()? onPressed;
+  final bool enabled;
+
+  const SimpleButton(
+    this.label, {
+    Key? key,
+    this.labelColor,
+    this.backgroundColor,
+    this.width,
+    this.onPressed,
+    this.enabled = true
+  }) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    return Container(
+        width: width,
+        padding: EdgeInsets.symmetric(vertical: 5),
+        child: ElevatedButton(
+          child: Padding(
+            padding: EdgeInsets.symmetric(vertical: 15, horizontal: 5),
+            child: Text(label, textAlign: TextAlign.center,
+              style: TextStyle(
+                  fontSize: 14,
+                  color: (labelColor ?? Colors.black87).withAlpha( enabled ? 255 : 60 )
+              ),
+            ),
+          ),
+          style: ElevatedButton.styleFrom(
+            primary: backgroundColor ?? Colors.grey.shade200,
+            textStyle: TextStyle(
+              color: labelColor ?? Colors.black87
+            )
+          ),
+          onPressed: enabled ? onPressed : null
+        )
+    );
+  }
+}
Index: example/android/awesome_notifications_core/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/awesome_notifications_core/build.gradle b/example/android/awesome_notifications_core/build.gradle
new file mode 100644
--- /dev/null	(date 1652867891777)
+++ b/example/android/awesome_notifications_core/build.gradle	(date 1652867891777)
@@ -0,0 +1,37 @@
+plugins {
+    id 'com.android.library'
+}
+
+android {
+    compileSdkVersion 31
+
+    defaultConfig {
+        minSdkVersion 21
+        targetSdkVersion 31
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+        consumerProguardFiles "consumer-rules.pro"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+}
+
+dependencies {
+
+    implementation 'androidx.appcompat:appcompat:1.3.1'
+    implementation 'com.google.android.material:material:1.4.0'
+    testImplementation 'junit:junit:4.+'
+    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
+}
\ No newline at end of file
Index: example/android/app/src/profile/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/profile/AndroidManifest.xml b/example/android/app/src/profile/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1652867891783)
+++ b/example/android/app/src/profile/AndroidManifest.xml	(date 1652867891783)
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="me.carda.awesome_notifications_example">
+    <!-- Flutter needs it to communicate with the running application
+         to allow setting breakpoints, to provide hot reload, etc.
+    -->
+    <uses-permission android:name="android.permission.INTERNET"/>
+</manifest>
Index: example/lib/common_widgets/led_light.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/led_light.dart b/example/lib/common_widgets/led_light.dart
new file mode 100644
--- /dev/null	(date 1652867891818)
+++ b/example/lib/common_widgets/led_light.dart	(date 1652867891818)
@@ -0,0 +1,38 @@
+import 'package:flutter/material.dart';
+
+class LedLight extends StatelessWidget {
+
+  final bool isOn;
+
+  const LedLight(this.isOn, {Key? key}) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    Color lightColor = isOn ? Colors.green : Colors.redAccent;
+
+    return Padding(
+      padding: const EdgeInsets.only( top: 15.0, bottom: 10.0 ),
+      child: Container(
+          width: 15.0,
+          height: 15.0,
+          decoration: BoxDecoration(
+              color: lightColor,
+              borderRadius: BorderRadius.only(
+                  topLeft: Radius.circular(10),
+                  topRight: Radius.circular(10),
+                  bottomLeft: Radius.circular(10),
+                  bottomRight: Radius.circular(10)
+              ),
+              boxShadow: [
+                BoxShadow(
+                  color: lightColor.withOpacity(0.5),
+                  spreadRadius: 5,
+                  blurRadius: 7,
+                  offset: Offset(0, 1), // changes position of shadow
+                ),
+              ]
+          )
+      ),
+    );
+  }
+}
Index: example/ios/Flutter/Release.xcconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Flutter/Release.xcconfig b/example/ios/Flutter/Release.xcconfig
new file mode 100644
--- /dev/null	(date 1652867892394)
+++ b/example/ios/Flutter/Release.xcconfig	(date 1652867892394)
@@ -0,0 +1,2 @@
+#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
+#include "Generated.xcconfig"
Index: example/ios/Runner/Runner-Bridging-Header.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Runner-Bridging-Header.h b/example/ios/Runner/Runner-Bridging-Header.h
new file mode 100644
--- /dev/null	(date 1652867891836)
+++ b/example/ios/Runner/Runner-Bridging-Header.h	(date 1652867891836)
@@ -0,0 +1,1 @@
+#import "GeneratedPluginRegistrant.h"
Index: example/android/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/gradle/wrapper/gradle-wrapper.properties b/example/android/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1652867891847)
+++ b/example/android/gradle/wrapper/gradle-wrapper.properties	(date 1652867891847)
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.7.1-all.zip
\ No newline at end of file
Index: example/ios/Runner/Info.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Info.plist b/example/ios/Runner/Info.plist
new file mode 100644
--- /dev/null	(date 1652867892343)
+++ b/example/ios/Runner/Info.plist	(date 1652867892343)
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleDisplayName</key>
+	<string>Awesome Notifications</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>example</string>
+	<key>CFBundlePackageType</key>
+	<string>APPL</string>
+	<key>CFBundleShortVersionString</key>
+	<string>$(FLUTTER_BUILD_NAME)</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleVersion</key>
+	<string>$(FLUTTER_BUILD_NUMBER)</string>
+	<key>LSRequiresIPhoneOS</key>
+	<true/>
+	<key>UIBackgroundModes</key>
+	<array>
+		<string>fetch</string>
+		<string>processing</string>
+	</array>
+	<key>UILaunchStoryboardName</key>
+	<string>LaunchScreen</string>
+	<key>UIMainStoryboardFile</key>
+	<string>Main</string>
+	<key>UISupportedInterfaceOrientations</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UISupportedInterfaceOrientations~ipad</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationPortraitUpsideDown</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UIViewControllerBasedStatusBarAppearance</key>
+	<false/>
+</dict>
+</plist>
Index: example/pubspec.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/pubspec.lock b/example/pubspec.lock
new file mode 100644
--- /dev/null	(date 1652867892352)
+++ b/example/pubspec.lock	(date 1652867892352)
@@ -0,0 +1,551 @@
+# Generated by pub
+# See https://dart.dev/tools/pub/glossary#lockfile
+packages:
+  archive:
+    dependency: transitive
+    description:
+      name: archive
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "3.1.2"
+  args:
+    dependency: transitive
+    description:
+      name: args
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  async:
+    dependency: transitive
+    description:
+      name: async
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.8.2"
+  awesome_notifications:
+    dependency: "direct main"
+    description:
+      path: ".."
+      relative: true
+    source: path
+    version: "0.6.20"
+  boolean_selector:
+    dependency: transitive
+    description:
+      name: boolean_selector
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.1.0"
+  characters:
+    dependency: transitive
+    description:
+      name: characters
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.2.0"
+  charcode:
+    dependency: transitive
+    description:
+      name: charcode
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.3.1"
+  clock:
+    dependency: transitive
+    description:
+      name: clock
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.1.0"
+  collection:
+    dependency: transitive
+    description:
+      name: collection
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.15.0"
+  crypto:
+    dependency: transitive
+    description:
+      name: crypto
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "3.0.1"
+  cupertino_icons:
+    dependency: "direct main"
+    description:
+      name: cupertino_icons
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.0.2"
+  device_info:
+    dependency: "direct main"
+    description:
+      name: device_info
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.3"
+  device_info_platform_interface:
+    dependency: transitive
+    description:
+      name: device_info_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.1"
+  fake_async:
+    dependency: transitive
+    description:
+      name: fake_async
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.2.0"
+  ffi:
+    dependency: transitive
+    description:
+      name: ffi
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.0.0"
+  file:
+    dependency: transitive
+    description:
+      name: file
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "6.1.0"
+  firebase_core:
+    dependency: "direct main"
+    description:
+      name: firebase_core
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.1.0"
+  firebase_core_platform_interface:
+    dependency: transitive
+    description:
+      name: firebase_core_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "4.0.0"
+  firebase_core_web:
+    dependency: transitive
+    description:
+      name: firebase_core_web
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.0.2"
+  firebase_messaging:
+    dependency: "direct main"
+    description:
+      name: firebase_messaging
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "9.1.3"
+  firebase_messaging_platform_interface:
+    dependency: transitive
+    description:
+      name: firebase_messaging_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.1.3"
+  firebase_messaging_web:
+    dependency: transitive
+    description:
+      name: firebase_messaging_web
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.0.6"
+  flare_dart:
+    dependency: transitive
+    description:
+      name: flare_dart
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.3.4"
+  flare_flutter:
+    dependency: transitive
+    description:
+      name: flare_flutter
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.6"
+  flutter:
+    dependency: "direct main"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_launcher_icons:
+    dependency: "direct dev"
+    description:
+      name: flutter_launcher_icons
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.9.0"
+  flutter_test:
+    dependency: "direct dev"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_web_plugins:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  fluttertoast:
+    dependency: "direct main"
+    description:
+      name: fluttertoast
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "8.0.6"
+  font_awesome_flutter:
+    dependency: "direct main"
+    description:
+      name: font_awesome_flutter
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "9.0.0"
+  giffy_dialog:
+    dependency: "direct main"
+    description:
+      name: giffy_dialog
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.8.0"
+  http:
+    dependency: "direct main"
+    description:
+      name: http
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.13.2"
+  http_parser:
+    dependency: transitive
+    description:
+      name: http_parser
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "4.0.0"
+  image:
+    dependency: transitive
+    description:
+      name: image
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "3.0.2"
+  infinite_listview:
+    dependency: transitive
+    description:
+      name: infinite_listview
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.1.0"
+  intl:
+    dependency: "direct main"
+    description:
+      name: intl
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.17.0"
+  js:
+    dependency: transitive
+    description:
+      name: js
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.6.3"
+  matcher:
+    dependency: transitive
+    description:
+      name: matcher
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.12.11"
+  meta:
+    dependency: transitive
+    description:
+      name: meta
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.7.0"
+  numberpicker:
+    dependency: "direct main"
+    description:
+      name: numberpicker
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.1.1"
+  palette_generator:
+    dependency: "direct main"
+    description:
+      name: palette_generator
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.3.0"
+  path:
+    dependency: transitive
+    description:
+      name: path
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.8.0"
+  path_provider:
+    dependency: "direct main"
+    description:
+      name: path_provider
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.1"
+  path_provider_linux:
+    dependency: transitive
+    description:
+      name: path_provider_linux
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  path_provider_macos:
+    dependency: transitive
+    description:
+      name: path_provider_macos
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  path_provider_platform_interface:
+    dependency: transitive
+    description:
+      name: path_provider_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.1"
+  path_provider_windows:
+    dependency: transitive
+    description:
+      name: path_provider_windows
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.1"
+  pedantic:
+    dependency: transitive
+    description:
+      name: pedantic
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.11.0"
+  petitparser:
+    dependency: transitive
+    description:
+      name: petitparser
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "4.1.0"
+  platform:
+    dependency: transitive
+    description:
+      name: platform
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "3.1.0"
+  plugin_platform_interface:
+    dependency: transitive
+    description:
+      name: plugin_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  process:
+    dependency: transitive
+    description:
+      name: process
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "4.2.1"
+  shared_preferences:
+    dependency: "direct main"
+    description:
+      name: shared_preferences
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.5"
+  shared_preferences_linux:
+    dependency: transitive
+    description:
+      name: shared_preferences_linux
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  shared_preferences_macos:
+    dependency: transitive
+    description:
+      name: shared_preferences_macos
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  shared_preferences_platform_interface:
+    dependency: transitive
+    description:
+      name: shared_preferences_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  shared_preferences_web:
+    dependency: transitive
+    description:
+      name: shared_preferences_web
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  shared_preferences_windows:
+    dependency: transitive
+    description:
+      name: shared_preferences_windows
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  sky_engine:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.99"
+  source_span:
+    dependency: transitive
+    description:
+      name: source_span
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.8.1"
+  stack_trace:
+    dependency: transitive
+    description:
+      name: stack_trace
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.10.0"
+  stream_channel:
+    dependency: transitive
+    description:
+      name: stream_channel
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.1.0"
+  string_scanner:
+    dependency: transitive
+    description:
+      name: string_scanner
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.1.0"
+  term_glyph:
+    dependency: transitive
+    description:
+      name: term_glyph
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.2.0"
+  test_api:
+    dependency: transitive
+    description:
+      name: test_api
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.4.3"
+  typed_data:
+    dependency: transitive
+    description:
+      name: typed_data
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.3.0"
+  url_launcher:
+    dependency: "direct main"
+    description:
+      name: url_launcher
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "6.0.3"
+  url_launcher_linux:
+    dependency: transitive
+    description:
+      name: url_launcher_linux
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  url_launcher_macos:
+    dependency: transitive
+    description:
+      name: url_launcher_macos
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  url_launcher_platform_interface:
+    dependency: transitive
+    description:
+      name: url_launcher_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.2"
+  url_launcher_web:
+    dependency: transitive
+    description:
+      name: url_launcher_web
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  url_launcher_windows:
+    dependency: transitive
+    description:
+      name: url_launcher_windows
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.0"
+  vector_math:
+    dependency: transitive
+    description:
+      name: vector_math
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.1.1"
+  vibration:
+    dependency: "direct main"
+    description:
+      name: vibration
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.7.4-nullsafety.0"
+  vibration_web:
+    dependency: transitive
+    description:
+      name: vibration_web
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.6.3-nullsafety.0"
+  win32:
+    dependency: transitive
+    description:
+      name: win32
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.5"
+  xdg_directories:
+    dependency: transitive
+    description:
+      name: xdg_directories
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.2.0"
+  xml:
+    dependency: transitive
+    description:
+      name: xml
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "5.1.0"
+  yaml:
+    dependency: transitive
+    description:
+      name: yaml
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "3.1.0"
+sdks:
+  dart: ">=2.14.0 <3.0.0"
+  flutter: ">=2.0.4"
Index: example/android/app/src/main/java/me/carda/awesome_notifications_example/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/java/me/carda/awesome_notifications_example/MainActivity.java b/example/android/app/src/main/java/me/carda/awesome_notifications_example/MainActivity.java
new file mode 100644
--- /dev/null	(date 1652867891808)
+++ b/example/android/app/src/main/java/me/carda/awesome_notifications_example/MainActivity.java	(date 1652867891808)
@@ -0,0 +1,6 @@
+package me.carda.awesome_notifications_example;
+
+import io.flutter.embedding.android.FlutterActivity;
+
+public class MainActivity extends FlutterActivity {
+}
Index: example/pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/pubspec.yaml b/example/pubspec.yaml
new file mode 100644
--- /dev/null	(date 1652867891813)
+++ b/example/pubspec.yaml	(date 1652867891813)
@@ -0,0 +1,102 @@
+name: awesome_notifications_example
+version: 1.0.0
+description: Demonstrates how to use the awesome_notifications plugin.
+
+# The following line prevents the package from being accidentally published to
+# pub.dev using `pub publish`. This is preferred for private packages.
+publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+
+environment:
+  sdk: ">=2.12.0 <3.0.0"
+
+dependencies:
+  flutter:
+    sdk: flutter
+
+  awesome_notifications:
+    # When depending on this package from a real application you should use:
+    #   awesome_notifications: ^x.y.z
+    # See https://dart.dev/tools/pub/dependencies#version-constraints
+    # The example app is bundled with the plugin so we use a path dependency on
+    # the parent directory to use the current plugin's version. 
+    path: ../
+
+  # The following adds the Cupertino Icons font to your application.
+  # Use with the CupertinoIcons class for iOS style icons.
+  cupertino_icons: ^1.0.2
+  font_awesome_flutter: ^9.0.0
+  fluttertoast: ^8.0.3
+  http: ^0.13.1
+  path_provider: ^2.0.1
+  shared_preferences: ^2.0.5
+  numberpicker: ^2.0.1
+  giffy_dialog: ^1.8.0
+  vibration: ^1.7.4-nullsafety.0
+
+  device_info: ^2.0.3
+
+  url_launcher: ^6.0.3
+
+  intl: ^0.17.0
+
+  # progressive_image: ^1.0.1
+
+  palette_generator: ^0.3.0
+
+  # flutter_circular_slider: ^2.5.0
+
+  # flutter_statusbarcolor: ^0.2.3
+  # flutter_statusbarcolor_ns: ^0.3.0-nullsafety
+
+  # flutter_native_timezone: ^1.0.10
+
+  firebase_core: ^1.0.1
+  firebase_messaging: ^9.1.2
+
+dev_dependencies:
+  flutter_test:
+    sdk: flutter
+
+  flutter_launcher_icons: ^0.9.0
+
+# For information on the generic Dart part of this file, see the
+# following page: https://dart.dev/tools/pub/pubspec
+
+
+flutter_icons:
+  ios: true
+  android: true
+  image_path_ios: "assets/launcher/icon.png"
+  image_path_android: "assets/launcher/icon.png"
+  adaptive_icon_background: "assets/launcher/background.png"
+  adaptive_icon_foreground: "assets/launcher/foreground.png"
+
+# The following section is specific to Flutter.
+flutter:
+
+  # The following line ensures that the Material Icons font is
+  # included with your application, so that you can use the icons in
+  # the material Icons class.
+  uses-material-design: true
+
+  assets:
+    - assets/images/awesome-notifications-logo-color.png
+    - assets/images/awesome-notifications-logo-black.png
+    - assets/images/awesome-notifications-logo-white.png
+    - assets/images/girl-phonecall.jpg
+    - assets/images/animated-bell.gif
+    - assets/images/animated-clock.gif
+    - assets/images/animated-warning.gif
+    - assets/images/placeholder.gif
+    - assets/images/happy-dogs.jpg
+    - assets/images/balloons-in-sky.jpg
+    - assets/images/android-bg-worker.jpg
+    - assets/images/fireman-hero.jpg
+    - assets/images/delivery.jpeg
+    - assets/images/melted-clock.png
+    - assets/images/rock-disc.jpg
+    - assets/images/classic-disc.jpg
+    - assets/images/dj-disc.jpg
+    - assets/images/80s-disc.jpg
+    - assets/images/remix-disc.jpg
+    - assets/images/old-disc.jpg
Index: example/lib/pages/notification_details_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/pages/notification_details_page.dart b/example/lib/pages/notification_details_page.dart
new file mode 100644
--- /dev/null	(date 1652867891883)
+++ b/example/lib/pages/notification_details_page.dart	(date 1652867891883)
@@ -0,0 +1,299 @@
+import 'dart:math';
+
+import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart' hide DateUtils;
+//import 'package:flutter/material.dart' as Material show DateUtils;
+import 'package:flutter/rendering.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter/widgets.dart';
+
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:awesome_notifications/awesome_notifications.dart';
+
+class NotificationDetailsPage extends StatefulWidget {
+  String get results => receivedNotification.toString();
+  final ReceivedNotification receivedNotification;
+
+  final String title = 'Notification Details';
+
+  NotificationDetailsPage(this.receivedNotification);
+
+  @override
+  _NotificationDetailsPageState createState() =>
+      _NotificationDetailsPageState();
+}
+
+class _NotificationDetailsPageState extends State<NotificationDetailsPage> {
+  String? displayedDate = '';
+
+  @override
+  void initState() {
+    super.initState();
+    displayedDate = AwesomeDateUtils.parseDateToString(
+        AwesomeDateUtils.utcToLocal(AwesomeDateUtils.parseStringToDate(
+            widget.receivedNotification.displayedDate)!),
+        format: 'dd/MM/yyyy HH:mm');
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+    ThemeData themeData = Theme.of(context);
+
+    ImageProvider? largeIcon = widget.receivedNotification.largeIconImage;
+    ImageProvider? bigPicture = widget.receivedNotification.bigPictureImage;
+
+    if (largeIcon == bigPicture) largeIcon = null;
+
+    double maxSize = max(mediaQueryData.size.width, mediaQueryData.size.height);
+
+    return Scaffold(
+      body: AnnotatedRegion<SystemUiOverlayStyle>(
+        value: bigPicture == null ?
+          SystemUiOverlayStyle.dark : SystemUiOverlayStyle.light,
+        child: Stack(
+          children: <Widget>[
+            ListView(
+              padding: EdgeInsets.zero,
+              children: <Widget>[
+                Container(
+                  constraints: BoxConstraints(
+                    minHeight: mediaQueryData.size.height,
+                    minWidth: mediaQueryData.size.width,
+                  ),
+                  child: Column(
+                    children: <Widget>[
+                      Stack(
+                        children: <Widget>[
+                          Column(
+                            mainAxisAlignment: MainAxisAlignment.start,
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: <Widget>[
+                              bigPicture == null
+                                  ? Container(
+                                      height: mediaQueryData.padding.top + 80,
+                                      width: mediaQueryData.size.width,
+                                      decoration: BoxDecoration(
+                                          gradient: LinearGradient(
+                                              begin: Alignment.topCenter,
+                                              end: Alignment.bottomCenter,
+                                              colors: [
+                                                Colors.black12,
+                                                Colors.transparent
+                                              ],
+                                              stops: [
+                                                0.0,
+                                                1.0
+                                              ])),
+                                    )
+                                  : Container(
+                                      height: maxSize * 0.4 +
+                                          mediaQueryData.padding.top,
+                                      width: mediaQueryData.size.width,
+                                      child: ShaderMask(
+                                          shaderCallback: (rect) {
+                                            return LinearGradient(
+                                                begin: Alignment.topCenter,
+                                                end: Alignment.bottomCenter,
+                                                colors: [
+                                                  Colors.black,
+                                                  Colors.black,
+                                                  Colors.transparent
+                                                ],
+                                                stops: [
+                                                  0.0,
+                                                  0.75,
+                                                  0.98
+                                                ]).createShader(Rect.fromLTRB(
+                                                0, 0, rect.width, rect.height));
+                                          },
+                                          blendMode: BlendMode.dstIn,
+                                          child: Padding(
+                                              padding: const EdgeInsets.only(
+                                                  bottom:
+                                                      2.0), // 2 pixels to avoid render error on ShaderMask while the users are sliding the page
+                                              child: FadeInImage(
+                                                placeholder: AssetImage(
+                                                    'assets/images/placeholder.gif'),
+                                                image: widget.receivedNotification
+                                                    .bigPictureImage!,
+                                                width: mediaQueryData.size.width,
+                                                height: maxSize * 0.4 +
+                                                    mediaQueryData.padding.top -
+                                                    2,
+                                                fit: BoxFit.cover,
+                                              )))),
+                            ],
+                          ),
+                          largeIcon == null
+                              ? SizedBox()
+                              : Positioned(
+                                  left: bigPicture == null
+                                      ? mediaQueryData.size.width / 2 - 60
+                                      : 20,
+                                  top: mediaQueryData.padding.top +
+                                      (bigPicture == null ? 30 : maxSize * 0.25),
+                                  child: CircleAvatar(
+                                    radius: maxSize * 0.08,
+                                    backgroundColor: Color(0xffFDCF09),
+                                    child: CircleAvatar(
+                                        radius: maxSize * 0.075,
+                                        backgroundColor: Colors.white,
+                                        child: ClipOval(
+                                          child: FadeInImage(
+                                            placeholder: AssetImage(
+                                                'assets/images/placeholder.gif'),
+                                            image: widget.receivedNotification
+                                                .largeIconImage!,
+                                            width: maxSize * 0.08 * 2,
+                                            height: maxSize * 0.08 * 2,
+                                            fit: BoxFit.cover,
+                                          ),
+                                        ) //widget.receivedNotification.largeIcon.image,
+                                        ),
+                                  )),
+                          Container(
+                            width: mediaQueryData.size.width,
+                            padding: EdgeInsets.only(
+                                left: 20.0,
+                                right: 20.0,
+                                bottom: 10,
+                                top: bigPicture == null
+                                    ? (largeIcon == null ? 120 : 190)
+                                    : maxSize * 0.48),
+                            child: RichText(
+                                text: TextSpan(children: [
+                              TextSpan(
+                                  text: widget
+                                          .receivedNotification.titleWithoutHtml ??
+                                      ((widget.receivedNotification.body?.isEmpty ??
+                                              true)
+                                          ? ''
+                                          : widget.receivedNotification
+                                              .bodyWithoutHtml),
+                                  style: TextStyle(
+                                      fontSize: (widget.receivedNotification.title
+                                                  ?.isEmpty ??
+                                              true)
+                                          ? 22
+                                          : 32,
+                                      height: 1.2,
+                                      color: Colors.black,
+                                      fontWeight: FontWeight.bold)),
+                              TextSpan(
+                                text: '\n$displayedDate',
+                                style: themeData.textTheme.subtitle2
+                                    ?.copyWith(color: Colors.black26),
+                              )
+                            ])),
+                          )
+                        ],
+                      ),
+                      (widget.receivedNotification.title?.isEmpty ?? true)
+                          ? SizedBox.shrink()
+                          : (widget.receivedNotification.body?.isEmpty ?? true)
+                              ? SizedBox.shrink()
+                              : Container(
+                                  width: mediaQueryData.size.width,
+                                  padding: EdgeInsets.only(
+                                      top: 10, left: 20, right: 20, bottom: 25),
+                                  child: Text(
+                                      widget.receivedNotification.bodyWithoutHtml ??
+                                          '',
+                                      style: themeData.textTheme.bodyText2)),
+                    ],
+                  ),
+                ),
+                Container(
+                  constraints: BoxConstraints(
+                    minWidth: mediaQueryData.size.width,
+                  ),
+                  child: Column(
+                    children: <Widget>[
+                      Container(
+                          width: mediaQueryData.size.width,
+                          color: themeData.dividerColor,
+                          padding: EdgeInsets.only(
+                              left: 10, right: 10, top: 30, bottom: 30),
+                          child: Column(
+                            mainAxisAlignment: MainAxisAlignment.start,
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: <Widget>[
+                              Text(
+                                'ReceivedNotification details:',
+                                style: themeData.textTheme.subtitle1
+                                    ?.copyWith(color: themeData.hintColor),
+                              ),
+                              SizedBox(height: 20),
+                              Text(
+                                widget.results,
+                                style: themeData.textTheme.bodyText2
+                                    ?.copyWith(color: themeData.hintColor),
+                              ),
+                            ],
+                          )),
+                    ],
+                  ),
+                )
+              ],
+            ),
+            Theme.of(context).platform == TargetPlatform.android
+                ? SizedBox()
+                : Positioned(
+                    top: 0,
+                    left: 0,
+                    child: Container(
+                      width: mediaQueryData.size.width,
+                      height: mediaQueryData.padding.top + 6,
+                      decoration: BoxDecoration(
+                          gradient: LinearGradient(
+                            begin: Alignment.topCenter,
+                            end: Alignment.bottomCenter,
+                            colors: [
+                              Colors.black54,//Colors.white54,//
+                              Colors.black38,//Colors.white38,//
+                              Colors.black12,//Colors.white12,//
+                              Colors.transparent
+                            ],
+                            stops: [
+                              0.2,
+                              0.45,
+                              0.75,
+                              0.9
+                            ])),
+                    )),
+            Positioned(
+              top: mediaQueryData.padding.top + 10,
+              left: 10,
+              child: Container(
+                height: 40,
+                padding: EdgeInsets.zero,
+                alignment: Alignment.center,
+                decoration: BoxDecoration(
+                  color: Colors.white,
+                  borderRadius: BorderRadius.only(
+                      topLeft: Radius.circular(10),
+                      topRight: Radius.circular(10),
+                      bottomLeft: Radius.circular(10),
+                      bottomRight: Radius.circular(10)),
+                  boxShadow: [
+                    BoxShadow(
+                      color: Colors.black26,
+                      spreadRadius: 5,
+                      blurRadius: 7,
+                      offset: Offset(0, 3), // changes position of shadow
+                    ),
+                  ],
+                ),
+                child: IconButton(
+                  alignment: Alignment.center,
+                  icon: Icon(FontAwesomeIcons.chevronLeft),
+                  onPressed: () => Navigator.pop(context),
+                ),
+              ),
+            )
+        ],
+      ),
+    ));
+  }
+}
Index: example/android/app/src/main/res/drawable/res_ic_prev_disabled.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_prev_disabled.xml b/example/android/app/src/main/res/drawable/res_ic_prev_disabled.xml
new file mode 100644
--- /dev/null	(date 1652867891890)
+++ b/example/android/app/src/main/res/drawable/res_ic_prev_disabled.xml	(date 1652867891890)
@@ -0,0 +1,4 @@
+<vector android:alpha="0.25" android:height="36dp" android:viewportHeight="24"
+    android:viewportWidth="24" android:width="36dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#ffffff" android:pathData="M6,6h2v12L6,18zM9.5,12l8.5,6L18,6z"/>
+</vector>
Index: example/ios/Podfile.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Podfile.lock b/example/ios/Podfile.lock
new file mode 100644
--- /dev/null	(date 1652867892500)
+++ b/example/ios/Podfile.lock	(date 1652867892500)
@@ -0,0 +1,159 @@
+PODS:
+  - awesome_notifications (0.0.3):
+    - Flutter
+  - device_info (0.0.1):
+    - Flutter
+  - Firebase/CoreOnly (7.11.0):
+    - FirebaseCore (= 7.11.0)
+  - Firebase/Messaging (7.11.0):
+    - Firebase/CoreOnly
+    - FirebaseMessaging (~> 7.11.0)
+  - firebase_core (1.1.0):
+    - Firebase/CoreOnly (= 7.11.0)
+    - Flutter
+  - firebase_messaging (9.1.3):
+    - Firebase/Messaging (= 7.11.0)
+    - firebase_core
+    - Flutter
+  - FirebaseCore (7.11.0):
+    - FirebaseCoreDiagnostics (~> 7.4)
+    - GoogleUtilities/Environment (~> 7.0)
+    - GoogleUtilities/Logger (~> 7.0)
+  - FirebaseCoreDiagnostics (7.11.0):
+    - GoogleDataTransport (~> 8.4)
+    - GoogleUtilities/Environment (~> 7.0)
+    - GoogleUtilities/Logger (~> 7.0)
+    - nanopb (~> 2.30908.0)
+  - FirebaseInstallations (7.11.0):
+    - FirebaseCore (~> 7.0)
+    - GoogleUtilities/Environment (~> 7.0)
+    - GoogleUtilities/UserDefaults (~> 7.0)
+    - PromisesObjC (~> 1.2)
+  - FirebaseInstanceID (7.11.0):
+    - FirebaseCore (~> 7.0)
+    - FirebaseInstallations (~> 7.0)
+    - GoogleUtilities/Environment (~> 7.0)
+    - GoogleUtilities/UserDefaults (~> 7.0)
+  - FirebaseMessaging (7.11.0):
+    - FirebaseCore (~> 7.0)
+    - FirebaseInstallations (~> 7.0)
+    - FirebaseInstanceID (~> 7.0)
+    - GoogleUtilities/AppDelegateSwizzler (~> 7.0)
+    - GoogleUtilities/Environment (~> 7.0)
+    - GoogleUtilities/Reachability (~> 7.0)
+    - GoogleUtilities/UserDefaults (~> 7.0)
+  - Flutter (1.0.0)
+  - fluttertoast (0.0.2):
+    - Flutter
+    - Toast
+  - GoogleDataTransport (8.4.0):
+    - GoogleUtilities/Environment (~> 7.2)
+    - nanopb (~> 2.30908.0)
+    - PromisesObjC (~> 1.2)
+  - GoogleUtilities/AppDelegateSwizzler (7.4.0):
+    - GoogleUtilities/Environment
+    - GoogleUtilities/Logger
+    - GoogleUtilities/Network
+  - GoogleUtilities/Environment (7.4.0):
+    - PromisesObjC (~> 1.2)
+  - GoogleUtilities/Logger (7.4.0):
+    - GoogleUtilities/Environment
+  - GoogleUtilities/Network (7.4.0):
+    - GoogleUtilities/Logger
+    - "GoogleUtilities/NSData+zlib"
+    - GoogleUtilities/Reachability
+  - "GoogleUtilities/NSData+zlib (7.4.0)"
+  - GoogleUtilities/Reachability (7.4.0):
+    - GoogleUtilities/Logger
+  - GoogleUtilities/UserDefaults (7.4.0):
+    - GoogleUtilities/Logger
+  - nanopb (2.30908.0):
+    - nanopb/decode (= 2.30908.0)
+    - nanopb/encode (= 2.30908.0)
+  - nanopb/decode (2.30908.0)
+  - nanopb/encode (2.30908.0)
+  - path_provider (0.0.1):
+    - Flutter
+  - PromisesObjC (1.2.12)
+  - shared_preferences (0.0.1):
+    - Flutter
+  - Toast (4.0.0)
+  - url_launcher (0.0.1):
+    - Flutter
+  - vibration (1.7.4-nullsafety.0):
+    - Flutter
+
+DEPENDENCIES:
+  - awesome_notifications (from `.symlinks/plugins/awesome_notifications/ios`)
+  - device_info (from `.symlinks/plugins/device_info/ios`)
+  - firebase_core (from `.symlinks/plugins/firebase_core/ios`)
+  - firebase_messaging (from `.symlinks/plugins/firebase_messaging/ios`)
+  - Flutter (from `Flutter`)
+  - fluttertoast (from `.symlinks/plugins/fluttertoast/ios`)
+  - path_provider (from `.symlinks/plugins/path_provider/ios`)
+  - shared_preferences (from `.symlinks/plugins/shared_preferences/ios`)
+  - url_launcher (from `.symlinks/plugins/url_launcher/ios`)
+  - vibration (from `.symlinks/plugins/vibration/ios`)
+
+SPEC REPOS:
+  trunk:
+    - Firebase
+    - FirebaseCore
+    - FirebaseCoreDiagnostics
+    - FirebaseInstallations
+    - FirebaseInstanceID
+    - FirebaseMessaging
+    - GoogleDataTransport
+    - GoogleUtilities
+    - nanopb
+    - PromisesObjC
+    - Toast
+
+EXTERNAL SOURCES:
+  awesome_notifications:
+    :path: ".symlinks/plugins/awesome_notifications/ios"
+  device_info:
+    :path: ".symlinks/plugins/device_info/ios"
+  firebase_core:
+    :path: ".symlinks/plugins/firebase_core/ios"
+  firebase_messaging:
+    :path: ".symlinks/plugins/firebase_messaging/ios"
+  Flutter:
+    :path: Flutter
+  fluttertoast:
+    :path: ".symlinks/plugins/fluttertoast/ios"
+  path_provider:
+    :path: ".symlinks/plugins/path_provider/ios"
+  shared_preferences:
+    :path: ".symlinks/plugins/shared_preferences/ios"
+  url_launcher:
+    :path: ".symlinks/plugins/url_launcher/ios"
+  vibration:
+    :path: ".symlinks/plugins/vibration/ios"
+
+SPEC CHECKSUMS:
+  awesome_notifications: 04530aafec8dac4635244ed4b4072f4aea6cc938
+  device_info: d7d233b645a32c40dfdc212de5cf646ca482f175
+  Firebase: c121feb35e4126c0b355e3313fa9b487d47319fd
+  firebase_core: 84dcd80ac6d29c3d1039071b7306ee99688eb9c7
+  firebase_messaging: 7aecb08eada5e5cde85b10875141706a8d18b818
+  FirebaseCore: 907447d8917a4d3eb0cce2829c5a0ad21d90b432
+  FirebaseCoreDiagnostics: 68ad972f99206cef818230f3f3179d52ccfb7f8c
+  FirebaseInstallations: a58d4f72ec5861840b84df489f2668d970df558a
+  FirebaseInstanceID: ad5135045a498d7775903efd39762d2cdfa1be27
+  FirebaseMessaging: 163435fb6db065e3b6228f1e577b10ed2cc506d2
+  Flutter: 50d75fe2f02b26cc09d224853bb45737f8b3214a
+  fluttertoast: 6122fa75143e992b1d3470f61000f591a798cc58
+  GoogleDataTransport: cd9db2180fcecd8da1b561aea31e3e56cf834aa7
+  GoogleUtilities: 284cddc7fffc14ae1907efb6f78ab95c1fccaedc
+  nanopb: a0ba3315591a9ae0a16a309ee504766e90db0c96
+  path_provider: abfe2b5c733d04e238b0d8691db0cfd63a27a93c
+  PromisesObjC: 3113f7f76903778cf4a0586bd1ab89329a0b7b97
+  shared_preferences: af6bfa751691cdc24be3045c43ec037377ada40d
+  Toast: 91b396c56ee72a5790816f40d3a94dd357abc196
+  url_launcher: 6fef411d543ceb26efce54b05a0a40bfd74cbbef
+  vibration: 1ec279c4a1a7a646627b54039d812334b3f1114a
+
+PODFILE CHECKSUM: aafe91acc616949ddb318b77800a7f51bffa2a4c
+
+COCOAPODS: 1.11.0
Index: example/android/app/src/main/res/drawable/res_ic_prev.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_prev.xml b/example/android/app/src/main/res/drawable/res_ic_prev.xml
new file mode 100644
--- /dev/null	(date 1652867891896)
+++ b/example/android/app/src/main/res/drawable/res_ic_prev.xml	(date 1652867891896)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="36dp"
+    android:height="36dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#ffffff"
+      android:pathData="M6,6h2v12L6,18zM9.5,12l8.5,6L18,6z"/>
+</vector>
Index: example/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/example/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
--- /dev/null	(date 1652867892504)
+++ b/example/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	(date 1652867892504)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
Index: .idea/libraries/Dart_SDK.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"libraryTable\">\n  <library name=\"Dart SDK\">\n    <CLASSES>\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/async\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/cli\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/collection\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/convert\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/core\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/developer\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/ffi\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/html\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/indexed_db\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/io\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/isolate\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/js\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/js_util\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/math\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/mirrors\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/svg\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/typed_data\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/web_audio\" />\n      <root url=\"file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/web_gl\" />\n    </CLASSES>\n    <JAVADOC />\n    <SOURCES />\n  </library>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Dart_SDK.xml b/.idea/libraries/Dart_SDK.xml
--- a/.idea/libraries/Dart_SDK.xml	(revision 844b008b8507b86109424c4f052ba9b89ba01deb)
+++ b/.idea/libraries/Dart_SDK.xml	(date 1652856692112)
@@ -1,25 +1,25 @@
 <component name="libraryTable">
   <library name="Dart SDK">
     <CLASSES>
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/async" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/cli" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/collection" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/convert" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/core" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/developer" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/ffi" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/html" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/indexed_db" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/io" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/isolate" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/js" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/js_util" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/math" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/mirrors" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/svg" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/typed_data" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/web_audio" />
-      <root url="file://$USER_HOME$/Flutter/flutter/bin/cache/dart-sdk/lib/web_gl" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/async" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/cli" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/collection" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/convert" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/core" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/developer" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/ffi" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/html" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/indexed_db" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/io" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/isolate" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/js" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/js_util" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/math" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/mirrors" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/svg" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/typed_data" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/web_audio" />
+      <root url="file://$USER_HOME$/development/flutter/bin/cache/dart-sdk/lib/web_gl" />
     </CLASSES>
     <JAVADOC />
     <SOURCES />
Index: android/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CMakeSettings\">\n    <configurations>\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\n    </configurations>\n  </component>\n  <component name=\"NullableNotNullManager\">\n    <option name=\"myDefaultNullable\" value=\"org.jetbrains.annotations.Nullable\" />\n    <option name=\"myDefaultNotNull\" value=\"androidx.annotation.RecentlyNonNull\" />\n    <option name=\"myNullables\">\n      <value>\n        <list size=\"14\">\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.Nullable\" />\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.Nullable\" />\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableDecl\" />\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableType\" />\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.Nullable\" />\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.Nullable\" />\n          <item index=\"13\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.Nullable\" />\n        </list>\n      </value>\n    </option>\n    <option name=\"myNotNulls\">\n      <value>\n        <list size=\"13\">\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.NonNull\" />\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.NonNull\" />\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullDecl\" />\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullType\" />\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.NonNull\" />\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.NonNull\" />\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.NonNull\" />\n        </list>\n      </value>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/.idea/misc.xml b/android/.idea/misc.xml
--- a/android/.idea/misc.xml	(revision 844b008b8507b86109424c4f052ba9b89ba01deb)
+++ b/android/.idea/misc.xml	(date 1652857018411)
@@ -5,6 +5,13 @@
       <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
     </configurations>
   </component>
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="src/main/res/layout/activity_callkit_incoming.xml" value="0.31567028985507245" />
+      </map>
+    </option>
+  </component>
   <component name="NullableNotNullManager">
     <option name="myDefaultNullable" value="org.jetbrains.annotations.Nullable" />
     <option name="myDefaultNotNull" value="androidx.annotation.RecentlyNonNull" />
Index: example/android/app/src/main/res/drawable/res_ic_play_disabled.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_play_disabled.xml b/example/android/app/src/main/res/drawable/res_ic_play_disabled.xml
new file mode 100644
--- /dev/null	(date 1652867891903)
+++ b/example/android/app/src/main/res/drawable/res_ic_play_disabled.xml	(date 1652867891903)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:alpha="0.25"
+    android:width="36dp"
+    android:height="36dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#ffffff"
+      android:pathData="M8,5v14l11,-7z"/>
+</vector>
Index: example/android/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/.gitignore b/example/android/.gitignore
new file mode 100644
--- /dev/null	(date 1652867891853)
+++ b/example/android/.gitignore	(date 1652867891853)
@@ -0,0 +1,7 @@
+gradle-wrapper.jar
+/.gradle
+/captures/
+/gradlew
+/gradlew.bat
+/local.properties
+GeneratedPluginRegistrant.java
Index: example/.metadata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/.metadata b/example/.metadata
new file mode 100644
--- /dev/null	(date 1652867892419)
+++ b/example/.metadata	(date 1652867892419)
@@ -0,0 +1,10 @@
+# This file tracks properties of this Flutter project.
+# Used by Flutter tool to assess capabilities and perform upgrades etc.
+#
+# This file should be version controlled and should not be manually edited.
+
+version:
+  revision: 8af6b2f038c1172e61d418869363a28dffec3cb4
+  channel: stable
+
+project_type: app
Index: example/lib/common_widgets/text_note.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/text_note.dart b/example/lib/common_widgets/text_note.dart
new file mode 100644
--- /dev/null	(date 1652867891860)
+++ b/example/lib/common_widgets/text_note.dart	(date 1652867891860)
@@ -0,0 +1,47 @@
+import 'package:flutter/material.dart';
+
+class TextNote extends StatelessWidget {
+
+  final String text;
+
+  const TextNote(this.text, {Key? key}) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: EdgeInsets.only(top: 20),
+      child: Column(
+        children: <Widget>[
+          Row(
+              children: <Widget>[
+                Expanded(
+                    child: Text('Note:',
+                        textAlign: TextAlign.left,
+                        style: TextStyle(
+                            fontWeight: FontWeight.w600,
+                            fontSize: 14 ,
+                            fontStyle: FontStyle.italic
+                        )
+                    )
+                )
+              ]
+          ),
+          SizedBox(height: 10),
+          Row(
+              children: <Widget>[
+                Expanded(
+                    child: Text(text,
+                        textAlign: TextAlign.left,
+                        style: TextStyle(
+                            fontSize: 14
+                        )
+                    )
+                )
+              ]
+          ),
+          SizedBox(height: 30),
+        ],
+      ),
+    );
+  }
+}
Index: example/android/awesome_notifications_core/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/awesome_notifications_core/src/main/AndroidManifest.xml b/example/android/awesome_notifications_core/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1652867891866)
+++ b/example/android/awesome_notifications_core/src/main/AndroidManifest.xml	(date 1652867891866)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="me.carda.awesome_notifications_core">
+
+</manifest>
\ No newline at end of file
Index: example/android/app/src/debug/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/debug/AndroidManifest.xml b/example/android/app/src/debug/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1652867891876)
+++ b/example/android/app/src/debug/AndroidManifest.xml	(date 1652867891876)
@@ -0,0 +1,13 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="me.carda.awesome_notifications_example">
+    <!-- Flutter needs it to communicate with the running application
+         to allow setting breakpoints, to provide hot reload, etc.
+    -->
+    <uses-permission android:name="android.permission.INTERNET"/>
+
+    <uses-permission android:name="android.permission.WAKE_LOCK"/>
+    <uses-permission android:name="android.permission.ACCESS_NOTIFICATION_POLICY"/>
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
+    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM"/>
+    <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT"/>
+</manifest>
Index: example/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme b/example/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme
new file mode 100644
--- /dev/null	(date 1652867892608)
+++ b/example/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme	(date 1652867892608)
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1020"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+               BuildableName = "Runner.app"
+               BlueprintName = "Runner"
+               ReferencedContainer = "container:Runner.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Profile"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
Index: example/lib/pages/home_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/pages/home_page.dart b/example/lib/pages/home_page.dart
new file mode 100644
--- /dev/null	(date 1652867891925)
+++ b/example/lib/pages/home_page.dart	(date 1652867891925)
@@ -0,0 +1,1167 @@
+import 'dart:io';
+import 'dart:math';
+
+import 'package:awesome_notifications/android_foreground_service.dart';
+import 'package:awesome_notifications_example/common_widgets/led_light.dart';
+import 'package:awesome_notifications_example/common_widgets/seconds_slider.dart';
+import 'package:firebase_messaging/firebase_messaging.dart';
+import 'package:flutter/material.dart' hide DateUtils;
+//import 'package:flutter/material.dart' as Material show DateUtils;
+import 'package:flutter/services.dart';
+import 'package:fluttertoast/fluttertoast.dart';
+import 'package:awesome_notifications/awesome_notifications.dart';
+
+import 'package:awesome_notifications_example/main.dart';
+import 'package:awesome_notifications_example/routes.dart';
+import 'package:awesome_notifications_example/utils/media_player_central.dart';
+import 'package:awesome_notifications_example/utils/notification_util.dart';
+
+import 'package:awesome_notifications_example/common_widgets/check_button.dart';
+import 'package:awesome_notifications_example/common_widgets/remarkble_text.dart';
+import 'package:awesome_notifications_example/common_widgets/service_control_panel.dart';
+import 'package:awesome_notifications_example/common_widgets/simple_button.dart';
+import 'package:awesome_notifications_example/common_widgets/text_divisor.dart';
+import 'package:awesome_notifications_example/common_widgets/text_note.dart';
+import 'package:numberpicker/numberpicker.dart';
+import 'package:vibration/vibration.dart';
+
+class HomePage extends StatefulWidget {
+  @override
+  _HomePageState createState() =>
+      _HomePageState();
+}
+
+class _HomePageState extends State<HomePage> {
+  String _firebaseAppToken = '';
+  //String _oneSignalToken = '';
+
+  bool delayLEDTests = false;
+  double _secondsToWakeUp = 5;
+  double _secondsToCallCategory = 5;
+
+  bool globalNotificationsAllowed = false;
+  bool schedulesFullControl = false;
+  bool isCriticalAlertsEnabled = false;
+  bool isPreciseAlarmEnabled = false;
+  bool isOverrideDnDEnabled = false;
+
+  Map<NotificationPermission, bool> scheduleChannelPermissions = {};
+  Map<NotificationPermission, bool> dangerousPermissionsStatus = {};
+
+  List<NotificationPermission> channelPermissions = [
+    NotificationPermission.Alert,
+    NotificationPermission.Sound,
+    NotificationPermission.Badge,
+    NotificationPermission.Light,
+    NotificationPermission.Vibration,
+    NotificationPermission.CriticalAlert,
+    NotificationPermission.FullScreenIntent
+  ];
+
+  List<NotificationPermission> dangerousPermissions = [
+    NotificationPermission.CriticalAlert,
+    NotificationPermission.OverrideDnD,
+    NotificationPermission.PreciseAlarms,
+  ];
+
+  String packageName = 'me.carda.awesome_notifications_example';
+
+  Future<DateTime?> pickScheduleDate(BuildContext context,
+      {required bool isUtc}) async {
+    TimeOfDay? timeOfDay;
+    DateTime now = isUtc ? DateTime.now().toUtc() : DateTime.now();
+    DateTime? newDate = await showDatePicker(
+        context: context,
+        initialDate: now,
+        firstDate: now,
+        lastDate: now.add(Duration(days: 365)));
+
+    if (newDate != null) {
+      timeOfDay = await showTimePicker(
+        context: context,
+        initialTime: TimeOfDay.fromDateTime(now.add(Duration(minutes: 1))),
+      );
+
+      if (timeOfDay != null) {
+        return isUtc
+            ? DateTime.utc(newDate.year, newDate.month, newDate.day,
+                timeOfDay.hour, timeOfDay.minute)
+            : DateTime(newDate.year, newDate.month, newDate.day, timeOfDay.hour,
+                timeOfDay.minute);
+      }
+    }
+    return null;
+  }
+
+  int _pickAmount = 50;
+  Future<int?> pickBadgeCounter(BuildContext context, int initialAmount) async {
+    setState(() => _pickAmount = initialAmount);
+
+    // show the dialog
+    return showDialog<int?>(
+      context: context,
+      builder: (BuildContext context) =>
+        StatefulBuilder(
+          builder: (BuildContext context, StateSetter setModalState) =>
+            AlertDialog(
+              title: Text("Choose the new badge amount"),
+              content: NumberPicker(
+                value: _pickAmount,
+                minValue: 0,
+                maxValue: 9999,
+                onChanged: (newValue) =>
+                  setModalState(() => _pickAmount = newValue)
+              ),
+              actions: [
+                TextButton(
+                  child: Text("Cancel"),
+                  onPressed: () {
+                    Navigator.of(context).pop(null);
+                  },
+                ),
+                TextButton(
+                  child: Text("OK"),
+                  onPressed: () {
+                    Navigator.of(context).pop(_pickAmount);
+                  },
+                ),
+              ],
+            )
+        )
+    );
+  }
+
+  @override
+  void initState() {
+    super.initState();
+
+    for(NotificationPermission permission in channelPermissions){
+      scheduleChannelPermissions[permission] = false;
+    }
+
+    for(NotificationPermission permission in dangerousPermissions){
+      dangerousPermissionsStatus[permission] = false;
+    }
+
+    // Uncomment those lines after activate google services inside example/android/build.gradle
+    // initializeFirebaseService();
+
+    // If you pretend to use the firebase service, you need to initialize it
+    // getting a valid token
+    // initializeFirebaseService();
+
+    AwesomeNotifications().createdStream.listen((receivedNotification) {
+      String? createdSourceText =
+          AwesomeAssertUtils.toSimpleEnumString(receivedNotification.createdSource);
+      Fluttertoast.showToast(msg: '$createdSourceText notification created');
+    });
+
+    AwesomeNotifications().displayedStream.listen((receivedNotification) {
+      String? createdSourceText =
+          AwesomeAssertUtils.toSimpleEnumString(receivedNotification.createdSource);
+      Fluttertoast.showToast(msg: '$createdSourceText notification displayed');
+    });
+
+    AwesomeNotifications().dismissedStream.listen((receivedAction) {
+      String? dismissedSourceText = AwesomeAssertUtils.toSimpleEnumString(
+          receivedAction.dismissedLifeCycle);
+      Fluttertoast.showToast(
+          msg: 'Notification dismissed on $dismissedSourceText');
+    });
+
+    AwesomeNotifications().actionStream.listen((receivedAction) {
+
+      if(receivedAction.channelKey == 'call_channel'){
+        switch (receivedAction.buttonKeyPressed) {
+
+          case 'REJECT':
+            AndroidForegroundService.stopForeground();
+            break;
+
+          case 'ACCEPT':
+            loadSingletonPage(targetPage: PAGE_PHONE_CALL, receivedAction: receivedAction);
+            AndroidForegroundService.stopForeground();
+            break;
+
+          default:
+            loadSingletonPage(targetPage: PAGE_PHONE_CALL, receivedAction: receivedAction);
+            break;
+        }
+        return;
+      }
+
+      if (receivedAction.channelKey == 'alarm_channel') {
+        AndroidForegroundService.stopForeground();
+        return;
+      }
+
+      if (!AwesomeStringUtils.isNullOrEmpty(receivedAction.buttonKeyInput)) {
+        processInputTextReceived(receivedAction);
+      } else if (!AwesomeStringUtils.isNullOrEmpty(
+              receivedAction.buttonKeyPressed) &&
+          receivedAction.buttonKeyPressed.startsWith('MEDIA_')) {
+        processMediaControls(receivedAction);
+      } else {
+        processDefaultActionReceived(receivedAction);
+      }
+    });
+
+    refreshPermissionsIcons().then((_) =>
+      NotificationUtils.requestBasicPermissionToSendNotifications(context).then((allowed){
+        if(allowed != globalNotificationsAllowed)
+          refreshPermissionsIcons();
+      })
+    );
+  }
+
+  void loadSingletonPage({required String targetPage, required ReceivedAction receivedAction}){
+    // Avoid to open the notification details page over another details page already opened
+    Navigator.pushNamedAndRemoveUntil(context, targetPage,
+            (route) => (route.settings.name != targetPage) || route.isFirst,
+        arguments: receivedAction);
+  }
+
+  Future<void> refreshPermissionsIcons() async {
+
+    AwesomeNotifications().isNotificationAllowed().then((isAllowed) async {
+      setState(() {
+        globalNotificationsAllowed = isAllowed;
+      });
+    });
+    refreshScheduleChannelPermissions();
+    refreshDangerousChannelPermissions();
+  }
+
+  void refreshScheduleChannelPermissions(){
+    AwesomeNotifications().checkPermissionList(
+        channelKey: 'scheduled',
+        permissions: channelPermissions
+    ).then((List<NotificationPermission> permissionsAllowed) =>
+        setState(() {
+          schedulesFullControl = true;
+          for(NotificationPermission permission in channelPermissions){
+            scheduleChannelPermissions[permission] = permissionsAllowed.contains(permission);
+            schedulesFullControl = schedulesFullControl && scheduleChannelPermissions[permission]!;
+          }
+        })
+    );
+  }
+
+  void refreshDangerousChannelPermissions(){
+    AwesomeNotifications().checkPermissionList(
+        permissions: dangerousPermissions
+    ).then((List<NotificationPermission> permissionsAllowed) =>
+        setState(() {
+          for(NotificationPermission permission in dangerousPermissions){
+            dangerousPermissionsStatus[permission] = permissionsAllowed.contains(permission);
+          }
+          isCriticalAlertsEnabled = dangerousPermissionsStatus[NotificationPermission.CriticalAlert]!;
+          isPreciseAlarmEnabled = dangerousPermissionsStatus[NotificationPermission.PreciseAlarms]!;
+          isOverrideDnDEnabled = dangerousPermissionsStatus[NotificationPermission.OverrideDnD]!;
+        })
+    );
+  }
+
+  void processDefaultActionReceived(ReceivedAction receivedAction) {
+    Fluttertoast.showToast(msg: 'Action received');
+
+    String targetPage;
+
+    // Avoid to reopen the media page if is already opened
+    if (receivedAction.channelKey == 'media_player') {
+      targetPage = PAGE_MEDIA_DETAILS;
+      if (Navigator.of(context).isCurrent(PAGE_MEDIA_DETAILS)) return;
+    } else {
+      targetPage = PAGE_NOTIFICATION_DETAILS;
+    }
+
+    loadSingletonPage(targetPage: targetPage, receivedAction: receivedAction);
+  }
+
+  void processInputTextReceived(ReceivedAction receivedAction) {
+    if(receivedAction.channelKey == 'chats')
+      NotificationUtils.simulateSendResponseChatConversation(
+          msg: receivedAction.buttonKeyInput,
+          groupKey: 'jhonny_group'
+      );
+
+    sleep(Duration(seconds: 2)); // To give time to show
+    Fluttertoast.showToast(
+        msg: 'Msg: ' + receivedAction.buttonKeyInput,
+        backgroundColor: App.mainColor,
+        textColor: Colors.white);
+  }
+
+  void processMediaControls(actionReceived) {
+    switch (actionReceived.buttonKeyPressed) {
+
+      case 'MEDIA_CLOSE':
+        MediaPlayerCentral.stop();
+        break;
+
+      case 'MEDIA_PLAY':
+      case 'MEDIA_PAUSE':
+        MediaPlayerCentral.playPause();
+        break;
+
+      case 'MEDIA_PREV':
+        MediaPlayerCentral.previousMedia();
+        break;
+
+      case 'MEDIA_NEXT':
+        MediaPlayerCentral.nextMedia();
+        break;
+
+      default:
+        break;
+    }
+
+    Fluttertoast.showToast(
+        msg: 'Media: ' +
+            actionReceived.buttonKeyPressed.replaceFirst('MEDIA_', ''),
+        backgroundColor: App.mainColor,
+        textColor: Colors.white);
+  }
+
+  @override
+  void dispose() {
+    AwesomeNotifications().createdSink.close();
+    AwesomeNotifications().displayedSink.close();
+    AwesomeNotifications().actionSink.close();
+    super.dispose();
+  }
+
+  // Platform messages are asynchronous, so we initialize in an async method.
+  Future<void> initializeFirebaseService() async {
+    FirebaseMessaging messaging = FirebaseMessaging.instance;
+
+    String firebaseAppToken = await messaging.getToken(
+          // https://stackoverflow.com/questions/54996206/firebase-cloud-messaging-where-to-find-public-vapid-key
+          vapidKey: '',
+        ) ??
+        '';
+
+    if (AwesomeStringUtils.isNullOrEmpty(firebaseAppToken,
+        considerWhiteSpaceAsEmpty: true)) return;
+
+    if (!mounted) {
+      _firebaseAppToken = firebaseAppToken;
+    } else {
+      setState(() {
+        _firebaseAppToken = firebaseAppToken;
+      });
+    }
+
+    print('Firebase token: $firebaseAppToken');
+
+    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
+      print('Got a message whilst in the foreground!');
+      print('Message data: ${message.data}');
+
+      if (
+          // This step (if condition) is only necessary if you pretend to use the
+          // test page inside console.firebase.google.com
+          !AwesomeStringUtils.isNullOrEmpty(message.notification?.title,
+                  considerWhiteSpaceAsEmpty: true) ||
+              !AwesomeStringUtils.isNullOrEmpty(message.notification?.body,
+                  considerWhiteSpaceAsEmpty: true)) {
+        print('Message also contained a notification: ${message.notification}');
+
+        String? imageUrl;
+        imageUrl ??= message.notification!.android?.imageUrl;
+        imageUrl ??= message.notification!.apple?.imageUrl;
+
+        // https://pub.dev/packages/awesome_notifications#notification-types-values-and-defaults
+        Map<String, dynamic> notificationAdapter = {
+          NOTIFICATION_CONTENT: {
+            NOTIFICATION_ID: Random().nextInt(2147483647),
+            NOTIFICATION_CHANNEL_KEY: 'basic_channel',
+            NOTIFICATION_TITLE: message.notification!.title,
+            NOTIFICATION_BODY: message.notification!.body,
+            NOTIFICATION_LAYOUT:
+                AwesomeStringUtils.isNullOrEmpty(imageUrl) ? 'Default' : 'BigPicture',
+            NOTIFICATION_BIG_PICTURE: imageUrl
+          }
+        };
+
+        AwesomeNotifications()
+            .createNotificationFromJsonData(notificationAdapter);
+      } else {
+        AwesomeNotifications().createNotificationFromJsonData(message.data);
+      }
+    });
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    MediaQueryData mediaQuery = MediaQuery.of(context);
+    ThemeData themeData = Theme.of(context);
+
+    return Scaffold(
+        appBar: AppBar(
+          centerTitle: false,
+          brightness: Brightness.light,
+          title: Image.asset(
+              'assets/images/awesome-notifications-logo-color.png',
+              width: mediaQuery.size.width *
+                  0.6), //Text('Local Notification Example App', style: TextStyle(fontSize: 20)),
+          elevation: 10,
+        ),
+        body: ListView(
+          padding: EdgeInsets.symmetric(horizontal: 15, vertical: 8),
+          children: <Widget>[
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Package name'),
+            RemarkableText(text: packageName, color: themeData.primaryColor),
+            SimpleButton('Copy package name', onPressed: () {
+              Clipboard.setData(ClipboardData(text: packageName));
+            }),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Push Service Status'),
+            Row(
+              mainAxisAlignment: MainAxisAlignment.spaceAround,
+              children: <Widget>[
+                ServiceControlPanel('Firebase',
+                    !AwesomeStringUtils.isNullOrEmpty(_firebaseAppToken), themeData,
+                    onPressed: () => Navigator.pushNamed(
+                        context, PAGE_FIREBASE_TESTS,
+                        arguments: _firebaseAppToken)),
+              ],
+            ),
+            TextNote(
+                'Is not necessary to use Firebase (or other) services to use local notifications. But all they can be used simultaneously.'),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Global Permission to send Notifications'),
+            PermissionIndicator(name: null, allowed: globalNotificationsAllowed),
+            TextNote(
+                'To send local and push notifications, it is necessary to obtain the user\'s consent. Keep in mind that he user consent can be revoked at any time.\n\n'
+                '* Android: notifications are enabled by default and are considered not dangerous.\n'
+                '* iOS: notifications are not enabled by default and you must explicitly request it to the user.'),
+            SimpleButton('Request permission',
+                enabled: !globalNotificationsAllowed,
+                onPressed: (){
+                  NotificationUtils.requestBasicPermissionToSendNotifications(context).then(
+                    (isAllowed) =>
+                        setState(() {
+                          globalNotificationsAllowed = isAllowed;
+                          refreshPermissionsIcons();
+                        })
+                  );
+                }
+            ),
+            SimpleButton('Open notifications permission page',
+                onPressed: () => NotificationUtils.redirectToPermissionsPage().then(
+                        (isAllowed) =>
+                        setState(() {
+                          globalNotificationsAllowed = isAllowed;
+                          refreshPermissionsIcons();
+                        })
+                )
+            ),
+            SimpleButton('Open basic channel permission page',
+                enabled: !Platform.isIOS,
+                onPressed: () => NotificationUtils.redirectToBasicChannelPage()
+            ),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Channel\'s Permissions'),
+            Wrap(
+              alignment: WrapAlignment.center,
+                children: <Widget>[
+                  PermissionIndicator(name: 'Alerts', allowed: scheduleChannelPermissions[NotificationPermission.Alert]!),
+                  PermissionIndicator(name: 'Sounds', allowed: scheduleChannelPermissions[NotificationPermission.Sound]!),
+                  PermissionIndicator(name: 'Badges', allowed: scheduleChannelPermissions[NotificationPermission.Badge]!),
+                  PermissionIndicator(name: 'Vibrations', allowed: scheduleChannelPermissions[NotificationPermission.Vibration]!),
+                  PermissionIndicator(name: 'Lights', allowed: scheduleChannelPermissions[NotificationPermission.Light]!),
+                  PermissionIndicator(name: 'Full Intents', allowed: scheduleChannelPermissions[NotificationPermission.FullScreenIntent]!),
+                  PermissionIndicator(name: 'Critical Alerts', allowed: scheduleChannelPermissions[NotificationPermission.CriticalAlert]!),
+                ]),
+            TextNote(
+                'To send local and push notifications, it is necessary to obtain the user\'s consent. Keep in mind that he user consent can be revoked at any time.\n\n'
+                    '* OBS: if the feature is not available on device, it will be considered enabled by default.\n'),
+            SimpleButton('Open Schedule channel\'s permission page',
+                enabled: !Platform.isIOS,
+                onPressed: () => NotificationUtils.redirectToScheduledChannelsPage().then(
+                    (_)=> refreshPermissionsIcons()
+                )
+            ),
+            SimpleButton('Request full permissons for Schedule\'s channel',
+                enabled: !schedulesFullControl,
+                onPressed: () => NotificationUtils.requestFullScheduleChannelPermissions(context, scheduleChannelPermissions.keys.toList()).then(
+                    (_)=> refreshPermissionsIcons()
+                )
+            ),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Global Dangerous Permissions'),
+            Wrap(
+                alignment: WrapAlignment.center,
+                children: <Widget>[
+                  PermissionIndicator(name: 'Critical Alerts', allowed: isCriticalAlertsEnabled),
+                  PermissionIndicator(name: 'Precise Alarms', allowed: isPreciseAlarmEnabled),
+                  PermissionIndicator(name: 'Override DnD', allowed: isOverrideDnDEnabled),
+                ]),
+            TextNote(
+                'Dangerous permissions are permissions that can be disabled by default and you must obtain the user\'s consent explicity to enable. Keep in mind that he user consent can be revoked at any time.\n\n'
+                    '* Android: override DnD mode is disabled by default. When the permission is granted, the DnD device state is downgraded every time when a new critical notification is displayed and all notifications are being fully supressed by DnD.\n'
+                    '* iOS: override DnD is automatically enabled with Critical Alert\'s permission.'),
+            SimpleButton('Request Precise Alarms mode',
+                enabled: !isPreciseAlarmEnabled,
+                onPressed: () => NotificationUtils.requestPreciseAlarmPermission(context).then(
+                    (isAllowed) =>
+                    setState(() {
+                      refreshPermissionsIcons();
+                    })
+                )
+            ),
+            SimpleButton('Request Critical Alerts mode',
+                enabled: !isCriticalAlertsEnabled,
+                onPressed: () => NotificationUtils.requestCriticalAlertsPermission(context).then(
+                    (isAllowed) =>
+                    setState(() {
+                      refreshPermissionsIcons();
+                    })
+                )
+            ),
+            SimpleButton('Request to Override Do not Disturbe mode (Android)',
+                enabled: !isOverrideDnDEnabled,
+                onPressed: () => NotificationUtils.requestOverrideDndPermission(context).then(
+                    (isAllowed) =>
+                    setState(() {
+                      refreshPermissionsIcons();
+                    })
+                )
+            ),
+            SimpleButton('Open Precise Alarm\'s permission page',
+                enabled: !Platform.isIOS,
+                onPressed: () => NotificationUtils.redirectToAlarmPage().then(
+                    (_)=> refreshPermissionsIcons()
+                )
+            ),
+            SimpleButton('Open DnD\'s permission page',
+                enabled: !Platform.isIOS,
+                onPressed: () => NotificationUtils.redirectToOverrideDndsPage().then(
+                    (_)=> refreshPermissionsIcons()
+                )
+            ),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Basic Notifications'),
+            TextNote('A simple and fast notification to fresh start.\n\n'
+                'Tap on notification when it appears on your system tray to go to Details page.'),
+            SimpleButton('Show the most basic notification',
+                onPressed: () => NotificationUtils.showBasicNotification(1)),
+            SimpleButton('Show notification with payload',
+                onPressed: () => NotificationUtils.showNotificationWithPayloadContent(1)),
+            SimpleButton('Show notification without body content',
+                onPressed: () => NotificationUtils.showNotificationWithoutBody(1)),
+            SimpleButton('Show notification without title content',
+                onPressed: () => NotificationUtils.showNotificationWithoutTitle(1)),
+            SimpleButton('Send background notification',
+                onPressed: () => NotificationUtils.sendBackgroundNotification(1)),
+            SimpleButton('Cancel the basic notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(1)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Notification\'s Special Category'),
+            TextNote('The notification category is a group of predefined categories that best describe the nature of the notification and may be used by some systems for ranking, delay or filter the notifications. Its highly recommended to correctly categorize your notifications..\n\n'
+                'Slide the bar above to add some delay on notification.'),
+            SecondsSlider(steps: 12, minValue: 0, onChanged: (newValue){ setState(() => _secondsToCallCategory = newValue ); }),
+            SimpleButton('Show call notification',
+                onPressed: () {
+                  Vibration.vibrate(duration: 100);
+                  Future.delayed(Duration(seconds: _secondsToCallCategory.toInt()), () {
+                    NotificationUtils.showCallNotification(1);
+                  });
+                }),
+            SimpleButton('Show alarm notification',
+                onPressed: () {
+                  Vibration.vibrate(duration: 100);
+                  Future.delayed(Duration(seconds: _secondsToCallCategory.toInt()), () {
+                    NotificationUtils.showAlarmNotification(1);
+                  });
+                }),
+            SimpleButton('Stop Alarm / Call',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.stopForegroundServiceNotification()),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Big Picture Notifications'),
+            TextNote(
+                'To show any images on notification, at any place, you need to include the respective source prefix before the path.'
+                '\n\n'
+                'Images can be defined using 4 prefix types:'
+                '\n\n'
+                '* Asset: images access through Flutter asset method.\n\t Example:\n\t asset://path/to/image-asset.png'
+                '\n\n'
+                '* Network: images access through internet connection.\n\t Example:\n\t http(s)://url.com/to/image-asset.png'
+                '\n\n'
+                '* File: images access through files stored on device.\n\t Example:\n\t file://path/to/image-asset.png'
+                '\n\n'
+                '* Resource: images access through drawable native resources.\n\t Example:\n\t resource://url.com/to/image-asset.png'),
+            SimpleButton('Show large icon notification',
+                onPressed: () => NotificationUtils.showLargeIconNotification(2)),
+            SimpleButton('Show big picture notification\n(Network Source)',
+                onPressed: () => NotificationUtils.showBigPictureNetworkNotification(2)),
+            SimpleButton('Show big picture notification\n(Asset Source)',
+                onPressed: () => NotificationUtils.showBigPictureAssetNotification(2)),
+            SimpleButton('Show big picture notification\n(File Source)',
+                onPressed: () => NotificationUtils.showBigPictureFileNotification(2)),
+            SimpleButton('Show big picture notification\n(Resource Source)',
+                onPressed: () => NotificationUtils.showBigPictureResourceNotification(2)),
+            SimpleButton(
+                'Show big picture and\nlarge icon notification simultaneously',
+                onPressed: () => NotificationUtils.showBigPictureAndLargeIconNotification(2)),
+            SimpleButton(
+                'Show big picture notification,\n but hide large icon on expand',
+                onPressed: () =>
+                    NotificationUtils.showBigPictureNotificationHideExpandedLargeIcon(2)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(2)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(
+                title:
+                    'Emojis ${Emojis.smile_alien}${Emojis.transport_air_rocket}'),
+            TextNote(
+                'To send local and push notifications with emojis, use the class Emoji concatenated with your text.\n\n'
+                'Attention: not all Emojis work with all platforms. Please, test the specific emoji before using it in production.'),
+            SimpleButton('Show notification with emojis',
+                onPressed: () => NotificationUtils.showEmojiNotification(1)),
+            SimpleButton(
+              'Go to complete Emojis list (web)',
+              onPressed: () => externalUrl(
+                  'https://unicode.org/emoji/charts/full-emoji-list.html'),
+            ),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Locked Notifications (onGoing - Android)'),
+            TextNote(
+                'To send local or push locked notification, that users cannot dismiss it swiping it, set the "locked" property to true.\n\n' +
+                    "Attention: Notification's content locked property has priority over the Channel's one."),
+            SimpleButton('Send/Update the locked notification',
+                onPressed: () => NotificationUtils.showLockedNotification(2)),
+            SimpleButton('Send/Update the unlocked notification',
+                onPressed: () => NotificationUtils.showUnlockedNotification(2)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Android Foreground Service'),
+            TextNote(
+                'This feature is only available for Android devices.'),
+            SimpleButton('Start foreground service',
+                onPressed: () => NotificationUtils.startForegroundServiceNotification()),
+            SimpleButton('Stop foreground service',
+                onPressed: () => NotificationUtils.stopForegroundServiceNotification()),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Notification Importance (Priority)'),
+            TextNote(
+                'To change the importance level of notifications, please set the importance in the respective channel.\n\n'
+                'The possible importance levels are the following:\n\n'
+                'Max: Makes a sound and appears as a heads-up notification.\n'
+                'Higher: shows everywhere, makes noise and peeks. May use full screen intents.\n'
+                'Default: shows everywhere, makes noise, but does not visually intrude.\n'
+                'Low: Shows in the shade, and potentially in the status bar (see shouldHideSilentStatusBarIcons()), but is not audibly intrusive\n.'
+                'Min: only shows in the shade, below the fold.\n'
+                'None: disable the channel\n\n'
+                "Attention: Notification's channel importance can only be defined on first time."),
+            SimpleButton('Display notification with NotificationImportance.Max',
+                onPressed: () =>
+                    NotificationUtils.showNotificationImportance(3, NotificationImportance.Max)),
+            SimpleButton(
+                'Display notification with NotificationImportance.High',
+                onPressed: () =>
+                    NotificationUtils.showNotificationImportance(3, NotificationImportance.High)),
+            SimpleButton(
+                'Display notification with NotificationImportance.Default',
+                onPressed: () => NotificationUtils.showNotificationImportance(
+                    3, NotificationImportance.Default)),
+            SimpleButton('Display notification with NotificationImportance.Low',
+                onPressed: () =>
+                    NotificationUtils.showNotificationImportance(3, NotificationImportance.Low)),
+            SimpleButton('Display notification with NotificationImportance.Min',
+                onPressed: () =>
+                    NotificationUtils.showNotificationImportance(3, NotificationImportance.Min)),
+            SimpleButton(
+                'Display notification with NotificationImportance.None',
+                onPressed: () =>
+                    NotificationUtils.showNotificationImportance(3, NotificationImportance.None)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Action Buttons'),
+            TextNote('Action buttons can be used in four types:'
+                '\n\n'
+                '* Default: after user taps, the notification bar is closed and an action event is fired.'
+                '\n\n'
+                '* InputField: after user taps, a input text field is displayed to capture input by the user.'
+                '\n\n'
+                '* DisabledAction: after user taps, the notification bar is closed, but the respective action event is not fired.'
+                '\n\n'
+                '* KeepOnTop: after user taps, the notification bar is not closed, but an action event is fired.'),
+            TextNote(
+                'Since Android Nougat, icons are only displayed on media layout. The icon media needs to be a native resource type.'),
+            SimpleButton(
+                'Show notification with\nsimple Action buttons (one disabled)',
+                onPressed: () => NotificationUtils.showNotificationWithActionButtons(3)),
+            SimpleButton('Show notification with\nIcons and Action buttons',
+                onPressed: () => NotificationUtils.showNotificationWithIconsAndActionButtons(3)),
+            SimpleButton('Show notification with\nReply and Action button',
+                onPressed: () => NotificationUtils.showNotificationWithActionButtonsAndReply(3)),
+            SimpleButton('Show Big picture notification\nwith Action Buttons',
+                onPressed: () => NotificationUtils.showBigPictureNotificationActionButtons(3)),
+            SimpleButton(
+                'Show Big picture notification\nwith Reply and Action button',
+                onPressed: () =>
+                    NotificationUtils.showBigPictureNotificationActionButtonsAndReply(3)),
+            SimpleButton(
+                'Show Big text notification\nwith Reply and Action button',
+                onPressed: () => NotificationUtils.showBigTextNotificationWithActionAndReply(3)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(3)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Badge Indicator'),
+            TextNote(
+                '"Badge" is an indicator of how many notifications (or anything else) that have not been viewed by the user (iOS and some versions of Android) '
+                'or even a reminder of new things arrived (Android native).\n\n'
+                'For platforms that show the global indicator over the app icon, is highly recommended to erase this annoying counter as soon '
+                'as possible and even let a shortcut menu with this option outside your app, similar to "mark as read" on e-mail. The amount counter '
+                'is automatically managed by this plugin for each individual installation, and incremented for every notification sent to channels '
+                'with "badge" set to TRUE.\n\n'
+                'OBS: Some Android distributions provide badge counter over the app icon, similar to iOS (LG, Samsung, HTC, Sony, etc).'
+            ),
+            SimpleButton(
+                'Shows a notification with a badge indicator channel activate',
+                onPressed: () => NotificationUtils.showBadgeNotification(Random().nextInt(100))),
+            SimpleButton(
+                'Shows a notification with a badge indicator channel deactivate',
+                onPressed: () =>
+                    NotificationUtils.showWithoutBadgeNotification(Random().nextInt(100))),
+            SimpleButton('Read the badge indicator', onPressed: () async {
+              int amount = await NotificationUtils.getBadgeIndicator();
+              Fluttertoast.showToast(msg: 'Badge count: $amount');
+            }),
+            SimpleButton('Increment the badge indicator', onPressed: () async {
+              int amount = await NotificationUtils.incrementBadgeIndicator();
+              Fluttertoast.showToast(msg: 'Badge count: $amount');
+            }),
+            SimpleButton('Decrement the badge indicator', onPressed: () async {
+              int amount = await NotificationUtils.decrementBadgeIndicator();
+              Fluttertoast.showToast(msg: 'Badge count: $amount');
+            }),
+            SimpleButton('Set manually the badge indicator',
+                onPressed: () async {
+              int? amount = await pickBadgeCounter(context, await NotificationUtils.getBadgeIndicator());
+              if (amount != null) {
+                NotificationUtils.setBadgeIndicator(amount);
+              }
+            }),
+            SimpleButton('Reset the badge indicator',
+                onPressed: () => NotificationUtils.resetBadgeIndicator()),
+            SimpleButton('Cancel all the badge test notifications',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelAllNotifications()),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Vibration Patterns'),
+            TextNote(
+                'The NotificationModel plugin has 3 vibration patters as example, but you perfectly can create your own patter.'
+                '\n'
+                'The patter is made by a list of big integer, separated between ON and OFF duration in milliseconds.'),
+            TextNote(
+                'A vibration pattern pre-configured in a channel could be updated at any time using the method NotificationModel.setChannel'),
+            SimpleButton('Show plain notification with low vibration pattern',
+                onPressed: () => NotificationUtils.showLowVibrationNotification(4)),
+            SimpleButton(
+                'Show plain notification with medium vibration pattern',
+                onPressed: () => NotificationUtils.showMediumVibrationNotification(4)),
+            SimpleButton('Show plain notification with high vibration pattern',
+                onPressed: () => NotificationUtils.showHighVibrationNotification(4)),
+            SimpleButton(
+                'Show plain notification with custom vibration pattern',
+                onPressed: () => NotificationUtils.showCustomVibrationNotification(4)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(4)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Notification Channels'),
+            TextNote(
+                'The channel is a category identifier which notifications are pre-configured and organized before sent.'
+                '\n\n'
+                'On Android, since Oreo version, the notification channel is mandatory and can be managed by the user on your app config page.\n'
+                'Also channels can only update his title and description. All the other parameters could only be change if you erase the channel and recreates it with a different ID.'
+                'For other devices, such iOS, notification channels are emulated and used only as pre-configurations.'),
+            SimpleButton('Create a test channel called "Editable channel"',
+                onPressed: () => NotificationUtils.createTestChannel('Editable channel')),
+            SimpleButton(
+                'Update the title and description of "Editable channel"',
+                onPressed: () => NotificationUtils.updateTestChannel('Editable channel')),
+            SimpleButton('Remove "Editable channel"',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.removeTestChannel('Editable channel')),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'LEDs and Colors'),
+            TextNote(
+                'The led colors and the default layout color are independent'),
+            TextNote('Some devices need to be locked to activate LED lights.'
+                '\n'
+                'If that is your case, please delay the notification to give to you enough time.'),
+            CheckButton('Delay notifications for 5 seconds', delayLEDTests,
+                onPressed: (value) {
+              setState(() {
+                delayLEDTests = value;
+              });
+            }),
+            SimpleButton('Notification with red text color\nand red LED',
+                onPressed: () => NotificationUtils.redNotification(5, delayLEDTests)),
+            SimpleButton('Notification with yellow text color\nand yellow LED',
+                onPressed: () => NotificationUtils.yellowNotification(5, delayLEDTests)),
+            SimpleButton('Notification with green text color\nand green LED',
+                onPressed: () => NotificationUtils.greenNotification(5, delayLEDTests)),
+            SimpleButton('Notification with blue text color\nand blue LED',
+                onPressed: () => NotificationUtils.blueNotification(5, delayLEDTests)),
+            SimpleButton('Notification with purple text color\nand purple LED',
+                onPressed: () => NotificationUtils.purpleNotification(5, delayLEDTests)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(5)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Wake Up Locked Screen Notifications'),
+            TextNote(
+                'Wake Up Locked Screen notifications are notifications that can wake up the device screen to call the user attention, if the device is on lock screen.\n\n'
+                'To enable this feature on Android, is necessary to add the WAKE_LOCK permission into your AndroidManifest.xml file. For iOS, this is the default behavior for high priority channels.'),
+            SecondsSlider(steps: 11, onChanged: (newValue){ setState(() => _secondsToWakeUp = newValue ); }),
+            SimpleButton('Schedule notification with wake up locked screen option',
+                onPressed: () => NotificationUtils.scheduleNotificationWithWakeUp(27, _secondsToWakeUp.toInt())),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(27)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Full Screen Intent Notifications'),
+            TextNote(
+                'Full-Screen Intents are notifications that can launch in full-screen mode. They are indicate since Android 9 to receiving calls and alarm features.\n\n'
+                'To enable this feature on Android, is necessary to add the USE_FULL_SCREEN_INTENT permission into your AndroidManifest.xml file and explicity request the user permission since Android 11. For iOS, this option has no effect.'),
+            SimpleButton('Schedule notification with full screen locked screen option',
+                onPressed: () => NotificationUtils.scheduleFullScrenNotification(27)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(27)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Notification Sound'),
+            SimpleButton('Show notification with custom sound',
+                onPressed: () => NotificationUtils.showCustomSoundNotification(6)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(6)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Silenced Notifications'),
+            SimpleButton('Show notification with no sound',
+                onPressed: () => NotificationUtils.showNotificationWithNoSound(7)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(7)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Scheduled Notifications'),
+            SimpleButton('Schedule notification with local time zone',
+                onPressed: () async {
+              DateTime? pickedDate =
+                  await pickScheduleDate(context, isUtc: false);
+              if (pickedDate != null) {
+                NotificationUtils.showNotificationAtSchedulePreciseDate(pickedDate);
+              }
+            }),
+            SimpleButton('Schedule notification with utc time zone',
+                onPressed: () async {
+              DateTime? pickedDate =
+                  await pickScheduleDate(context, isUtc: true);
+              if (pickedDate != null) {
+                NotificationUtils.showNotificationAtSchedulePreciseDate(pickedDate);
+              }
+            }),
+            SimpleButton(
+              'Show notification at every single minute',
+              onPressed: () => NotificationUtils.repeatMinuteNotification(),
+            ),
+            SimpleButton(
+              'Show notifications repeatedly in 10 sec, spaced 5 sec from each other for 1 minute (only for Android)',
+              onPressed: () => NotificationUtils.repeatMultiple5Crontab(),
+            ),
+            SimpleButton(
+              'Show notification with 3 precise times (only for Android)',
+              onPressed: () => NotificationUtils.repeatPreciseThreeTimes(),
+            ),
+            SimpleButton(
+              'Show notification at every single minute o\'clock',
+              onPressed: () => NotificationUtils.repeatMinuteNotificationOClock(),
+            ),
+            SimpleButton('Get current time zone reference name',
+                onPressed: () =>
+                    NotificationUtils.getCurrentTimeZone().then((timeZone) => showDialog(
+                        context: context,
+                        builder: (_) => AlertDialog(
+                            backgroundColor: Color(0xfffbfbfb),
+                            title: Center(child: Text('Current Time Zone')),
+                            content: SizedBox(
+                                height: 80.0,
+                                child: Center(
+                                    child: Column(
+                                  children: [
+                                    Text(AwesomeDateUtils.parseDateToString(
+                                        DateTime.now())!),
+                                    Text(timeZone),
+                                  ],
+                                ))))))),
+            SimpleButton('Get utc time zone reference name',
+                onPressed: () => NotificationUtils.getUtcTimeZone().then((timeZone) => showDialog(
+                    context: context,
+                    builder: (_) => AlertDialog(
+                        backgroundColor: Color(0xfffbfbfb),
+                        title: Center(child: Text('UTC Time Zone')),
+                        content: SizedBox(
+                            height: 80.0,
+                            child: Center(
+                                child: Column(
+                              children: [
+                                Text(AwesomeDateUtils.parseDateToString(
+                                    DateTime.now().toUtc())!),
+                                Text(timeZone),
+                              ],
+                            ))))))),
+            SimpleButton('List all active schedules',
+                onPressed: () => NotificationUtils.listScheduledNotifications(context)),
+            SimpleButton(
+                'Dismiss the displayed scheduled notifications without cancel the respective schedules',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.dismissNotificationsByChannelKey('scheduled')),
+            SimpleButton(
+                'Cancel the active schedules without dismiss the displayed notifications',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelSchedulesByChannelKey('scheduled')),
+            SimpleButton('Cancel all schedules and dismiss the respective displayed notifications',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotificationsByChannelKey('scheduled')),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Get Next Schedule Date'),
+            TextNote(
+                'This is a simple example to show how to query the next valid schedule date. The date components follow the ISO 8601 standard.'),
+            SimpleButton('Get next Monday after date', onPressed: () async {
+              DateTime? referenceDate =
+                  await pickScheduleDate(context, isUtc: false);
+
+              NotificationSchedule schedule = NotificationCalendar(
+                  weekday: DateTime.monday, hour: 0, minute: 0, second: 0,
+                  timeZone: AwesomeNotifications.localTimeZoneIdentifier);
+              //NotificationCalendar.fromDate(date: expectedDate);
+
+              DateTime? nextValidDate = await AwesomeNotifications()
+                  .getNextDate(schedule, fixedDate: referenceDate);
+
+              late String response;
+              if (nextValidDate == null)
+                response = 'There is no more valid date for this schedule';
+              else
+                response = AwesomeDateUtils.parseDateToString(nextValidDate.toUtc(),
+                    format: 'dd/MM/yyyy')!;
+
+              showDialog(
+                  context: context,
+                  builder: (_) => AlertDialog(
+                        title: Text("Next valid schedule"),
+                        content: SizedBox(
+                            height: 50, child: Center(child: Text(response))),
+                        actions: [
+                          TextButton(
+                            child: Text("OK"),
+                            onPressed: () {
+                              Navigator.of(context).pop(null);
+                            },
+                          )
+                        ],
+                      ));
+            }),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Media Player'),
+            TextNote(
+                'The media player its just emulated and was built to help me to check if the notification media control contemplates the dev demands, such as sync state, etc.'
+                '\n\n'
+                'The layout itself was built just for fun, you can use it as you wish for.'
+                '\n\n'
+                'ATENTION: There is no media reproducing in any place, its just a Timer to pretend a time passing.'),
+            SimpleButton('Show media player',
+                onPressed: () =>
+                    Navigator.pushNamed(context, PAGE_MEDIA_DETAILS)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(100)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Progress Notifications'),
+            SimpleButton('Show indeterminate progress notification',
+                onPressed: () => NotificationUtils.showIndeterminateProgressNotification(9)),
+            SimpleButton('Show progress notification - updates every second',
+                onPressed: () => NotificationUtils.showProgressNotification(9)),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(9)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Inbox Notifications'),
+            SimpleButton(
+              'Show Inbox notification',
+              onPressed: () => NotificationUtils.showInboxNotification(10),
+            ),
+            SimpleButton('Cancel notification',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotification(10)),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Messaging Notifications'),
+            SimpleButton('Simulate Chat Messaging notification',
+                onPressed: () => NotificationUtils.simulateChatConversation(groupKey: 'jhonny_group')
+              ),
+            SimpleButton('Cancel Chat notification by group key',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotificationsByGroupKey('jhonny_group')),
+
+            /* ******************************************************************** */
+
+            TextDivisor(title: 'Grouped Notifications'),
+            SimpleButton('Show grouped notifications',
+                onPressed: () => NotificationUtils.showGroupedNotifications('grouped')),
+            SimpleButton('Cancel grouped notifications',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.dismissNotificationsByChannelKey('grouped')),
+
+            /* ******************************************************************** */
+            TextDivisor(),
+            SimpleButton('Dismiss all notifications by channel key',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.dismissNotificationsByChannelKey('scheduled')),
+            SimpleButton('Dismiss all notifications by group key',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.dismissNotificationsByGroupKey('grouped')),
+            SimpleButton('Cancel all schedules by channel key',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelSchedulesByChannelKey('scheduled')),
+            SimpleButton('Cancel all schedules by group key',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelSchedulesByGroupKey('grouped')),
+            SimpleButton('Cancel all notifications by channel key',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotificationsByChannelKey('scheduled')),
+            SimpleButton('Cancel all notifications by group key',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: () => NotificationUtils.cancelNotificationsByGroupKey('grouped')),
+            SimpleButton('Dismiss all notifications',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: NotificationUtils.dismissAllNotifications),
+            SimpleButton('Cancel all active schedules',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: NotificationUtils.cancelAllSchedules),
+            SimpleButton('Cancel all notifications and schedules',
+                backgroundColor: Colors.red,
+                labelColor: Colors.white,
+                onPressed: NotificationUtils.cancelAllNotifications),
+          ],
+        ));
+  }
+}
+
+class PermissionIndicator extends StatelessWidget {
+  const PermissionIndicator({
+    Key? key,
+    required this.name,
+    required this.allowed
+  }) : super(key: key);
+
+  final String? name;
+  final bool allowed;
+
+  @override
+  Widget build(BuildContext context) {
+    return Container(
+      padding: EdgeInsets.all(5),
+      width: 125,
+      child: Column(
+        children: [
+          (name != null) ? Text(name!+':', textAlign: TextAlign.center) : SizedBox(),
+          Text(allowed ? 'Allowed' : 'Not allowed',
+              style: TextStyle(
+                  color: allowed
+                      ? Colors.green
+                      : Colors.red)),
+          LedLight(allowed)
+        ],
+      ),
+    );
+  }
+}
Index: example/android/app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/values/styles.xml b/example/android/app/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1652867891931)
+++ b/example/android/app/src/main/res/values/styles.xml	(date 1652867891931)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             Flutter draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+         
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
+        <item name="android:windowBackground">@android:color/white</item>
+    </style>
+</resources>
Index: example/lib/models/media_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/models/media_model.dart b/example/lib/models/media_model.dart
new file mode 100644
--- /dev/null	(date 1652867891936)
+++ b/example/lib/models/media_model.dart	(date 1652867891936)
@@ -0,0 +1,72 @@
+import 'dart:ui';
+
+import 'package:flutter/widgets.dart';
+import 'package:awesome_notifications/awesome_notifications.dart';
+
+class CloseCaptionElement {
+  Duration start;
+  Duration end;
+  String subtitle;
+
+  CloseCaptionElement(this.start, this.end, this.subtitle);
+}
+
+class MediaModel {
+  String _diskImagePath;
+
+  bool isPlaying;
+
+  final String bandName;
+  final String trackName;
+  final Duration trackSize;
+
+  final Size colorCaptureSize;
+
+  final List<CloseCaptionElement> closeCaption = [
+    CloseCaptionElement(Duration(minutes: 0, seconds: 15),
+        Duration(minutes: 0, seconds: 20), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 0, seconds: 30),
+        Duration(minutes: 0, seconds: 35), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 0, seconds: 45),
+        Duration(minutes: 0, seconds: 50), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 1, seconds: 00),
+        Duration(minutes: 1, seconds: 05), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 1, seconds: 15),
+        Duration(minutes: 1, seconds: 20), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 1, seconds: 30),
+        Duration(minutes: 1, seconds: 35), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 1, seconds: 45),
+        Duration(minutes: 1, seconds: 50), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 2, seconds: 00),
+        Duration(minutes: 2, seconds: 05), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 2, seconds: 15),
+        Duration(minutes: 2, seconds: 20), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 2, seconds: 30),
+        Duration(minutes: 2, seconds: 35), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 2, seconds: 45),
+        Duration(minutes: 2, seconds: 50), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 3, seconds: 00),
+        Duration(minutes: 3, seconds: 05), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 3, seconds: 15),
+        Duration(minutes: 3, seconds: 20), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 3, seconds: 30),
+        Duration(minutes: 3, seconds: 35), 'la la la la la la'),
+    CloseCaptionElement(Duration(minutes: 3, seconds: 45),
+        Duration(minutes: 3, seconds: 50), 'la la la la la la'),
+  ];
+
+  MediaModel({
+    required String diskImagePath,
+    required this.bandName,
+    required this.trackName,
+    required this.trackSize,
+    this.colorCaptureSize = const Size(50.0, 50.0),
+  })  : assert(diskImagePath.isNotEmpty),
+        assert(bandName.isNotEmpty),
+        assert(trackName.isNotEmpty),
+        _diskImagePath = diskImagePath,
+        isPlaying = false;
+
+  ImageProvider get diskImage => AwesomeBitmapUtils().getFromMediaPath(_diskImagePath);
+  String get diskImagePath => _diskImagePath;
+}
Index: example/android/awesome_notifications_core/src/test/java/me/carda/awesome_notifications_core/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/awesome_notifications_core/src/test/java/me/carda/awesome_notifications_core/ExampleUnitTest.java b/example/android/awesome_notifications_core/src/test/java/me/carda/awesome_notifications_core/ExampleUnitTest.java
new file mode 100644
--- /dev/null	(date 1652867891909)
+++ b/example/android/awesome_notifications_core/src/test/java/me/carda/awesome_notifications_core/ExampleUnitTest.java	(date 1652867891909)
@@ -0,0 +1,17 @@
+package me.carda.awesome_notifications_core;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: example/ios/Flutter/AppFrameworkInfo.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Flutter/AppFrameworkInfo.plist b/example/ios/Flutter/AppFrameworkInfo.plist
new file mode 100644
--- /dev/null	(date 1652867892519)
+++ b/example/ios/Flutter/AppFrameworkInfo.plist	(date 1652867892519)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+  <key>CFBundleDevelopmentRegion</key>
+  <string>en</string>
+  <key>CFBundleExecutable</key>
+  <string>App</string>
+  <key>CFBundleIdentifier</key>
+  <string>io.flutter.flutter.app</string>
+  <key>CFBundleInfoDictionaryVersion</key>
+  <string>6.0</string>
+  <key>CFBundleName</key>
+  <string>App</string>
+  <key>CFBundlePackageType</key>
+  <string>FMWK</string>
+  <key>CFBundleShortVersionString</key>
+  <string>1.0</string>
+  <key>CFBundleSignature</key>
+  <string>????</string>
+  <key>CFBundleVersion</key>
+  <string>1.0</string>
+  <key>MinimumOSVersion</key>
+  <string>9.0</string>
+</dict>
+</plist>
Index: example/lib/pages/firebase_test_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/pages/firebase_test_page.dart b/example/lib/pages/firebase_test_page.dart
new file mode 100644
--- /dev/null	(date 1652867891914)
+++ b/example/lib/pages/firebase_test_page.dart	(date 1652867891914)
@@ -0,0 +1,158 @@
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+
+import 'package:fluttertoast/fluttertoast.dart';
+import 'package:awesome_notifications/awesome_notifications.dart';
+import 'package:shared_preferences/shared_preferences.dart';
+
+import 'package:awesome_notifications_example/common_widgets/simple_button.dart';
+import 'package:awesome_notifications_example/datasources/firebase_datasource.dart';
+import 'package:awesome_notifications_example/main.dart';
+
+class FirebaseTestPage extends StatefulWidget {
+  final String firebaseAppToken;
+  final String packageName = 'me.carda.awesome_notifications_example';
+  final String sharedLastKeyReference = 'FcmServerKey';
+
+  FirebaseTestPage(this.firebaseAppToken);
+
+  final FirebaseDataSource firebaseDataSource = FirebaseDataSource();
+
+  @override
+  _FirebaseTestPageState createState() => _FirebaseTestPageState();
+}
+
+class _FirebaseTestPageState extends State<FirebaseTestPage> {
+  final _formKey = GlobalKey<FormState>();
+  late TextEditingController _serverKeyTextController;
+
+  @override
+  void initState() {
+    super.initState();
+  }
+
+  String? serverKeyValidation(value) {
+    if (value.isEmpty) {
+      return 'The FCM server key is required';
+    }
+
+    if (!RegExp(r'^[A-z0-9\:\-\_]{150,}$').hasMatch(value)) {
+      return 'Enter Valid FCM server key';
+    }
+
+    return null;
+  }
+
+  Future<String> getLastServerKey() async {
+    SharedPreferences prefs = await SharedPreferences.getInstance();
+    return prefs.getString(widget.sharedLastKeyReference) ?? '';
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+        appBar: AppBar(
+          centerTitle: true,
+          title: Text('Firebase Push Test', style: TextStyle(fontSize: 20)),
+          elevation: 10,
+        ),
+        body: FutureBuilder<String>(
+          future: getLastServerKey(),
+          builder: (context, AsyncSnapshot<String> snapshot) {
+            if (!snapshot.hasData) {
+              return Center(
+                  child: CircularProgressIndicator(
+                valueColor: AlwaysStoppedAnimation<Color>(App.mainColor),
+              ));
+            } else {
+              String lastServerKey = snapshot.data ?? '';
+              _serverKeyTextController =
+                  TextEditingController(text: lastServerKey);
+              return ListView(
+                  padding: EdgeInsets.symmetric(horizontal: 15, vertical: 20),
+                  children: <Widget>[
+                    Text('Firebase App Token:'),
+                    Padding(
+                      padding: const EdgeInsets.symmetric(vertical: 15.0),
+                      child: Text(widget.firebaseAppToken,
+                          style: TextStyle(color: App.mainColor)),
+                    ),
+                    SimpleButton(
+                      'Copy Firebase app token',
+                      onPressed: () async {
+                        if (widget.firebaseAppToken.isNotEmpty) {
+                          Clipboard.setData(
+                              ClipboardData(text: widget.firebaseAppToken));
+                          Fluttertoast.showToast(msg: 'Token copied');
+                        }
+                      },
+                    ),
+                    SizedBox(height: 30),
+                    Padding(
+                      padding: const EdgeInsets.symmetric(vertical: 20.0),
+                      child: Form(
+                        key: _formKey,
+                        autovalidateMode: AutovalidateMode.disabled,
+                        child: Column(
+                          children: <Widget>[
+                            TextFormField(
+                              minLines:
+                                  1, //Normal textInputField will be displayed
+                              maxLines:
+                                  5, // when user presses enter it will adapt to it
+                              keyboardType: TextInputType.multiline,
+                              controller: _serverKeyTextController,
+                              validator: serverKeyValidation,
+                              decoration: InputDecoration(
+                                  border: OutlineInputBorder(),
+                                  prefixIcon: Icon(Icons.lock),
+                                  labelText: ' Firebase Server Key ',
+                                  hintText:
+                                      'Paste here your Firebase server Key'),
+                            )
+                          ],
+                        ),
+                      ),
+                    ),
+                    Text(AwesomeMapUtils.printPrettyMap(widget.firebaseDataSource
+                        .getFirebaseExampleContent(
+                            firebaseAppToken:
+                                _serverKeyTextController.value.text))),
+                    SimpleButton(
+                      'Send Firebase request',
+                      onPressed: () async {
+                        String fcmServerKey =
+                            _serverKeyTextController.value.text;
+                        SharedPreferences prefs =
+                            await SharedPreferences.getInstance();
+                        prefs.setString(
+                            widget.sharedLastKeyReference, fcmServerKey);
+
+                        if (_formKey.currentState?.validate() ?? false) {
+                          FocusScopeNode currentFocus = FocusScope.of(context);
+                          if (!currentFocus.hasPrimaryFocus) {
+                            currentFocus.unfocus();
+                          }
+
+                          pushFirebaseNotification(1, fcmServerKey);
+                        }
+                      },
+                    )
+                  ]);
+            }
+          },
+        ));
+  }
+
+  Future<String> pushFirebaseNotification(
+      int id, String firebaseServerKey) async {
+    return await widget.firebaseDataSource.pushBasicNotification(
+        firebaseServerKey: firebaseServerKey,
+        firebaseAppToken: widget.firebaseAppToken,
+        notificationId: id,
+        title: 'Notification through firebase',
+        body:
+            'This notification was sent through firebase messaging cloud services.',
+        payload: {'uuid': 'testPayloadKey'});
+  }
+}
Index: example/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/.gitignore b/example/.gitignore
new file mode 100644
--- /dev/null	(date 1652867891979)
+++ b/example/.gitignore	(date 1652867891979)
@@ -0,0 +1,43 @@
+# Miscellaneous
+*.class
+*.log
+*.pyc
+*.swp
+.DS_Store
+.atom/
+.buildlog/
+.history
+.svn/
+
+# IntelliJ related
+*.iml
+*.ipr
+*.iws
+.idea/
+
+# The .vscode folder contains launch configuration and tasks you configure in
+# VS Code which you may wish to be included in version control, so this line
+# is commented out by default.
+#.vscode/
+
+# Flutter/Dart/Pub related
+**/doc/api/
+.dart_tool/
+.flutter-plugins
+.flutter-plugins-dependencies
+.packages
+.pub-cache/
+.pub/
+/build/
+
+# Web related
+lib/generated_plugin_registrant.dart
+
+# Symbolication related
+app.*.symbols
+
+# Obfuscation related
+app.*.map.json
+
+# Exceptions to above rules.
+!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages
Index: example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings b/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
new file mode 100644
--- /dev/null	(date 1652867892681)
+++ b/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings	(date 1652867892681)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>PreviewsEnabled</key>
+	<false/>
+</dict>
+</plist>
Index: example/ios/Runner/Base.lproj/LaunchScreen.storyboard
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Base.lproj/LaunchScreen.storyboard b/example/ios/Runner/Base.lproj/LaunchScreen.storyboard
new file mode 100644
--- /dev/null	(date 1652867892688)
+++ b/example/ios/Runner/Base.lproj/LaunchScreen.storyboard	(date 1652867892688)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="12121" systemVersion="16G29" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="12089"/>
+    </dependencies>
+    <scenes>
+        <!--View Controller-->
+        <scene sceneID="EHf-IW-A2E">
+            <objects>
+                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
+                    <layoutGuides>
+                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
+                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
+                    </layoutGuides>
+                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <subviews>
+                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
+                            </imageView>
+                        </subviews>
+                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
+                        <constraints>
+                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
+                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
+                        </constraints>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="53" y="375"/>
+        </scene>
+    </scenes>
+    <resources>
+        <image name="LaunchImage" width="168" height="185"/>
+    </resources>
+</document>
Index: example/lib/common_widgets/remarkable_divisor.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/remarkable_divisor.dart b/example/lib/common_widgets/remarkable_divisor.dart
new file mode 100644
--- /dev/null	(date 1652867891984)
+++ b/example/lib/common_widgets/remarkable_divisor.dart	(date 1652867891984)
@@ -0,0 +1,11 @@
+import 'package:flutter/material.dart';
+
+class RemarkableDivisor extends StatelessWidget {
+  @override
+  Widget build(BuildContext context) {
+    return Divider(
+      color: Colors.black,
+      height: 5,
+    );
+  }
+}
Index: example/lib/datasources/common/http_datasource.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/datasources/common/http_datasource.dart b/example/lib/datasources/common/http_datasource.dart
new file mode 100644
--- /dev/null	(date 1652867891990)
+++ b/example/lib/datasources/common/http_datasource.dart	(date 1652867891990)
@@ -0,0 +1,72 @@
+import 'dart:io';
+
+import 'package:http/http.dart' show Client, Response;
+import 'package:flutter/cupertino.dart';
+import 'package:awesome_notifications_example/utils/common_functions.dart';
+import 'datasource.dart';
+
+class HttpDataSource extends DataSource {
+  final String baseAPI;
+  final bool isUsingHttps;
+  final bool isCertificateHttps;
+
+  HttpDataSource({
+    required this.baseAPI,
+    this.isUsingHttps = true,
+    this.isCertificateHttps = true,
+  });
+
+  String getDomainName() {
+    return baseAPI;
+  }
+
+  String getDomainUrl() {
+    return (isUsingHttps ? 'https://' : 'http://') + baseAPI;
+  }
+
+  void printDebugData(Response response) {
+    int? sent = response.request?.contentLength;
+    int? received = response.contentLength;
+    debugPrint(
+      '${response.request?.method} (${response.statusCode}) - ${((sent == null ? '' : 'Up:${fileSize(sent)} ') + (received == null ? '' : 'Down:${fileSize(received)} '))}${response.request?.url.path}',
+    );
+  }
+
+  @override
+  Future<Response?> fetchData({
+    String directory = '',
+    Map<String, String>? parameters,
+    Map<String, String> headers = const {},
+    String body = '',
+    int timeoutInMilliseconds = 5000,
+  }) async {
+    int tries = 3;
+
+    do {
+      try {
+        String apiUrl = getDomainUrl() + directory;
+
+        debugPrint('Requesting url "$apiUrl"...');
+
+        final Client client = Client();
+        final Uri uri = isUsingHttps
+            ? Uri.https(baseAPI, directory, parameters)
+            : Uri.http(baseAPI, directory, parameters);
+        final Response response = body.isEmpty
+            ? await client.get(uri, headers: headers)
+            : await client.post(uri, headers: headers, body: body);
+
+        printDebugData(response);
+        return response;
+      } on HttpException catch (_) {
+        tries--;
+        sleep(Duration(milliseconds: 500));
+      } on Exception catch (_) {
+        tries--;
+        sleep(Duration(milliseconds: 500));
+      }
+    } while (tries > 0);
+
+    return null;
+  }
+}
Index: example/lib/routes.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/routes.dart b/example/lib/routes.dart
new file mode 100644
--- /dev/null	(date 1652867891995)
+++ b/example/lib/routes.dart	(date 1652867891995)
@@ -0,0 +1,26 @@
+import 'package:awesome_notifications/awesome_notifications.dart';
+import 'package:awesome_notifications_example/pages/phone_call_page.dart';
+import 'package:flutter/material.dart';
+import 'package:awesome_notifications_example/pages/firebase_test_page.dart';
+
+import 'package:awesome_notifications_example/pages/media_details_page.dart';
+import 'package:awesome_notifications_example/pages/notification_details_page.dart';
+import 'package:awesome_notifications_example/pages/home_page.dart';
+
+const String PAGE_HOME = '/';
+const String PAGE_MEDIA_DETAILS = '/media-details';
+const String PAGE_NOTIFICATION_DETAILS = '/notification-details';
+const String PAGE_FIREBASE_TESTS = '/firebase-tests';
+const String PAGE_PHONE_CALL = '/phone-call';
+
+Map<String, WidgetBuilder> materialRoutes = {
+  PAGE_HOME: (context) => HomePage(),
+  PAGE_MEDIA_DETAILS: (context) => MediaDetailsPage(),
+  PAGE_NOTIFICATION_DETAILS: (context) => NotificationDetailsPage(
+        ModalRoute.of(context)!.settings.arguments as ReceivedNotification,
+      ),
+  PAGE_FIREBASE_TESTS: (context) =>
+      FirebaseTestPage(ModalRoute.of(context)!.settings.arguments as String),
+  PAGE_PHONE_CALL: (context) =>
+      PhoneCallPage(receivedAction: ModalRoute.of(context)!.settings.arguments as ReceivedAction)
+};
Index: example/android/app/src/main/res/drawable-v21/launch_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable-v21/launch_background.xml b/example/android/app/src/main/res/drawable-v21/launch_background.xml
new file mode 100644
--- /dev/null	(date 1652867892000)
+++ b/example/android/app/src/main/res/drawable-v21/launch_background.xml	(date 1652867892000)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Modify this file to customize your launch splash screen -->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="?android:colorBackground" />
+
+    <!-- You can insert your own image assets here -->
+    <!-- <item>
+        <bitmap
+            android:gravity="center"
+            android:src="@mipmap/launch_image" />
+    </item> -->
+</layer-list>
Index: android/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>group 'me.carda.awesome_notifications'\nversion '1.0'\n\nbuildscript {\n    ext.kotlin_version = '1.5.20'\n    repositories {\n        google()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.2.2'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nrootProject.allprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\napply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\n\nandroid {\n    compileSdkVersion 31\n\n    defaultConfig {\n        minSdkVersion 21\n    }\n    lintOptions {\n        disable 'InvalidPackage'\n    }\n}\n\nallprojects {\n\n    gradle.projectsEvaluated {\n        tasks.withType(JavaCompile) {\n            options.compilerArgs << \"-Xlint:unchecked\"\n        }\n    }\n}\n\ndependencies {\n    implementation \"androidx.core:core:1.7.0\"\n    implementation \"com.google.code.gson:gson:2.8.6\"\n    implementation \"com.google.guava:guava:30.1-android\"\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation \"me.leolin:ShortcutBadger:1.1.22@aar\"\n    implementation 'androidx.core:core-ktx:1.6.0'\n    implementation 'androidx.annotation:annotation:1.3.0'\n    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'\n\n    def lifecycle_version = \"2.2.0\"\n    def arch_version = \"2.1.0\"\n\n    // ViewModel\n    implementation \"androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version\"\n    // LiveData\n    implementation \"androidx.lifecycle:lifecycle-livedata:$lifecycle_version\"\n    // Lifecycles only (without ViewModel or LiveData)\n    implementation \"androidx.lifecycle:lifecycle-runtime:$lifecycle_version\"\n\n    // Saved state module for ViewModel\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version\"\n\n    // Annotation processor\n    annotationProcessor \"androidx.lifecycle:lifecycle-compiler:$lifecycle_version\"\n    // alternately - if using Java8, use the following instead of lifecycle-compiler\n    implementation \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n    // optional - helpers for implementing LifecycleOwner in a Service\n    implementation \"androidx.lifecycle:lifecycle-service:$lifecycle_version\"\n\n    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process\n    implementation \"androidx.lifecycle:lifecycle-process:$lifecycle_version\"\n\n    // optional - ReactiveStreams support for LiveData\n    implementation \"androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version\"\n\n    // optional - Test helpers for LiveData\n    testImplementation \"androidx.arch.core:core-testing:$arch_version\"\n\n    testImplementation \"junit:junit:4.13.2\"\n\n    // Required for instrumented tests\n    androidTestImplementation 'androidx.annotation:annotation:1.3.0'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\n    implementation 'com.squareup.picasso:picasso:2.71828'\n    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'\n}\nrepositories {\n    mavenCentral()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/build.gradle b/android/build.gradle
--- a/android/build.gradle	(revision 844b008b8507b86109424c4f052ba9b89ba01deb)
+++ b/android/build.gradle	(date 1652857595281)
@@ -92,7 +92,6 @@
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
     implementation 'de.hdodenhof:circleimageview:3.1.0'
     implementation 'com.squareup.picasso:picasso:2.71828'
-    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
 }
 repositories {
     mavenCentral()
Index: example/android/awesome_notifications_core/src/androidTest/java/me/carda/awesome_notifications_core/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/awesome_notifications_core/src/androidTest/java/me/carda/awesome_notifications_core/ExampleInstrumentedTest.java b/example/android/awesome_notifications_core/src/androidTest/java/me/carda/awesome_notifications_core/ExampleInstrumentedTest.java
new file mode 100644
--- /dev/null	(date 1652867891942)
+++ b/example/android/awesome_notifications_core/src/androidTest/java/me/carda/awesome_notifications_core/ExampleInstrumentedTest.java	(date 1652867891942)
@@ -0,0 +1,26 @@
+package me.carda.awesome_notifications_core;
+
+import android.content.Context;
+
+import androidx.test.platform.app.InstrumentationRegistry;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
+        assertEquals("me.carda.awesome_notifications_core.test", appContext.getPackageName());
+    }
+}
\ No newline at end of file
Index: example/lib/common_widgets/double_slider.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/double_slider.dart b/example/lib/common_widgets/double_slider.dart
new file mode 100644
--- /dev/null	(date 1652867891947)
+++ b/example/lib/common_widgets/double_slider.dart	(date 1652867891947)
@@ -0,0 +1,240 @@
+import 'dart:ui' as ui;
+
+import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
+
+class DoubleSliderToConfirm extends StatefulWidget {
+  /// Height of the slider. Defaults to 70.
+  final double height;
+
+  /// Width of the slider. Defaults to 300.
+  final double width;
+
+  /// The color of the background of the slider. Defaults to Colors.white.
+  final Color backgroundColor;
+
+  /// The color of the background of the slider when it has been slide to the end. By giving a value here, the background color
+  /// will gradually change from backgroundColor to backgroundColorEnd when the user slides. Is not used by default.
+  final Color? backgroundColorEnd;
+
+  /// The color of the moving element of the slider. Defaults to Colors.blueAccent.
+  final Color foregroundColor;
+
+  /// The color of the icon on the moving element if icon is IconData. Defaults to Colors.white.
+  final Color iconColor;
+
+  /// The button widget used on the moving element of the slider. Defaults to Icon(Icons.chevron_right).
+  final Widget sliderButtonContent;
+
+  /// The shadow below the slider. Defaults to BoxShadow(color: Colors.black38, offset: Offset(0, 2),blurRadius: 2,spreadRadius: 0,).
+  final BoxShadow? shadow;
+
+  /// The text showed below the foreground. Used to specify the functionality to the user. Defaults to "Slide to confirm".
+  final String text;
+
+  /// The style of the text. Defaults to TextStyle(color: Colors.black26, fontWeight: FontWeight.bold,).
+  final TextStyle? textStyle;
+
+  /// The callback when slider is completed. This is the only required field.
+  final VoidCallback onConfirmation;
+
+  /// The callback when slider is pressed.
+  final VoidCallback? onTapDown;
+
+  /// The callback when slider is release.
+  final VoidCallback? onTapUp;
+
+  /// The shape of the moving element of the slider. Defaults to a circular border radius
+  final BorderRadius? foregroundShape;
+
+  /// The shape of the background of the slider. Defaults to a circular border radius
+  final BorderRadius? backgroundShape;
+
+  /// Stick the slider to the end
+  final bool stickToEnd;
+
+  const DoubleSliderToConfirm({
+    Key? key,
+    this.height = 70,
+    this.width = 300,
+    this.backgroundColor = Colors.white,
+    this.backgroundColorEnd,
+    this.foregroundColor = Colors.blueAccent,
+    this.iconColor = Colors.white,
+    this.shadow,
+    this.sliderButtonContent = const Icon(
+      Icons.chevron_right,
+      color: Colors.white,
+      size: 35,
+    ),
+    this.text = 'Slide to confirm',
+    this.textStyle,
+    required this.onConfirmation,
+    this.onTapDown,
+    this.onTapUp,
+    this.foregroundShape,
+    this.backgroundShape,
+    this.stickToEnd = false,
+  });
+
+  @override
+  State<StatefulWidget> createState() {
+    return _DoubleSliderToConfirmState();
+  }
+}
+
+class _DoubleSliderToConfirmState extends State<DoubleSliderToConfirm> {
+  double _position = 0;
+  int _duration = 0;
+
+  double getPosition() {
+    if (_position < 0) {
+      return 0;
+    } else if (_position > widget.width - widget.height) {
+      return widget.width - widget.height;
+    } else {
+      return _position;
+    }
+  }
+
+  void updatePosition(details) {
+    if (details is DragEndDetails) {
+      setState(() {
+        _duration = 600;
+        if (widget.stickToEnd && _position > widget.width - widget.height) {
+          _position = widget.width - widget.height;
+        } else {
+          _position = 0;
+        }
+      });
+    } else if (details is DragUpdateDetails) {
+      setState(() {
+        _duration = 0;
+        _position = details.localPosition.dx - (widget.height / 2);
+      });
+    }
+  }
+
+  void sliderReleased(details) {
+    if (_position > widget.width - widget.height) {
+      widget.onConfirmation();
+    }
+    updatePosition(details);
+  }
+
+  Color calculateBackground() {
+    if (widget.backgroundColorEnd != null) {
+      double percent;
+
+      // calculates the percentage of the position of the slider
+      if (_position > widget.width - widget.height) {
+        percent = 1.0;
+      } else if (_position / (widget.width - widget.height) > 0) {
+        percent = _position / (widget.width - widget.height);
+      } else {
+        percent = 0.0;
+      }
+
+      int red = widget.backgroundColorEnd!.red;
+      int green = widget.backgroundColorEnd!.green;
+      int blue = widget.backgroundColorEnd!.blue;
+
+      return Color.alphaBlend(Color.fromRGBO(red, green, blue, percent), widget.backgroundColor);
+    } else {
+      return widget.backgroundColor;
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+
+    BoxShadow shadow;
+    if (widget.shadow == null) {
+      shadow = BoxShadow(
+        color: Colors.black38,
+        offset: Offset(0, 2),
+        blurRadius: 2,
+        spreadRadius: 0,
+      );
+    } else {
+      shadow = widget.shadow!;
+    }
+
+    TextStyle style;
+    if (widget.textStyle == null) {
+      style = TextStyle(
+        color: Colors.black26,
+        fontWeight: FontWeight.bold,
+      );
+    } else {
+      style = widget.textStyle!;
+    }
+
+    return AnimatedContainer(
+      duration: Duration(milliseconds: _duration),
+      curve: Curves.ease,
+      height: widget.height,
+      width: widget.width,
+      padding: EdgeInsets.all(5),
+      decoration: BoxDecoration(
+        borderRadius: widget.backgroundShape ?? BorderRadius.all(Radius.circular(widget.height)),
+        color: widget.backgroundColorEnd != null ? this.calculateBackground() : widget.backgroundColor,
+        boxShadow: <BoxShadow>[shadow],
+      ),
+      child: Stack(
+        children: <Widget>[
+          Positioned(
+            top: 0,
+            bottom: 0,
+            right: 10,
+            width: widget.width - getPosition() - widget.height,
+            child: Column(
+                textBaseline: TextBaseline.ideographic,
+                mainAxisAlignment: MainAxisAlignment.center,
+                crossAxisAlignment: CrossAxisAlignment.center,
+                children: [
+                  Text(
+                    widget.text,
+                    overflow: TextOverflow.clip,
+                    textDirection: ui.TextDirection.rtl,
+                    softWrap: false,
+                    maxLines: 1,
+                    style: style,
+                  ),
+                ],
+            ),
+          ),
+          AnimatedPositioned(
+            duration: Duration(milliseconds: _duration),
+            curve: Curves.bounceOut,
+            left: getPosition(),
+            top: 0,
+            child: GestureDetector(
+              onTapDown: (_) => widget.onTapDown != null ? widget.onTapDown!() : null,
+              onTapUp: (_) => widget.onTapUp != null ? widget.onTapUp!() : null,
+              onPanUpdate: (details) {
+                updatePosition(details);
+              },
+              onPanEnd: (details) {
+                if (widget.onTapUp != null) widget.onTapUp!();
+                sliderReleased(details);
+              },
+              child: Container(
+                height: widget.height - 10,
+                width: widget.height - 10,
+                decoration: BoxDecoration(
+                  borderRadius: widget.foregroundShape ?? BorderRadius.all(Radius.circular(widget.height / 2)),
+                  color: widget.foregroundColor,
+                ),
+                child: widget.sliderButtonContent,
+              ),
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
\ No newline at end of file
Index: example/lib/pages/media_details_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/pages/media_details_page.dart b/example/lib/pages/media_details_page.dart
new file mode 100644
--- /dev/null	(date 1652867891955)
+++ b/example/lib/pages/media_details_page.dart	(date 1652867891955)
@@ -0,0 +1,529 @@
+import 'dart:math';
+
+import 'package:awesome_notifications_example/utils/common_functions.dart';
+import 'package:awesome_notifications_example/utils/notification_util.dart';
+import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/rendering.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter/widgets.dart';
+import 'package:palette_generator/palette_generator.dart';
+import 'package:awesome_notifications_example/models/media_model.dart';
+import 'package:awesome_notifications_example/utils/media_player_central.dart';
+
+class MediaDetailsPage extends StatefulWidget {
+  MediaDetailsPage();
+
+  @override
+  _MediaDetailsPageState createState() => _MediaDetailsPageState();
+}
+
+class _MediaDetailsPageState extends State<MediaDetailsPage> {
+  ImageProvider? diskImage;
+
+  bool isDraggin = false;
+  bool closeCaptionActivated = false;
+  bool hasCloseCaption = false;
+
+  bool? isLighten;
+  Color? mainColor;
+  Color? contrastColor;
+
+  String? band;
+  String? music;
+  Duration? mediaLength;
+  Duration? durationPlayed;
+
+  @override
+  void initState() {
+    lockScreenPortrait();
+    super.initState();
+
+    // this is not part of notification system, but just a media player simulator instead
+    MediaPlayerCentral.mediaStream.listen((media) {
+      switch (MediaPlayerCentral.mediaLifeCycle) {
+        case MediaLifeCycle.Stopped:
+          NotificationUtils.cancelNotification(100);
+          break;
+
+        case MediaLifeCycle.Paused:
+          NotificationUtils.updateNotificationMediaPlayer(100, media);
+          break;
+
+        case MediaLifeCycle.Playing:
+          NotificationUtils.updateNotificationMediaPlayer(100, media);
+          break;
+      }
+    });
+
+    MediaPlayerCentral.mediaStream.listen((media) {
+      _updatePlayer(media: media);
+    });
+
+    MediaPlayerCentral.progressStream.listen((moment) {
+      if (mounted) {
+        setState(() {
+          if (!isDraggin) {
+            durationPlayed = moment;
+          }
+        });
+      }
+    });
+
+    _updatePlayer(media: MediaPlayerCentral.currentMedia);
+  }
+
+  @override
+  dispose() {
+    unlockScreenPortrait();
+
+    MediaPlayerCentral.mediaSink.close();
+    MediaPlayerCentral.progressSink.close();
+    super.dispose();
+  }
+
+  bool computeLuminance(Color color) {
+    return color.computeLuminance() > 0.5;
+  }
+
+  Color getContrastColor(Color color) {
+    double y = (299 * color.red + 587 * color.green + 114 * color.blue) / 1000;
+    return y >= 128 ? Colors.black : Colors.white;
+  }
+
+  Color getComplementaryColor(Color color) {
+    int minColor = min(min(color.red, color.green), color.blue);
+    int maxColor = max(max(color.red, color.green), color.blue);
+    return Color.fromARGB(
+      255,
+      maxColor - minColor - color.red,
+      maxColor - minColor - color.green,
+      maxColor - minColor - color.blue,
+    );
+    /*
+    double y = (299 * color.red + 587 * color.green + 114 * color.blue) / 1000;
+    return y >= 128 ? Colors.black : Colors.white;
+    */
+  }
+
+  Future<void> _updatePlayer({MediaModel? media}) async {
+    if (media != null) {
+      diskImage = media.diskImage;
+      band = media.bandName;
+      music = media.trackName;
+      mediaLength = media.trackSize;
+      hasCloseCaption = media.closeCaption.isNotEmpty;
+    } else {
+      diskImage = null;
+      band = null;
+      music = null;
+      mediaLength = null;
+      durationPlayed = Duration.zero;
+    }
+
+    _updatePaletteGenerator(media: media);
+
+    if (mounted) setState(() {});
+  }
+
+  Future<void> _updatePaletteGenerator({MediaModel? media}) async {
+    late PaletteGenerator paletteGenerator;
+    if (media != null) {
+      paletteGenerator = await PaletteGenerator.fromImageProvider(
+          media.diskImage,
+          maximumColorCount: 5,
+          size: media.colorCaptureSize);
+    }
+
+    if (media != null && paletteGenerator.paletteColors.length >= 1) {
+      mainColor = paletteGenerator.dominantColor!.color;
+      contrastColor = getContrastColor(mainColor!)
+          .withOpacity(0.85); //paletteGenerator.paletteColors.last.color;//
+    } else {
+      mainColor = null;
+      contrastColor = null;
+    }
+
+    if (this.mounted) setState(() {});
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return _buildMediaPlayer(context);
+  }
+
+  Widget _buildMediaPlayer(BuildContext context) {
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+    ThemeData themeData = Theme.of(context);
+
+    isLighten =
+        isLighten ?? themeData.accentColorBrightness == Brightness.light;
+    mainColor = mainColor ?? themeData.backgroundColor;
+    contrastColor = contrastColor ?? (isLighten! ? Colors.black : Colors.white);
+
+    double maxSize = max(mediaQueryData.size.width, mediaQueryData.size.height);
+
+    double imageHeight = (maxSize - mediaQueryData.padding.top) * 0.45;
+    double imageWidth = mediaQueryData.size.width * 0.8;
+
+    return Theme(
+        data: Theme.of(context).copyWith(
+            primaryColor: mainColor,
+            accentColor: contrastColor,
+            scaffoldBackgroundColor: mainColor,
+            disabledColor: contrastColor?.withOpacity(0.25),
+            textTheme: Theme.of(context)
+                .textTheme
+                .copyWith(
+                  headline2:
+                      TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
+                  headline3:
+                      TextStyle(fontSize: 18, fontWeight: FontWeight.w400),
+                  headline6:
+                      TextStyle(fontSize: 18, fontWeight: FontWeight.w400),
+                )
+                .apply(
+                  bodyColor: contrastColor,
+                  decorationColor: contrastColor,
+                  displayColor: contrastColor,
+                ),
+            colorScheme: contrastColor != null
+                ? ColorScheme.light(primary: contrastColor!)
+                : null,
+            buttonTheme: ButtonThemeData(
+                textTheme: ButtonTextTheme.accent,
+                disabledColor: contrastColor?.withOpacity(0.25),
+                buttonColor: contrastColor),
+            iconTheme: IconThemeData(color: contrastColor),
+            sliderTheme: SliderThemeData(
+                trackHeight: 4.0,
+                activeTrackColor: contrastColor,
+                inactiveTrackColor: contrastColor?.withOpacity(0.25),
+                disabledInactiveTrackColor: contrastColor?.withOpacity(0.25),
+                disabledThumbColor: contrastColor?.withOpacity(0.25),
+                thumbColor: contrastColor,
+                thumbShape: RoundSliderThumbShape(enabledThumbRadius: 15)),
+            canvasColor: mainColor),
+        child: Builder(builder: (BuildContext context) {
+          return Scaffold(
+              body: Stack(
+            children: <Widget>[
+              ListView(
+                padding: EdgeInsets.zero,
+                children: <Widget>[
+                  Container(
+                    constraints: BoxConstraints(
+                      minHeight: mediaQueryData.size.height,
+                      minWidth: mediaQueryData.size.width,
+                    ),
+                    child: Stack(
+                      children: <Widget>[
+                        _buildBackgroundMedia(mediaQueryData),
+                        _buildMediaPlayerContent(mediaQueryData, themeData,
+                            imageHeight, imageWidth, maxSize, context),
+                      ],
+                    ),
+                  ),
+                ],
+              ),
+              Positioned(
+                top: mediaQueryData.padding.top + 10,
+                left: 10,
+                child: Container(
+                  decoration: BoxDecoration(
+                    color: mainColor,
+                    borderRadius: BorderRadius.only(
+                        topLeft: Radius.circular(10),
+                        topRight: Radius.circular(10),
+                        bottomLeft: Radius.circular(10),
+                        bottomRight: Radius.circular(10)),
+                    boxShadow: [
+                      BoxShadow(
+                        color: Colors.black26,
+                        spreadRadius: 5,
+                        blurRadius: 7,
+                        offset: Offset(0, 3), // changes position of shadow
+                      ),
+                    ],
+                  ),
+                  width: 50,
+                  height: 40,
+                  child: IconButton(
+                    icon: Icon(Icons.arrow_back_ios),
+                    onPressed: () => Navigator.pop(context),
+                  ),
+                ),
+              ),
+            ],
+          ));
+        }));
+  }
+
+  Padding _buildMediaPlayerContent(
+      MediaQueryData mediaQueryData,
+      ThemeData themeData,
+      double imageHeight,
+      double imageWidth,
+      double maxSize,
+      BuildContext context) {
+    return Padding(
+      padding: EdgeInsets.only(top: mediaQueryData.padding.top + 20),
+      child: Column(
+        mainAxisAlignment: MainAxisAlignment.start,
+        crossAxisAlignment: CrossAxisAlignment.start,
+        children: <Widget>[
+          Stack(
+            children: <Widget>[
+              Opacity(
+                  opacity: closeCaptionActivated ? 0.08 : 1.0,
+                  child: mediaArt(
+                      imageHeight, imageWidth, mediaQueryData, maxSize)),
+              closeCaptionActivated
+                  ? mediaCloseCaption(themeData, imageHeight, imageWidth,
+                      mediaQueryData, maxSize)
+                  : SizedBox.shrink()
+            ],
+          ),
+          mediaInfo(maxSize, mediaQueryData, context),
+          mediaTrackBar(maxSize, mediaQueryData),
+          mediaPlayerControllers(maxSize)
+        ],
+      ),
+    );
+  }
+
+  Widget mediaCloseCaption(ThemeData themeData, double imageHeight,
+      double imageWidth, MediaQueryData mediaQueryData, double maxSize) {
+    TextStyle? textStyle =
+        themeData.textTheme.headline6?.copyWith(color: contrastColor);
+    String subtitle = MediaPlayerCentral.getCloseCaption(durationPlayed!);
+
+    return Container(
+        width: mediaQueryData.size.width * 0.8,
+        height: imageHeight,
+        child: Center(child: Text(subtitle, style: textStyle)));
+  }
+
+  Widget mediaPlayerControllers(double maxSize) {
+    return Center(
+      child: Container(
+        height: maxSize * 0.15,
+        width: maxSize * 0.8,
+        padding: EdgeInsets.symmetric(horizontal: 0, vertical: 10),
+        child: Row(
+          mainAxisAlignment: MainAxisAlignment.spaceAround,
+          crossAxisAlignment: CrossAxisAlignment.center,
+          children: <Widget>[
+            IconButton(
+              icon: Icon(Icons.list),
+              iconSize: maxSize * 0.05,
+              onPressed: null,
+            ),
+            IconButton(
+              icon: Icon(Icons.skip_previous),
+              iconSize: maxSize * 0.05,
+              onPressed: (durationPlayed == null ||
+                          durationPlayed! <
+                              MediaPlayerCentral.replayTolerance) &&
+                      !MediaPlayerCentral.hasPreviousMedia
+                  ? null
+                  : () {
+                      MediaPlayerCentral.previousMedia();
+                      durationPlayed = MediaPlayerCentral.currentDuration;
+                    },
+            ),
+            Container(
+              padding: EdgeInsets.all(5),
+              margin: EdgeInsets.zero,
+              decoration: BoxDecoration(
+                color: contrastColor?.withOpacity(0.2),
+                shape: BoxShape.circle,
+              ),
+              child: MediaPlayerCentral.isPlaying
+                  ? IconButton(
+                      icon: Icon(Icons.pause_circle_filled),
+                      padding: EdgeInsets.zero,
+                      iconSize: maxSize * 0.08,
+                      onPressed: !MediaPlayerCentral.hasAnyMedia
+                          ? null
+                          : () => MediaPlayerCentral.playPause(),
+                    )
+                  : IconButton(
+                      icon: Icon(Icons.play_circle_filled),
+                      padding: EdgeInsets.zero,
+                      iconSize: maxSize * 0.08,
+                      onPressed: !MediaPlayerCentral.hasAnyMedia
+                          ? null
+                          : () => MediaPlayerCentral.playPause(),
+                    ),
+            ),
+            IconButton(
+              icon: Icon(Icons.skip_next),
+              iconSize: maxSize * 0.05,
+              onPressed: !MediaPlayerCentral.hasNextMedia
+                  ? null
+                  : () {
+                      MediaPlayerCentral.nextMedia();
+                      durationPlayed = MediaPlayerCentral.currentDuration;
+                    },
+            ),
+            IconButton(
+              icon: Icon(CupertinoIcons.shuffle_medium),
+              iconSize: maxSize * 0.05,
+              onPressed: null,
+            )
+          ],
+        ),
+      ),
+    );
+  }
+
+  Widget mediaTrackBar(double maxSize, MediaQueryData mediaQueryData) {
+    double maxValue = mediaLength?.inSeconds.toDouble() ?? 0.0;
+
+    return Container(
+      margin: EdgeInsets.zero,
+      height: maxSize * 0.15,
+      width: mediaQueryData.size.width,
+      padding: EdgeInsets.only(
+          left: mediaQueryData.size.width * 0.05,
+          right: mediaQueryData.size.width * 0.05),
+      child: Column(
+        mainAxisSize: MainAxisSize.min,
+        mainAxisAlignment: MainAxisAlignment.center,
+        crossAxisAlignment: CrossAxisAlignment.center,
+        children: <Widget>[
+          Container(
+              margin: EdgeInsets.zero,
+              height: maxSize * 0.05,
+              width: maxSize,
+              child: Slider(
+                  min: 0.0,
+                  max: maxValue,
+                  value: min(
+                      maxValue, durationPlayed?.inSeconds.toDouble() ?? 0.0),
+                  onChangeStart: (value) {
+                    isDraggin = true;
+                  },
+                  onChanged: (value) {
+                    setState(() {
+                      durationPlayed = Duration(seconds: value.toInt());
+                    });
+                  },
+                  onChangeEnd: (value) {
+                    isDraggin = false;
+                    setState(() {
+                      MediaPlayerCentral.goTo(durationPlayed!);
+                    });
+                  })),
+          SizedBox(height: 5),
+          Container(
+            padding: EdgeInsets.zero,
+            width: maxSize,
+            child: Row(
+              mainAxisAlignment: MainAxisAlignment.spaceBetween,
+              children: <Widget>[
+                Text(printDuration(durationPlayed)),
+                Text(printDuration(durationPlayed)),
+                hasCloseCaption
+                    ? IconButton(
+                        padding: EdgeInsets.zero,
+                        icon: Icon(Icons.closed_caption,
+                            size: 48,
+                            color: closeCaptionActivated
+                                ? contrastColor
+                                : contrastColor?.withOpacity(0.5)),
+                        onPressed: () =>
+                            closeCaptionActivated = !closeCaptionActivated,
+                      )
+                    : SizedBox(height: 47),
+                Text(printDuration(mediaLength),
+                    style: TextStyle(color: contrastColor)),
+              ],
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+
+  Widget mediaInfo(
+      double maxSize, MediaQueryData mediaQueryData, BuildContext context) {
+    return Container(
+      height: maxSize * 0.2 - mediaQueryData.padding.top,
+      width: mediaQueryData.size.width,
+      child: Column(
+        mainAxisAlignment: MainAxisAlignment.center,
+        children: <Widget>[
+          Text(
+            band ?? 'No track',
+            style: Theme.of(context).textTheme.headline2,
+            textAlign: TextAlign.center,
+          ),
+          SizedBox(height: maxSize * 0.01),
+          Text(
+            music ?? '',
+            style: Theme.of(context).textTheme.headline3,
+            textAlign: TextAlign.center,
+          )
+        ],
+      ),
+    );
+  }
+
+  Widget mediaArt(double imageHeight, double imageWidth,
+      MediaQueryData mediaQueryData, double maxSize) {
+    return Center(
+      child: Container(
+          height: imageHeight,
+          width: imageWidth,
+          child: ShaderMask(
+              shaderCallback: (rect) {
+                return LinearGradient(
+                        begin: Alignment.topCenter,
+                        end: Alignment.bottomCenter,
+                        colors: [
+                      Colors.black,
+                      Colors.black,
+                      Colors.transparent
+                    ],
+                        stops: [
+                      0.0,
+                      0.75,
+                      0.98
+                    ])
+                    .createShader(Rect.fromLTRB(0, 0, rect.width, rect.height));
+              },
+              blendMode: BlendMode.dstIn,
+              child: diskImage == null
+                  ? Container(
+                      width: mediaQueryData.size.width,
+                      height: (maxSize - mediaQueryData.padding.top) * 0.45,
+                      color: contrastColor?.withOpacity(0.65))
+                  : Image(
+                      //ProgressiveImage
+                      //placeholder: AssetImage('assets/images/placeholder.gif'),
+                      //thumbnail: AssetImage('assets/images/placeholder.gif'),
+                      image: diskImage!,
+                      width: mediaQueryData.size.width,
+                      height: (maxSize - mediaQueryData.padding.top) * 0.45,
+                      fit: BoxFit.cover,
+                    ))),
+    );
+  }
+
+  Widget _buildBackgroundMedia(MediaQueryData mediaQueryData) {
+    return Container(
+      height: mediaQueryData.size.height,
+      width: mediaQueryData.size.width,
+      decoration: diskImage == null
+          ? null
+          : BoxDecoration(
+              image: DecorationImage(image: diskImage!, fit: BoxFit.cover),
+            ),
+      child: Container(
+        decoration: BoxDecoration(color: mainColor?.withOpacity(0.93)),
+      ),
+    );
+  }
+}
Index: example/lib/pages/phone_call_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/pages/phone_call_page.dart b/example/lib/pages/phone_call_page.dart
new file mode 100644
--- /dev/null	(date 1652867891962)
+++ b/example/lib/pages/phone_call_page.dart	(date 1652867891962)
@@ -0,0 +1,236 @@
+import 'dart:async';
+
+import 'package:awesome_notifications/android_foreground_service.dart';
+import 'package:awesome_notifications/awesome_notifications.dart';
+import 'package:awesome_notifications_example/common_widgets/single_slider.dart';
+import 'package:awesome_notifications_example/utils/common_functions.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:vibration/vibration.dart';
+
+class PhoneCallPage extends StatefulWidget {
+
+  final ReceivedAction receivedAction;
+
+  const PhoneCallPage({Key? key, required this.receivedAction}) : super(key: key);
+
+  @override
+  State<PhoneCallPage> createState() => _PhoneCallPageState();
+}
+
+class _PhoneCallPageState extends State<PhoneCallPage> {
+
+  Timer? _timer;
+  Duration _secondsElapsed = Duration.zero;
+
+  void startCallingTimer() {
+    const oneSec = const Duration(seconds: 1);
+    AndroidForegroundService.stopForeground();
+
+    _timer = new Timer.periodic(
+      oneSec, (Timer timer) {
+          setState(() {
+            _secondsElapsed += oneSec;
+          });
+      },
+    );
+  }
+
+  void finishCall(){
+    Vibration.vibrate(duration: 100);
+    AndroidForegroundService.stopForeground();
+    Navigator.pop(context);
+  }
+
+  @override
+  void initState() {
+    lockScreenPortrait();
+    super.initState();
+    if(widget.receivedAction.buttonKeyPressed == 'ACCEPT')
+      startCallingTimer();
+  }
+
+  @override
+  void dispose() {
+    _timer?.cancel();
+    unlockScreenPortrait();
+    AndroidForegroundService.stopForeground();
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+    ThemeData themeData = Theme.of(context);
+
+    return AnnotatedRegion<SystemUiOverlayStyle>(
+      value: SystemUiOverlayStyle.light,
+      child: Stack(
+          fit: StackFit.expand,
+          children: [
+            // Image
+            Image(
+              image: widget.receivedAction.largeIconImage!,
+              fit: BoxFit.cover,
+            ),
+            // Black Layer
+            DecoratedBox(
+              decoration: BoxDecoration(color: Colors.black45),
+            ),
+            Padding(
+              padding: const EdgeInsets.all(20.0),
+              child: SafeArea(
+                child: Column(
+                  crossAxisAlignment: CrossAxisAlignment.center,
+                  children: [
+                    Text(
+                      widget.receivedAction.payload?['username']?.replaceAll(r'\s+', r'\n')
+                      ?? 'Unknow',
+                      maxLines: 4,
+                      style: themeData
+                          .textTheme
+                          .headline3
+                          ?.copyWith(color: Colors.white),
+                    ),
+                    Text(
+                      _timer == null ?
+                        'Incoming call' : 'Call in progress: ${printDuration(_secondsElapsed)}',
+                      style: themeData
+                        .textTheme
+                        .headline6
+                        ?.copyWith(color: Colors.white54, fontSize: _timer == null ? 20 : 12),
+                    ),
+                    SizedBox(height: 50),
+                    _timer == null ?
+                      Row(
+                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
+                        children: [
+                          TextButton(
+                            onPressed: (){},
+                            style: ButtonStyle(
+                              overlayColor: MaterialStateProperty.all<Color>(Colors.white12),
+                            ),
+                            child: Column(
+                              children: [
+                                Icon(FontAwesomeIcons.solidClock, color: Colors.white54),
+                                Text('Reminder me', style:  themeData
+                                    .textTheme
+                                    .headline6
+                                    ?.copyWith(color: Colors.white54, fontSize: 12, height: 2))
+                              ],
+                            )
+                          ),
+                          SizedBox(),
+                          TextButton(
+                            onPressed: (){},
+                            style: ButtonStyle(
+                              overlayColor: MaterialStateProperty.all<Color>(Colors.white12),
+                            ),
+                            child: Column(
+                              children: [
+                                Icon(FontAwesomeIcons.solidEnvelope, color: Colors.white54),
+                                Text('Message', style:  themeData
+                                    .textTheme
+                                    .headline6
+                                    ?.copyWith(color: Colors.white54, fontSize: 12, height: 2))
+                              ],
+                            ),
+                          )
+                        ],
+                      ) : SizedBox(),
+                    Spacer(),
+                    Container(
+                      padding: EdgeInsets.all(15),
+                      decoration: BoxDecoration(
+                        color: Colors.black54,
+                        borderRadius: BorderRadius.all(Radius.circular(45)),
+                      ),
+                      child: Row(
+                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                        children: _timer == null ?
+                        [
+                          RoundedButton(
+                            press: finishCall,
+                            color: Colors.red,
+                            icon: Icon(FontAwesomeIcons.phoneAlt, color: Colors.white),
+                          ),
+                          SingleSliderToConfirm(
+                            onConfirmation: (){
+                              Vibration.vibrate(duration: 100);
+                              startCallingTimer();
+                            },
+                            width: mediaQueryData.size.width * 0.55,
+                            backgroundColor: Colors.white60,
+                            text: 'Slide to Talk',
+                            stickToEnd: true,
+                            textStyle: Theme.of(context)
+                                .textTheme
+                                .headline6
+                                ?.copyWith(color: Colors.white, fontSize: mediaQueryData.size.width * 0.05),
+                            sliderButtonContent: RoundedButton(
+                              press: (){},
+                              color: Colors.white,
+                              icon: Icon(FontAwesomeIcons.phoneAlt, color: Colors.green),
+                            ),
+                          )
+                        ] :
+                        [
+                          RoundedButton(
+                            press: (){},
+                            icon: Icon(FontAwesomeIcons.microphone),
+                          ),
+                          RoundedButton(
+                            press: finishCall,
+                            color: Colors.red,
+                            icon: Icon(FontAwesomeIcons.phoneAlt, color: Colors.white),
+                          ),
+                          RoundedButton(
+                            press: (){},
+                            icon: Icon(FontAwesomeIcons.volumeUp),
+                          ),
+                        ],
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ],
+        ),
+    );
+    }
+}
+
+class RoundedButton extends StatelessWidget {
+  const RoundedButton({
+    Key? key,
+    this.size = 64,
+    required this.icon,
+    this.color = Colors.white,
+    required this.press,
+  }) : super(key: key);
+
+  final double size;
+  final Icon icon;
+  final Color color;
+  final VoidCallback press;
+
+  @override
+  Widget build(BuildContext context) {
+    return SizedBox(
+      height: size,
+      width: size,
+      child: FlatButton(
+        padding: EdgeInsets.all(15 / 64 * size),
+        shape: const RoundedRectangleBorder(
+          borderRadius: BorderRadius.all(Radius.circular(100)),
+        ),
+        color: color,
+        onPressed: press,
+        child: icon,
+      ),
+    );
+  }
+}
\ No newline at end of file
Index: example/android/settings_aar.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/settings_aar.gradle b/example/android/settings_aar.gradle
new file mode 100644
--- /dev/null	(date 1652867891968)
+++ b/example/android/settings_aar.gradle	(date 1652867891968)
@@ -0,0 +1,1 @@
+include ':app'
Index: example/ios/Runner/Assets.xcassets/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Assets.xcassets/Contents.json b/example/ios/Runner/Assets.xcassets/Contents.json
new file mode 100644
--- /dev/null	(date 1652867891974)
+++ b/example/ios/Runner/Assets.xcassets/Contents.json	(date 1652867891974)
@@ -0,0 +1,6 @@
+{
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  }
+}
Index: example/test/widget_test.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/test/widget_test.dart b/example/test/widget_test.dart
new file mode 100644
--- /dev/null	(date 1652867892078)
+++ b/example/test/widget_test.dart	(date 1652867892078)
@@ -0,0 +1,23 @@
+// This is a basic Flutter widget test.
+//
+// To perform an interaction with a widget in your test, use the WidgetTester
+// utility that Flutter provides. For example, you can send tap and scroll
+// gestures. You can also use WidgetTester to find child widgets in the widget
+// tree, read text, and verify that the values of widget properties are correct.
+
+void main() {
+  /*
+  testWidgets('Verify Platform version', (WidgetTester tester) async {
+    // Build our app and trigger a frame.
+    await tester.pumpWidget(MyApp());
+
+    // Verify that platform version is retrieved.
+    expect(
+      find.byWidgetPredicate(
+        (Widget widget) => widget is Text &&
+                           widget.data.startsWith('Running on:'),
+      ),
+      findsOneWidget,
+    );
+  });*/
+}
Index: example/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/README.md b/example/README.md
new file mode 100644
--- /dev/null	(date 1652867892716)
+++ b/example/README.md	(date 1652867892716)
@@ -0,0 +1,16 @@
+# awesome_notifications_example
+
+Demonstrates how to use the awesome_notifications plugin.
+
+## Getting Started
+
+This project is a starting point for a Flutter application.
+
+A few resources to get you started if this is your first Flutter project:
+
+- [Lab: Write your first Flutter app](https://flutter.dev/docs/get-started/codelab)
+- [Cookbook: Useful Flutter samples](https://flutter.dev/docs/cookbook)
+
+For help getting started with Flutter, view our
+[online documentation](https://flutter.dev/docs), which offers tutorials,
+samples, guidance on mobile development, and a full API reference.
Index: example/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/example/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
--- /dev/null	(date 1652867892728)
+++ b/example/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata	(date 1652867892728)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:">
+   </FileRef>
+</Workspace>
Index: example/assets/readme/Firebase_FCM_Example.postman_collection.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/assets/readme/Firebase_FCM_Example.postman_collection.json b/example/assets/readme/Firebase_FCM_Example.postman_collection.json
new file mode 100644
--- /dev/null	(date 1652867892084)
+++ b/example/assets/readme/Firebase_FCM_Example.postman_collection.json	(date 1652867892084)
@@ -0,0 +1,55 @@
+{
+	"info": {
+		"_postman_id": "c501f74f-d05b-4344-8f51-c64f4d69d8a9",
+		"name": "AwesomeNotifications Example",
+		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
+	},
+	"item": [
+		{
+			"name": "Firebase Cloud Message Example - Awesome Notifications (Flutter)",
+			"request": {
+				"auth": {
+					"type": "apikey",
+					"apikey": [
+						{
+							"key": "value",
+							"value": "key={{server_key}}",
+							"type": "string"
+						},
+						{
+							"key": "key",
+							"value": "Authorization",
+							"type": "string"
+						}
+					]
+				},
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json",
+						"type": "text"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n    \"to\" : \"{{fcm_token}}\",\r\n    \"mutable_content\" : true,\n    \"content_available\" : true,\n   \"priority\" : \"high\",\n   \"data\" : {\r\n        \"content\": {\r\n            \"id\": 100,\r\n            \"channelKey\": \"big_picture\",\r\n            \"title\": \"Huston!\\nThe eagle has landed!\",\r\n            \"body\": \"A small step for a man, but a giant leap to Flutter's community!\",\r\n            \"notificationLayout\": \"BigPicture\",\r\n            \"largeIcon\": \"https://media.fstatic.com/kdNpUx4VBicwDuRBnhBrNmVsaKU=/full-fit-in/290x478/media/artists/avatar/2013/08/neil-i-armstrong_a39978.jpeg\",\r\n            \"bigPicture\": \"https://www.dw.com/image/49519617_303.jpg\",\r\n            \"showWhen\": true,\r\n            \"autoDismissible\": true,\r\n            \"privacy\": \"Private\"\r\n        },\r\n        \"actionButtons\": [\r\n            {\r\n                \"key\": \"REPLY\",\r\n                \"label\": \"Reply\",\r\n                \"autoDismissible\": true,\r\n                \"buttonType\":  \"InputField\"\r\n            },\r\n            {\r\n                \"key\": \"ARCHIVE\",\r\n                \"label\": \"Archive\",\r\n                \"autoDismissible\": true\r\n            }\r\n        ]\r\n    }\r\n}"
+				},
+				"url": {
+					"raw": "https://fcm.googleapis.com/fcm/send",
+					"protocol": "https",
+					"host": [
+						"fcm",
+						"googleapis",
+						"com"
+					],
+					"path": [
+						"fcm",
+						"send"
+					]
+				}
+			},
+			"response": []
+		}
+	]
+}
\ No newline at end of file
Index: example/lib/common_widgets/text_divisor.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/text_divisor.dart b/example/lib/common_widgets/text_divisor.dart
new file mode 100644
--- /dev/null	(date 1652867892090)
+++ b/example/lib/common_widgets/text_divisor.dart	(date 1652867892090)
@@ -0,0 +1,38 @@
+import 'package:flutter/material.dart';
+import 'package:awesome_notifications_example/common_widgets/remarkable_divisor.dart';
+
+class TextDivisor extends StatelessWidget {
+  final String title;
+
+  TextDivisor({this.title = ''});
+
+  @override
+  Widget build(BuildContext context) {
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+    return Padding(
+        padding: EdgeInsets.only(top: 20, bottom: 20),
+        child: title.isNotEmpty ?
+        Row(
+            children: <Widget>[
+              Expanded(
+                  child: RemarkableDivisor()
+              ),
+              Padding(
+                  padding: EdgeInsets.symmetric(horizontal: 20),
+                  child: Container(
+                    constraints: BoxConstraints(maxWidth: mediaQueryData.size.width / 2),
+                    child: Text(
+                        title,
+                        textAlign: TextAlign.center,
+                        style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600)),
+                  )
+              ),
+              Expanded(
+                  child: RemarkableDivisor()
+              ),
+            ]
+        ):
+        RemarkableDivisor()
+    );
+  }
+}
Index: example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
--- /dev/null	(date 1652867892735)
+++ b/example/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	(date 1652867892735)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
Index: example/ios/Runner.xcodeproj/project.pbxproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner.xcodeproj/project.pbxproj b/example/ios/Runner.xcodeproj/project.pbxproj
new file mode 100644
--- /dev/null	(date 1652867892738)
+++ b/example/ios/Runner.xcodeproj/project.pbxproj	(date 1652867892738)
@@ -0,0 +1,587 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 51;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		05B7232F2724599300D18725 /* res_morph_power_rangers.aiff in Resources */ = {isa = PBXBuildFile; fileRef = 05B7232E2724599300D18725 /* res_morph_power_rangers.aiff */; };
+		06133C53BCB23C8EE09E7525 /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 05380AFC25F5C29A001D5D0A /* Pods_Runner.framework */; };
+		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
+		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
+		47CF3D5FF75CE3A5279A143F /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 05380B2325F5C441001D5D0A /* Pods_Runner.framework */; };
+		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
+		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
+		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
+		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
+		EB9EDE2CFFEA74D255CD1DC7 /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 449D413CE332323BB49015B0 /* Pods_Runner.framework */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		05C0EE4425F2D9E700DC0E72 /* Embed App Extensions */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 2147483647;
+			dstPath = "";
+			dstSubfolderSpec = 13;
+			files = (
+			);
+			name = "Embed App Extensions";
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		05380AFC25F5C29A001D5D0A /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		05380B1625F5C311001D5D0A /* awesome_notifications.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = awesome_notifications.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		05380B1A25F5C324001D5D0A /* awesome_notifications.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = awesome_notifications.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		05380B1F25F5C438001D5D0A /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		05380B2325F5C441001D5D0A /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		05865CAC264DAB890057AE97 /* MyPlayground.playground */ = {isa = PBXFileReference; lastKnownFileType = file.playground; path = MyPlayground.playground; sourceTree = "<group>"; xcLanguageSpecificationIdentifier = xcode.lang.swift; };
+		05B7232E2724599300D18725 /* res_morph_power_rangers.aiff */ = {isa = PBXFileReference; lastKnownFileType = audio.aiff; name = res_morph_power_rangers.aiff; path = ../../../../../../Downloads/res_morph_power_rangers.aiff; sourceTree = "<group>"; };
+		05C0EE5025F2DA0100DC0E72 /* UserNotifications.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = UserNotifications.framework; path = System/Library/Frameworks/UserNotifications.framework; sourceTree = SDKROOT; };
+		05C0EE5225F2DA0100DC0E72 /* UserNotificationsUI.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = UserNotificationsUI.framework; path = System/Library/Frameworks/UserNotificationsUI.framework; sourceTree = SDKROOT; };
+		05C0EE8525F2DF0200DC0E72 /* Runner.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = Runner.entitlements; sourceTree = "<group>"; };
+		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
+		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
+		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
+		449D413CE332323BB49015B0 /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		658F28815C0BBD624B481175 /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
+		6C4FE32154B402C6DE2CFB72 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
+		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
+		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
+		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
+		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
+		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
+		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
+		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
+		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
+		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
+		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+		EB53628D31E8A9D73BFF0E7D /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		97C146EB1CF9000F007C117D /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				EB9EDE2CFFEA74D255CD1DC7 /* Pods_Runner.framework in Frameworks */,
+				06133C53BCB23C8EE09E7525 /* Pods_Runner.framework in Frameworks */,
+				47CF3D5FF75CE3A5279A143F /* Pods_Runner.framework in Frameworks */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		05C0EE4F25F2DA0100DC0E72 /* Frameworks */ = {
+			isa = PBXGroup;
+			children = (
+				05380B2325F5C441001D5D0A /* Pods_Runner.framework */,
+				05380B1F25F5C438001D5D0A /* Pods_Runner.framework */,
+				05380B1A25F5C324001D5D0A /* awesome_notifications.framework */,
+				05380B1625F5C311001D5D0A /* awesome_notifications.framework */,
+				05380AFC25F5C29A001D5D0A /* Pods_Runner.framework */,
+				05C0EE5025F2DA0100DC0E72 /* UserNotifications.framework */,
+				05C0EE5225F2DA0100DC0E72 /* UserNotificationsUI.framework */,
+				449D413CE332323BB49015B0 /* Pods_Runner.framework */,
+			);
+			name = Frameworks;
+			sourceTree = "<group>";
+		};
+		9740EEB11CF90186004384FC /* Flutter */ = {
+			isa = PBXGroup;
+			children = (
+				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
+				9740EEB21CF90195004384FC /* Debug.xcconfig */,
+				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
+				9740EEB31CF90195004384FC /* Generated.xcconfig */,
+			);
+			name = Flutter;
+			sourceTree = "<group>";
+		};
+		97C146E51CF9000F007C117D = {
+			isa = PBXGroup;
+			children = (
+				9740EEB11CF90186004384FC /* Flutter */,
+				97C146F01CF9000F007C117D /* Runner */,
+				05C0EE4F25F2DA0100DC0E72 /* Frameworks */,
+				97C146EF1CF9000F007C117D /* Products */,
+				C63CE89E4FB0ED8AB1ED2C36 /* Pods */,
+			);
+			sourceTree = "<group>";
+		};
+		97C146EF1CF9000F007C117D /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				97C146EE1CF9000F007C117D /* Runner.app */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		97C146F01CF9000F007C117D /* Runner */ = {
+			isa = PBXGroup;
+			children = (
+				05B7232E2724599300D18725 /* res_morph_power_rangers.aiff */,
+				05C0EE8525F2DF0200DC0E72 /* Runner.entitlements */,
+				97C146FA1CF9000F007C117D /* Main.storyboard */,
+				97C146FD1CF9000F007C117D /* Assets.xcassets */,
+				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
+				97C147021CF9000F007C117D /* Info.plist */,
+				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
+				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
+				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
+				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
+			);
+			path = Runner;
+			sourceTree = "<group>";
+		};
+		C63CE89E4FB0ED8AB1ED2C36 /* Pods */ = {
+			isa = PBXGroup;
+			children = (
+				05865CAC264DAB890057AE97 /* MyPlayground.playground */,
+				6C4FE32154B402C6DE2CFB72 /* Pods-Runner.debug.xcconfig */,
+				658F28815C0BBD624B481175 /* Pods-Runner.release.xcconfig */,
+				EB53628D31E8A9D73BFF0E7D /* Pods-Runner.profile.xcconfig */,
+			);
+			path = Pods;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		97C146ED1CF9000F007C117D /* Runner */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
+			buildPhases = (
+				B4EF8673CC2DD6973A9C2A26 /* [CP] Check Pods Manifest.lock */,
+				9740EEB61CF901F6004384FC /* Run Script */,
+				97C146EA1CF9000F007C117D /* Sources */,
+				97C146EB1CF9000F007C117D /* Frameworks */,
+				97C146EC1CF9000F007C117D /* Resources */,
+				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
+				05C0EE4425F2D9E700DC0E72 /* Embed App Extensions */,
+				D206D6193D36967F987FAB57 /* [CP] Embed Pods Frameworks */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = Runner;
+			productName = Runner;
+			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
+			productType = "com.apple.product-type.application";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		97C146E61CF9000F007C117D /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastSwiftUpdateCheck = 1240;
+				LastUpgradeCheck = 1020;
+				ORGANIZATIONNAME = "";
+				TargetAttributes = {
+					97C146ED1CF9000F007C117D = {
+						CreatedOnToolsVersion = 7.3.1;
+						LastSwiftMigration = 1100;
+					};
+				};
+			};
+			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 97C146E51CF9000F007C117D;
+			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				97C146ED1CF9000F007C117D /* Runner */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXResourcesBuildPhase section */
+		97C146EC1CF9000F007C117D /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
+				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
+				05B7232F2724599300D18725 /* res_morph_power_rangers.aiff in Resources */,
+				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
+				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXResourcesBuildPhase section */
+
+/* Begin PBXShellScriptBuildPhase section */
+		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputPaths = (
+			);
+			name = "Thin Binary";
+			outputPaths = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
+		};
+		9740EEB61CF901F6004384FC /* Run Script */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputPaths = (
+			);
+			name = "Run Script";
+			outputPaths = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
+		};
+		B4EF8673CC2DD6973A9C2A26 /* [CP] Check Pods Manifest.lock */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+			);
+			inputPaths = (
+				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
+				"${PODS_ROOT}/Manifest.lock",
+			);
+			name = "[CP] Check Pods Manifest.lock";
+			outputFileListPaths = (
+			);
+			outputPaths = (
+				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
+			showEnvVarsInLog = 0;
+		};
+		D206D6193D36967F987FAB57 /* [CP] Embed Pods Frameworks */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
+			);
+			name = "[CP] Embed Pods Frameworks";
+			outputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
+			showEnvVarsInLog = 0;
+		};
+/* End PBXShellScriptBuildPhase section */
+
+/* Begin PBXSourcesBuildPhase section */
+		97C146EA1CF9000F007C117D /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
+				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin PBXVariantGroup section */
+		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				97C146FB1CF9000F007C117D /* Base */,
+			);
+			name = Main.storyboard;
+			sourceTree = "<group>";
+		};
+		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				97C147001CF9000F007C117D /* Base */,
+			);
+			name = LaunchScreen.storyboard;
+			sourceTree = "<group>";
+		};
+/* End PBXVariantGroup section */
+
+/* Begin XCBuildConfiguration section */
+		249021D3217E4FDB00AE95B9 /* Profile */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 10.0;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				SDKROOT = iphoneos;
+				SUPPORTED_PLATFORMS = iphoneos;
+				TARGETED_DEVICE_FAMILY = "1,2";
+				VALIDATE_PRODUCT = YES;
+			};
+			name = Profile;
+		};
+		249021D4217E4FDB00AE95B9 /* Profile */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				DEVELOPMENT_TEAM = 4R89PK952Q;
+				ENABLE_BITCODE = NO;
+				INFOPLIST_FILE = Runner/Info.plist;
+				IPHONEOS_DEPLOYMENT_TARGET = 10.0;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = me.carda.awesomeNotificationsExample;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Profile;
+		};
+		97C147031CF9000F007C117D /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 10.0;
+				MTL_ENABLE_DEBUG_INFO = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = iphoneos;
+				TARGETED_DEVICE_FAMILY = "1,2";
+			};
+			name = Debug;
+		};
+		97C147041CF9000F007C117D /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 10.0;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				SDKROOT = iphoneos;
+				SUPPORTED_PLATFORMS = iphoneos;
+				SWIFT_COMPILATION_MODE = wholemodule;
+				SWIFT_OPTIMIZATION_LEVEL = "-O";
+				TARGETED_DEVICE_FAMILY = "1,2";
+				VALIDATE_PRODUCT = YES;
+			};
+			name = Release;
+		};
+		97C147061CF9000F007C117D /* Debug */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				DEVELOPMENT_TEAM = 4R89PK952Q;
+				ENABLE_BITCODE = NO;
+				INFOPLIST_FILE = Runner/Info.plist;
+				IPHONEOS_DEPLOYMENT_TARGET = 10.0;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = me.carda.awesomeNotificationsExample;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Debug;
+		};
+		97C147071CF9000F007C117D /* Release */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				DEVELOPMENT_TEAM = 4R89PK952Q;
+				ENABLE_BITCODE = NO;
+				INFOPLIST_FILE = Runner/Info.plist;
+				IPHONEOS_DEPLOYMENT_TARGET = 10.0;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = me.carda.awesomeNotificationsExample;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				97C147031CF9000F007C117D /* Debug */,
+				97C147041CF9000F007C117D /* Release */,
+				249021D3217E4FDB00AE95B9 /* Profile */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				97C147061CF9000F007C117D /* Debug */,
+				97C147071CF9000F007C117D /* Release */,
+				249021D4217E4FDB00AE95B9 /* Profile */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 97C146E61CF9000F007C117D /* Project object */;
+}
Index: example/android/app/src/main/res/drawable/res_ic_play.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_play.xml b/example/android/app/src/main/res/drawable/res_ic_play.xml
new file mode 100644
--- /dev/null	(date 1652867892107)
+++ b/example/android/app/src/main/res/drawable/res_ic_play.xml	(date 1652867892107)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="36dp"
+    android:height="36dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#ffffff"
+      android:pathData="M8,5v14l11,-7z"/>
+</vector>
Index: example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json b/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
new file mode 100644
--- /dev/null	(date 1652867892114)
+++ b/example/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json	(date 1652867892114)
@@ -0,0 +1,122 @@
+{
+  "images" : [
+    {
+      "size" : "20x20",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-20x20@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-20x20@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-40x40@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-40x40@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "60x60",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-60x60@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "60x60",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-60x60@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-20x20@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-20x20@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-29x29@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-29x29@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-40x40@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-40x40@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "76x76",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-76x76@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "76x76",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-76x76@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "83.5x83.5",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-83.5x83.5@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "1024x1024",
+      "idiom" : "ios-marketing",
+      "filename" : "Icon-App-1024x1024@1x.png",
+      "scale" : "1x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
Index: example/lib/utils/common_functions.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/utils/common_functions.dart b/example/lib/utils/common_functions.dart
new file mode 100644
--- /dev/null	(date 1652867892189)
+++ b/example/lib/utils/common_functions.dart	(date 1652867892189)
@@ -0,0 +1,148 @@
+import 'dart:ui';
+import 'dart:io';
+
+import 'dart:math' as math;
+import 'package:awesome_notifications/awesome_notifications.dart';
+import 'package:flutter/services.dart';
+import 'package:http/http.dart' as http;
+
+import 'package:flutter/material.dart';
+import 'package:device_info/device_info.dart';
+import 'package:path_provider/path_provider.dart';
+
+Future<String> saveAssetOnDisk(ImageProvider image, String fileName) async {
+  Directory directory = await getApplicationDocumentsDirectory();
+  String filePath = '${directory.path}/$fileName';
+  File newFile = File(filePath);
+
+  if (!await newFile.exists()) {
+    BitmapHelper bitmapHelper = await BitmapHelper.fromProvider(image);
+    await newFile.writeAsBytes(bitmapHelper.content);
+  }
+
+  return filePath;
+}
+
+void lockScreenPortrait(){
+  SystemChrome.setPreferredOrientations([
+    DeviceOrientation.portraitUp,
+    DeviceOrientation.portraitDown,
+  ]);
+}
+
+void unlockScreenPortrait(){
+  SystemChrome.setPreferredOrientations([
+    DeviceOrientation.landscapeRight,
+    DeviceOrientation.landscapeLeft,
+    DeviceOrientation.portraitUp,
+    DeviceOrientation.portraitDown,
+  ]);
+}
+
+Future<String> getPlatformVersion() async {
+  if (Platform.isAndroid) {
+    var androidInfo = await DeviceInfoPlugin().androidInfo;
+    var sdkInt = androidInfo.version.sdkInt;
+    return 'Android-$sdkInt';
+  }
+
+  if (Platform.isIOS) {
+    var iosInfo = await DeviceInfoPlugin().iosInfo;
+    var systemName = iosInfo.systemName;
+    var version = iosInfo.systemVersion;
+    return '$systemName-$version';
+  }
+
+  return 'unknow';
+}
+
+String printDuration(Duration? duration) {
+  if (duration == null) return '00:00';
+  String twoDigits(int n) => n.toString().padLeft(2, "0");
+  String twoDigitMinutes = twoDigits(duration.inMinutes.remainder(60));
+  String twoDigitSeconds = twoDigits(duration.inSeconds.remainder(60));
+  return "$twoDigitMinutes:$twoDigitSeconds";
+}
+
+Future<String> downloadAndSaveImageOnDisk(String url, String fileName) async {
+  var directory = await getApplicationDocumentsDirectory();
+  var filePath = '${directory.path}/$fileName';
+  var file = File(filePath);
+
+
+  if(!await file.exists()){
+    var response = await http.get(Uri.parse(url));
+    await file.writeAsBytes(response.bodyBytes);
+  }
+
+  return filePath;
+}
+
+String fileSize(dynamic size, [int round = 2]) {
+  /**
+   * [size] can be passed as number or as string
+   *
+   * the optional parameter [round] specifies the number
+   * of digits after comma/point (default is 2)
+   */
+  int divider = 1024;
+  int _size;
+  try {
+    _size = int.parse(size.toString());
+  } catch (e) {
+    throw ArgumentError("Can not parse the size parameter: $e");
+  }
+
+  if (_size < divider) {
+    return "$_size B";
+  }
+
+  if (_size < divider * divider && _size % divider == 0) {
+    return "${(_size / divider).toStringAsFixed(0)} KB";
+  }
+
+  if (_size < divider * divider) {
+    return "${(_size / divider).toStringAsFixed(round)} KB";
+  }
+
+  if (_size < divider * divider * divider && _size % divider == 0) {
+    return "${(_size / (divider * divider)).toStringAsFixed(0)} MB";
+  }
+
+  if (_size < divider * divider * divider) {
+    return "${(_size / divider / divider).toStringAsFixed(round)} MB";
+  }
+
+  if (_size < divider * divider * divider * divider && _size % divider == 0) {
+    return "${(_size / (divider * divider * divider)).toStringAsFixed(0)} GB";
+  }
+
+  if (_size < divider * divider * divider * divider) {
+    return "${(_size / divider / divider / divider).toStringAsFixed(round)} GB";
+  }
+
+  if (_size < divider * divider * divider * divider * divider &&
+      _size % divider == 0) {
+    num r = _size / divider / divider / divider / divider;
+    return "${r.toStringAsFixed(0)} TB";
+  }
+
+  if (_size < divider * divider * divider * divider * divider) {
+    num r = _size / divider / divider / divider / divider;
+    return "${r.toStringAsFixed(round)} TB";
+  }
+
+  if (_size < divider * divider * divider * divider * divider * divider &&
+      _size % divider == 0) {
+    num r = _size / divider / divider / divider / divider / divider;
+    return "${r.toStringAsFixed(0)} PB";
+  } else {
+    num r = _size / divider / divider / divider / divider / divider;
+    return "${r.toStringAsFixed(round)} PB";
+  }
+}
+
+Color getRandomColor() {
+  return Color((math.Random().nextDouble() * 0xFFFFFF).toInt() << 0)
+      .withOpacity(1.0);
+}
Index: example/lib/common_widgets/check_button.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/check_button.dart b/example/lib/common_widgets/check_button.dart
new file mode 100644
--- /dev/null	(date 1652867892006)
+++ b/example/lib/common_widgets/check_button.dart	(date 1652867892006)
@@ -0,0 +1,39 @@
+import 'package:flutter/material.dart';
+
+class CheckButton extends StatelessWidget {
+  final String label;
+  final bool isSelected;
+  final void Function(bool)? onPressed;
+
+  const CheckButton(
+    this.label,
+    this.isSelected, {
+    this.onPressed,
+    Key? key,
+  }) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+
+    return Padding(
+      padding: EdgeInsets.symmetric(vertical: 10, horizontal: 5),
+      child: Row(
+        mainAxisAlignment: MainAxisAlignment.spaceBetween,
+        children: <Widget>[
+          Container(
+            width: mediaQueryData.size.width - 110 /* 30 - 60 - 20 */,
+            child: Text(label, style: TextStyle(fontSize: 16)),
+          ),
+          Container(
+            width: 60,
+            child: Switch(
+              value: isSelected,
+              onChanged: onPressed,
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: example/ios/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/.gitignore b/example/ios/.gitignore
new file mode 100644
--- /dev/null	(date 1652867892011)
+++ b/example/ios/.gitignore	(date 1652867892011)
@@ -0,0 +1,32 @@
+*.mode1v3
+*.mode2v3
+*.moved-aside
+*.pbxuser
+*.perspectivev3
+**/*sync/
+.sconsign.dblite
+.tags*
+**/.vagrant/
+**/DerivedData/
+Icon?
+**/Pods/
+**/.symlinks/
+profile
+xcuserdata
+**/.generated/
+Flutter/App.framework
+Flutter/Flutter.framework
+Flutter/Flutter.podspec
+Flutter/Generated.xcconfig
+Flutter/app.flx
+Flutter/app.zip
+Flutter/flutter_assets/
+Flutter/flutter_export_environment.sh
+ServiceDefinitions.json
+Runner/GeneratedPluginRegistrant.*
+
+# Exceptions to above rules.
+!default.mode1v3
+!default.mode2v3
+!default.pbxuser
+!default.perspectivev3
Index: example/lib/common_widgets/seconds_slider.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/seconds_slider.dart b/example/lib/common_widgets/seconds_slider.dart
new file mode 100644
--- /dev/null	(date 1652867892017)
+++ b/example/lib/common_widgets/seconds_slider.dart	(date 1652867892017)
@@ -0,0 +1,55 @@
+
+import 'package:flutter/material.dart';
+
+class SecondsSlider extends StatefulWidget {
+
+  final double initialValue;
+  final double minValue;
+  final double maxValue;
+  final int steps;
+
+  final ValueChanged<double> onChanged;
+
+  const SecondsSlider({
+    Key? key,
+    required this.onChanged,
+    this.initialValue = 5,
+    this.minValue = 5,
+    this.maxValue = 60,
+    this.steps = 5,
+  }) : super(key: key);
+
+  @override
+  State<SecondsSlider> createState() => _SecondsSliderState();
+}
+
+class _SecondsSliderState extends State<SecondsSlider> {
+
+  late double _currentValue;
+
+  @override
+  void initState() {
+    _currentValue = widget.initialValue;
+    super.initState();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: const EdgeInsets.only(bottom: 20.0),
+      child: Slider.adaptive(
+          thumbColor: Colors.deepPurple,
+          inactiveColor: Colors.grey.withOpacity(0.2),
+          activeColor: Colors.deepPurple,
+          value: _currentValue,
+          min: widget.minValue,
+          max: widget.maxValue,
+          divisions: widget.steps,
+          label: 'Seconds to wait: $_currentValue s',
+          onChanged: (newValue){
+            _currentValue = newValue;
+            widget.onChanged(_currentValue);
+          })
+    );
+  }
+}
\ No newline at end of file
Index: example/android/app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/AndroidManifest.xml b/example/android/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1652867892023)
+++ b/example/android/app/src/main/AndroidManifest.xml	(date 1652867892023)
@@ -0,0 +1,69 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="me.carda.awesome_notifications_example">
+    <!-- io.flutter.app.FlutterApplication is an android.app.Application that
+           calls FlutterMain.startInitialization(this); in its onCreate method.
+           In most cases you can leave this as-is, but you if you want to provide
+           additional functionality it is fine to subclass or reimplement
+           FlutterApplication and put your custom class here. -->
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+
+    <uses-permission android:name="android.permission.WAKE_LOCK"/>
+    <uses-permission android:name="android.permission.VIBRATE"/>
+    <uses-permission android:name="android.permission.ACCESS_NOTIFICATION_POLICY"/>
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
+    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM"/>
+    <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT"/>
+
+    <!-- For permission testing purposes only
+        <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/> -->
+
+    <application
+        android:name="io.flutter.app.FlutterApplication"
+        android:icon="@mipmap/ic_launcher"
+        android:label="Awesome Notifications for Flutter">
+
+        <activity
+            android:name=".MainActivity"
+            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
+            android:hardwareAccelerated="true"
+            android:launchMode="singleTop"
+            android:theme="@style/LaunchTheme"
+            android:showWhenLocked="true"
+            android:turnScreenOn="true"
+            android:windowSoftInputMode="adjustResize">
+                <!-- Specifies an Android theme to apply to this Activity as soon as
+                           the Android process has started. This theme is visible to the user
+                           while the Flutter UI initializes. After that, this theme continues
+                           to determine the Window background behind the Flutter UI. -->
+            <meta-data
+                android:name="io.flutter.embedding.android.NormalTheme"
+                android:resource="@style/NormalTheme" />
+            <!-- Displays an Android View that continues showing the launch screen
+                       Drawable until Flutter paints its first frame, then this splash
+                       screen fades out. A splash screen is useful to avoid any visual
+                       gap between the end of Android's launch screen and the painting of
+                       Flutter's first frame. -->
+            <meta-data
+                android:name="io.flutter.embedding.android.SplashScreenDrawable"
+                android:resource="@drawable/launch_background" />
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <!-- Don't delete the meta-data below.
+                 This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
+        <meta-data
+            android:name="flutterEmbedding"
+            android:value="2" />
+
+        <service
+            android:name="me.carda.awesome_notifications.services.ForegroundService"
+            android:enabled="true"
+            android:exported="false"
+            android:foregroundServiceType="phoneCall"
+            android:stopWithTask="true" />
+
+    </application>
+</manifest>
\ No newline at end of file
Index: example/android/app/src/main/kotlin/me/carda/awesome_notifications_example/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/kotlin/me/carda/awesome_notifications_example/MainActivity.kt b/example/android/app/src/main/kotlin/me/carda/awesome_notifications_example/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1652867892030)
+++ b/example/android/app/src/main/kotlin/me/carda/awesome_notifications_example/MainActivity.kt	(date 1652867892030)
@@ -0,0 +1,6 @@
+package me.carda.awesome_notifications_example
+
+import io.flutter.embedding.android.FlutterActivity
+
+class MainActivity: FlutterActivity() {
+}
Index: example/lib/common_widgets/single_slider.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/common_widgets/single_slider.dart b/example/lib/common_widgets/single_slider.dart
new file mode 100644
--- /dev/null	(date 1652867892037)
+++ b/example/lib/common_widgets/single_slider.dart	(date 1652867892037)
@@ -0,0 +1,240 @@
+import 'dart:ui' as ui;
+
+import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
+
+class SingleSliderToConfirm extends StatefulWidget {
+  /// Height of the slider. Defaults to 70.
+  final double height;
+
+  /// Width of the slider. Defaults to 300.
+  final double width;
+
+  /// The color of the background of the slider. Defaults to Colors.white.
+  final Color backgroundColor;
+
+  /// The color of the background of the slider when it has been slide to the end. By giving a value here, the background color
+  /// will gradually change from backgroundColor to backgroundColorEnd when the user slides. Is not used by default.
+  final Color? backgroundColorEnd;
+
+  /// The color of the moving element of the slider. Defaults to Colors.blueAccent.
+  final Color foregroundColor;
+
+  /// The color of the icon on the moving element if icon is IconData. Defaults to Colors.white.
+  final Color iconColor;
+
+  /// The button widget used on the moving element of the slider. Defaults to Icon(Icons.chevron_right).
+  final Widget sliderButtonContent;
+
+  /// The shadow below the slider. Defaults to BoxShadow(color: Colors.black38, offset: Offset(0, 2),blurRadius: 2,spreadRadius: 0,).
+  final BoxShadow? shadow;
+
+  /// The text showed below the foreground. Used to specify the functionality to the user. Defaults to "Slide to confirm".
+  final String text;
+
+  /// The style of the text. Defaults to TextStyle(color: Colors.black26, fontWeight: FontWeight.bold,).
+  final TextStyle? textStyle;
+
+  /// The callback when slider is completed. This is the only required field.
+  final VoidCallback onConfirmation;
+
+  /// The callback when slider is pressed.
+  final VoidCallback? onTapDown;
+
+  /// The callback when slider is release.
+  final VoidCallback? onTapUp;
+
+  /// The shape of the moving element of the slider. Defaults to a circular border radius
+  final BorderRadius? foregroundShape;
+
+  /// The shape of the background of the slider. Defaults to a circular border radius
+  final BorderRadius? backgroundShape;
+
+  /// Stick the slider to the end
+  final bool stickToEnd;
+
+  const SingleSliderToConfirm({
+    Key? key,
+    this.height = 70,
+    this.width = 300,
+    this.backgroundColor = Colors.white,
+    this.backgroundColorEnd,
+    this.foregroundColor = Colors.blueAccent,
+    this.iconColor = Colors.white,
+    this.shadow,
+    this.sliderButtonContent = const Icon(
+      Icons.chevron_right,
+      color: Colors.white,
+      size: 35,
+    ),
+    this.text = "Slide to confirm",
+    this.textStyle,
+    required this.onConfirmation,
+    this.onTapDown,
+    this.onTapUp,
+    this.foregroundShape,
+    this.backgroundShape,
+    this.stickToEnd = false,
+  });
+
+  @override
+  State<StatefulWidget> createState() {
+    return SingleSliderToConfirmState();
+  }
+}
+
+class SingleSliderToConfirmState extends State<SingleSliderToConfirm> {
+  double _position = 0;
+  int _duration = 0;
+
+  double getPosition() {
+    if (_position < 0) {
+      return 0;
+    } else if (_position > widget.width - widget.height) {
+      return widget.width - widget.height;
+    } else {
+      return _position;
+    }
+  }
+
+  void updatePosition(details) {
+    if (details is DragEndDetails) {
+      setState(() {
+        _duration = 600;
+        if (widget.stickToEnd && _position > widget.width - widget.height) {
+          _position = widget.width - widget.height;
+        } else {
+          _position = 0;
+        }
+      });
+    } else if (details is DragUpdateDetails) {
+      setState(() {
+        _duration = 0;
+        _position = details.localPosition.dx - (widget.height / 2);
+      });
+    }
+  }
+
+  void sliderReleased(details) {
+    if (_position > widget.width - widget.height) {
+      widget.onConfirmation();
+    }
+    updatePosition(details);
+  }
+
+  Color calculateBackground() {
+    if (widget.backgroundColorEnd != null) {
+      double percent;
+
+      // calculates the percentage of the position of the slider
+      if (_position > widget.width - widget.height) {
+        percent = 1.0;
+      } else if (_position / (widget.width - widget.height) > 0) {
+        percent = _position / (widget.width - widget.height);
+      } else {
+        percent = 0.0;
+      }
+
+      int red = widget.backgroundColorEnd!.red;
+      int green = widget.backgroundColorEnd!.green;
+      int blue = widget.backgroundColorEnd!.blue;
+
+      return Color.alphaBlend(Color.fromRGBO(red, green, blue, percent), widget.backgroundColor);
+    } else {
+      return widget.backgroundColor;
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+
+    MediaQueryData mediaQueryData = MediaQuery.of(context);
+
+    BoxShadow shadow;
+    if (widget.shadow == null) {
+      shadow = BoxShadow(
+        color: Colors.black38,
+        offset: Offset(0, 2),
+        blurRadius: 2,
+        spreadRadius: 0,
+      );
+    } else {
+      shadow = widget.shadow!;
+    }
+
+    TextStyle style;
+    if (widget.textStyle == null) {
+      style = TextStyle(
+        color: Colors.black26,
+        fontWeight: FontWeight.bold,
+      );
+    } else {
+      style = widget.textStyle!;
+    }
+
+    return AnimatedContainer(
+      duration: Duration(milliseconds: _duration),
+      curve: Curves.ease,
+      height: widget.height,
+      width: widget.width,
+      padding: EdgeInsets.all(5),
+      decoration: BoxDecoration(
+        borderRadius: widget.backgroundShape ?? BorderRadius.all(Radius.circular(widget.height)),
+        color: widget.backgroundColorEnd != null ? this.calculateBackground() : widget.backgroundColor,
+        boxShadow: <BoxShadow>[shadow],
+      ),
+      child: Stack(
+        children: <Widget>[
+          Positioned(
+            top: 0,
+            bottom: 0,
+            right: 10,
+            width: widget.width - getPosition() - widget.height,
+            child: Column(
+                textBaseline: TextBaseline.ideographic,
+                mainAxisAlignment: MainAxisAlignment.center,
+                crossAxisAlignment: CrossAxisAlignment.center,
+                children: [
+                  Text(
+                    widget.text,
+                    overflow: TextOverflow.clip,
+                    textDirection: ui.TextDirection.rtl,
+                    softWrap: false,
+                    maxLines: 1,
+                    style: style,
+                  ),
+                ],
+            ),
+          ),
+          AnimatedPositioned(
+            duration: Duration(milliseconds: _duration),
+            curve: Curves.bounceOut,
+            left: getPosition(),
+            top: 0,
+            child: GestureDetector(
+              onTapDown: (_) => widget.onTapDown != null ? widget.onTapDown!() : null,
+              onTapUp: (_) => widget.onTapUp != null ? widget.onTapUp!() : null,
+              onPanUpdate: (details) {
+                updatePosition(details);
+              },
+              onPanEnd: (details) {
+                if (widget.onTapUp != null) widget.onTapUp!();
+                sliderReleased(details);
+              },
+              child: Container(
+                height: widget.height - 10,
+                width: widget.height - 10,
+                decoration: BoxDecoration(
+                  borderRadius: widget.foregroundShape ?? BorderRadius.all(Radius.circular(widget.height / 2)),
+                  color: widget.foregroundColor,
+                ),
+                child: widget.sliderButtonContent,
+              ),
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
\ No newline at end of file
Index: example/android/app/src/main/res/drawable/res_ic_stop.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_stop.xml b/example/android/app/src/main/res/drawable/res_ic_stop.xml
new file mode 100644
--- /dev/null	(date 1652867892043)
+++ b/example/android/app/src/main/res/drawable/res_ic_stop.xml	(date 1652867892043)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="36dp"
+    android:height="36dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#ffffff"
+      android:pathData="M6,6h12v12H6z"/>
+</vector>
Index: example/lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/main.dart b/example/lib/main.dart
new file mode 100644
--- /dev/null	(date 1652867892050)
+++ b/example/lib/main.dart	(date 1652867892050)
@@ -0,0 +1,394 @@
+import 'dart:math';
+
+import 'package:firebase_core/firebase_core.dart';
+import 'package:firebase_messaging/firebase_messaging.dart';
+import 'package:flutter/material.dart';
+import 'package:awesome_notifications_example/routes.dart';
+import 'package:awesome_notifications/awesome_notifications.dart';
+import 'package:awesome_notifications_example/models/media_model.dart';
+import 'package:awesome_notifications_example/utils/media_player_central.dart';
+
+void main() async {
+  WidgetsFlutterBinding.ensureInitialized();
+
+  AwesomeNotifications().initialize(
+    'resource://drawable/res_app_icon',
+    [
+      NotificationChannel(
+          channelGroupKey: 'basic_tests',
+          channelKey: 'basic_channel',
+          channelName: 'Basic notifications',
+          channelDescription: 'Notification channel for basic tests',
+          defaultColor: Color(0xFF9D50DD),
+          ledColor: Colors.white,
+          importance: NotificationImportance.High
+      ),
+      NotificationChannel(
+          channelGroupKey: 'basic_tests',
+          channelKey: 'badge_channel',
+          channelName: 'Badge indicator notifications',
+          channelDescription: 'Notification channel to activate badge indicator',
+          channelShowBadge: true,
+          defaultColor: Color(0xFF9D50DD),
+          ledColor: Colors.yellow),
+      NotificationChannel(
+          channelGroupKey: 'category_tests',
+          channelKey: 'call_channel',
+          channelName: 'Calls Channel',
+          channelDescription: 'Channel with call ringtone',
+          defaultColor: Color(0xFF9D50DD),
+          importance: NotificationImportance.Max,
+          ledColor: Colors.white,
+          channelShowBadge: true,
+          locked: true,
+          defaultRingtoneType: DefaultRingtoneType.Ringtone),
+      NotificationChannel(
+          channelGroupKey: 'category_tests',
+          channelKey: 'alarm_channel',
+          channelName: 'Alarms Channel',
+          channelDescription: 'Channel with alarm ringtone',
+          defaultColor: Color(0xFF9D50DD),
+          importance: NotificationImportance.Max,
+          ledColor: Colors.white,
+          channelShowBadge: true,
+          locked: true,
+          defaultRingtoneType: DefaultRingtoneType.Alarm),
+      NotificationChannel(
+          channelGroupKey: 'channel_tests',
+          channelKey: 'updated_channel',
+          channelName: 'Channel to update',
+          channelDescription: 'Notifications with not updated channel',
+          defaultColor: Color(0xFF9D50DD),
+          ledColor: Colors.white),
+      NotificationChannel(
+          channelGroupKey: 'chat_tests',
+          channelKey: 'chats',
+          channelName: 'Chat groups',
+          channelDescription: 'This is a simple example channel of a chat group',
+          channelShowBadge: true,
+          importance: NotificationImportance.Max,
+          ledColor: Colors.white,
+          defaultColor: Color(0xFF9D50DD),
+      ),
+      NotificationChannel(
+          channelGroupKey: 'vibration_tests',
+          channelKey: 'low_intensity',
+          channelName: 'Low intensity notifications',
+          channelDescription:
+              'Notification channel for notifications with low intensity',
+          defaultColor: Colors.green,
+          ledColor: Colors.green,
+          vibrationPattern: lowVibrationPattern),
+      NotificationChannel(
+          channelGroupKey: 'vibration_tests',
+          channelKey: 'medium_intensity',
+          channelName: 'Medium intensity notifications',
+          channelDescription:
+              'Notification channel for notifications with medium intensity',
+          defaultColor: Colors.yellow,
+          ledColor: Colors.yellow,
+          vibrationPattern: mediumVibrationPattern),
+      NotificationChannel(
+          channelGroupKey: 'vibration_tests',
+          channelKey: 'high_intensity',
+          channelName: 'High intensity notifications',
+          channelDescription:
+              'Notification channel for notifications with high intensity',
+          defaultColor: Colors.red,
+          ledColor: Colors.red,
+          vibrationPattern: highVibrationPattern),
+      NotificationChannel(
+          channelGroupKey: 'privacy_tests',
+          channelKey: "private_channel",
+          channelName: "Privates notification channel",
+          channelDescription: "Privates notification from lock screen",
+          playSound: true,
+          defaultColor: Colors.red,
+          ledColor: Colors.red,
+          vibrationPattern: lowVibrationPattern,
+          defaultPrivacy: NotificationPrivacy.Private),
+      NotificationChannel(
+          channelGroupKey: 'sound_tests',
+          icon: 'resource://drawable/res_power_ranger_thunder',
+          channelKey: "custom_sound",
+          channelName: "Custom sound notifications",
+          channelDescription: "Notifications with custom sound",
+          playSound: true,
+          soundSource: 'resource://raw/res_morph_power_rangers',
+          defaultColor: Colors.red,
+          ledColor: Colors.red,
+          vibrationPattern: lowVibrationPattern),
+      NotificationChannel(
+          channelGroupKey: 'sound_tests',
+          channelKey: "silenced",
+          channelName: "Silenced notifications",
+          channelDescription: "The most quiet notifications",
+          playSound: false,
+          enableVibration: false,
+          enableLights: false),
+      NotificationChannel(
+          channelGroupKey: 'media_player_tests',
+          icon: 'resource://drawable/res_media_icon',
+          channelKey: 'media_player',
+          channelName: 'Media player controller',
+          channelDescription: 'Media player controller',
+          defaultPrivacy: NotificationPrivacy.Public,
+          enableVibration: false,
+          enableLights: false,
+          playSound: false,
+          locked: true),
+      NotificationChannel(
+          channelGroupKey: 'image_tests',
+          channelKey: 'big_picture',
+          channelName: 'Big pictures',
+          channelDescription: 'Notifications with big and beautiful images',
+          defaultColor: Color(0xFF9D50DD),
+          ledColor: Color(0xFF9D50DD),
+          vibrationPattern: lowVibrationPattern,
+          importance: NotificationImportance.High),
+      NotificationChannel(
+          channelGroupKey: 'layout_tests',
+          channelKey: 'big_text',
+          channelName: 'Big text notifications',
+          channelDescription: 'Notifications with a expandable body text',
+          defaultColor: Colors.blueGrey,
+          ledColor: Colors.blueGrey,
+          vibrationPattern: lowVibrationPattern),
+      NotificationChannel(
+          channelGroupKey: 'layout_tests',
+          channelKey: 'inbox',
+          channelName: 'Inbox notifications',
+          channelDescription: 'Notifications with inbox layout',
+          defaultColor: Color(0xFF9D50DD),
+          ledColor: Color(0xFF9D50DD),
+          vibrationPattern: mediumVibrationPattern),
+      NotificationChannel(
+          channelGroupKey: 'schedule_tests',
+          channelKey: 'scheduled',
+          channelName: 'Scheduled notifications',
+          channelDescription: 'Notifications with schedule functionality',
+          defaultColor: Color(0xFF9D50DD),
+          ledColor: Color(0xFF9D50DD),
+          vibrationPattern: lowVibrationPattern,
+          importance: NotificationImportance.High,
+          defaultRingtoneType: DefaultRingtoneType.Alarm,
+          criticalAlerts: true,
+      ),
+      NotificationChannel(
+          channelGroupKey: 'layout_tests',
+          icon: 'resource://drawable/res_download_icon',
+          channelKey: 'progress_bar',
+          channelName: 'Progress bar notifications',
+          channelDescription: 'Notifications with a progress bar layout',
+          defaultColor: Colors.deepPurple,
+          ledColor: Colors.deepPurple,
+          vibrationPattern: lowVibrationPattern,
+          onlyAlertOnce: true),
+      NotificationChannel(
+          channelGroupKey: 'grouping_tests',
+          channelKey: 'grouped',
+          channelName: 'Grouped notifications',
+          channelDescription: 'Notifications with group functionality',
+          groupKey: 'grouped',
+          groupSort: GroupSort.Desc,
+          groupAlertBehavior: GroupAlertBehavior.Children,
+          defaultColor: Colors.lightGreen,
+          ledColor: Colors.lightGreen,
+          vibrationPattern: lowVibrationPattern,
+          importance: NotificationImportance.High)
+    ],
+    channelGroups: [
+      NotificationChannelGroup(channelGroupkey: 'basic_tests', channelGroupName: 'Basic tests'),
+      NotificationChannelGroup(channelGroupkey: 'category_tests', channelGroupName: 'Category tests'),
+      NotificationChannelGroup(channelGroupkey: 'image_tests', channelGroupName: 'Images tests'),
+      NotificationChannelGroup(channelGroupkey: 'schedule_tests', channelGroupName: 'Schedule tests'),
+      NotificationChannelGroup(channelGroupkey: 'chat_tests', channelGroupName: 'Chat tests'),
+      NotificationChannelGroup(channelGroupkey: 'channel_tests', channelGroupName: 'Channel tests'),
+      NotificationChannelGroup(channelGroupkey: 'sound_tests', channelGroupName: 'Sound tests'),
+      NotificationChannelGroup(channelGroupkey: 'vibration_tests', channelGroupName: 'Vibration tests'),
+      NotificationChannelGroup(channelGroupkey: 'privacy_tests', channelGroupName: 'Privacy tests'),
+      NotificationChannelGroup(channelGroupkey: 'layout_tests', channelGroupName: 'Layout tests'),
+      NotificationChannelGroup(channelGroupkey: 'grouping_tests', channelGroupName: 'Grouping tests'),
+      NotificationChannelGroup(channelGroupkey: 'media_player_tests', channelGroupName: 'Media Player tests')
+    ],
+    debug: true
+  );
+
+  // Uncomment those lines after activate google services inside example/android/build.gradle
+  // Create the initialization Future outside of `build`:
+  //FirebaseApp firebaseApp = await Firebase.initializeApp();
+  //FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
+
+  runApp(App());
+}
+
+
+Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
+  // If you're going to use other Firebase services in the background, such as Firestore,
+  // make sure you call `initializeApp` before using other Firebase services.
+  await Firebase.initializeApp();
+  print('Handling a background message: ${message.messageId}');
+
+  if(
+    !AwesomeStringUtils.isNullOrEmpty(message.notification?.title, considerWhiteSpaceAsEmpty: true) ||
+    !AwesomeStringUtils.isNullOrEmpty(message.notification?.body, considerWhiteSpaceAsEmpty: true)
+  ){
+    print('message also contained a notification: ${message.notification}');
+
+    String? imageUrl;
+    imageUrl ??= message.notification!.android?.imageUrl;
+    imageUrl ??= message.notification!.apple?.imageUrl;
+
+    Map<String, dynamic> notificationAdapter = {
+      NOTIFICATION_CHANNEL_KEY: 'basic_channel',
+      NOTIFICATION_ID:
+            message.data[NOTIFICATION_CONTENT]?[NOTIFICATION_ID] ??
+            message.messageId ??
+            Random().nextInt(2147483647),
+      NOTIFICATION_TITLE:
+            message.data[NOTIFICATION_CONTENT]?[NOTIFICATION_TITLE] ??
+            message.notification?.title,
+      NOTIFICATION_BODY:
+            message.data[NOTIFICATION_CONTENT]?[NOTIFICATION_BODY] ??
+            message.notification?.body ,
+      NOTIFICATION_LAYOUT:
+          AwesomeStringUtils.isNullOrEmpty(imageUrl) ? 'Default' : 'BigPicture',
+      NOTIFICATION_BIG_PICTURE: imageUrl
+    };
+
+    AwesomeNotifications().createNotificationFromJsonData(notificationAdapter);
+  }
+  else {
+    AwesomeNotifications().createNotificationFromJsonData(message.data);
+  }
+}
+
+class App extends StatefulWidget {
+  App();
+
+  static final GlobalKey<NavigatorState> navKey = GlobalKey<NavigatorState>();
+
+  static String name = 'Awesome Notifications - Example App';
+  static Color mainColor = Color(0xFF9D50DD);
+
+  @override
+  _AppState createState() => _AppState();
+}
+
+class _AppState extends State<App> {
+  @override
+  void initState() {
+    MediaPlayerCentral.addAll([
+      MediaModel(
+          diskImagePath: 'asset://assets/images/rock-disc.jpg',
+          colorCaptureSize: Size(788, 800),
+          bandName: 'Bright Sharp',
+          trackName: 'Champagne Supernova',
+          trackSize: Duration(minutes: 4, seconds: 21)),
+      MediaModel(
+          diskImagePath: 'asset://assets/images/classic-disc.jpg',
+          colorCaptureSize: Size(500, 500),
+          bandName: 'Best of Mozart',
+          trackName: 'Allegro',
+          trackSize: Duration(minutes: 7, seconds: 41)),
+      MediaModel(
+          diskImagePath: 'asset://assets/images/remix-disc.jpg',
+          colorCaptureSize: Size(500, 500),
+          bandName: 'Dj Allucard',
+          trackName: '21st Century',
+          trackSize: Duration(minutes: 4, seconds: 59)),
+      MediaModel(
+          diskImagePath: 'asset://assets/images/dj-disc.jpg',
+          colorCaptureSize: Size(500, 500),
+          bandName: 'Dj Brainiak',
+          trackName: 'Speed of light',
+          trackSize: Duration(minutes: 4, seconds: 59)),
+      MediaModel(
+          diskImagePath: 'asset://assets/images/80s-disc.jpg',
+          colorCaptureSize: Size(500, 500),
+          bandName: 'Back to the 80\'s',
+          trackName: 'Disco revenge',
+          trackSize: Duration(minutes: 4, seconds: 59)),
+      MediaModel(
+          diskImagePath: 'asset://assets/images/old-disc.jpg',
+          colorCaptureSize: Size(500, 500),
+          bandName: 'PeacefulMind',
+          trackName: 'Never look at back',
+          trackSize: Duration(minutes: 4, seconds: 59)),
+    ]);
+
+    super.initState();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return MaterialApp(
+      navigatorKey: App.navKey,
+      title: App.name,
+      color: App.mainColor,
+      initialRoute: PAGE_HOME,
+      //onGenerateRoute: generateRoute,
+      routes: materialRoutes,
+      builder: (context, child) => MediaQuery(
+        data: MediaQuery.of(context).copyWith(alwaysUse24HourFormat: true),
+        child: child ?? const SizedBox.shrink(),
+      ),
+      theme: ThemeData(
+        brightness: Brightness.light,
+
+        primaryColor: App.mainColor,
+        accentColor: Colors.blueGrey,
+        canvasColor: Colors.white,
+        focusColor: Colors.blueAccent,
+        disabledColor: Colors.grey,
+
+        backgroundColor: Colors.blueGrey.shade400,
+
+        appBarTheme: AppBarTheme(
+            brightness: Brightness.dark,
+            color: Colors.white,
+            elevation: 0,
+            iconTheme: IconThemeData(
+              color: App.mainColor,
+            ),
+            textTheme: TextTheme(
+              headline6: TextStyle(color: App.mainColor, fontSize: 18),
+            )),
+
+        fontFamily: 'Robot',
+
+        // Define the default TextTheme. Use this to specify the default
+        // text styling for headlines, titles, bodies of text, and more.
+        textTheme: TextTheme(
+          headline1: TextStyle(
+              fontSize: 64.0, height: 1.5, fontWeight: FontWeight.w500),
+          headline2: TextStyle(
+              fontSize: 52.0, height: 1.5, fontWeight: FontWeight.w500),
+          headline3: TextStyle(
+              fontSize: 48.0, height: 1.5, fontWeight: FontWeight.w500),
+          headline4: TextStyle(
+              fontSize: 32.0, height: 1.5, fontWeight: FontWeight.w500),
+          headline5: TextStyle(
+              fontSize: 28.0, height: 1.5, fontWeight: FontWeight.w500),
+          headline6: TextStyle(
+              fontSize: 22.0, height: 1.5, fontWeight: FontWeight.w500),
+          subtitle1:
+              TextStyle(fontSize: 18.0, height: 1.5, color: Colors.black54),
+          subtitle2:
+              TextStyle(fontSize: 12.0, height: 1.5, color: Colors.black54),
+          button: TextStyle(fontSize: 16.0, height: 1.5, color: Colors.black54),
+          bodyText1: TextStyle(fontSize: 16.0, height: 1.5),
+          bodyText2: TextStyle(fontSize: 16.0, height: 1.5),
+        ),
+
+        buttonTheme: ButtonThemeData(
+          buttonColor: Colors.grey.shade200,
+          shape: RoundedRectangleBorder(
+              borderRadius: BorderRadius.all(Radius.circular(5))),
+          padding: EdgeInsets.symmetric(vertical: 10.0, horizontal: 15.0),
+          textTheme: ButtonTextTheme.accent,
+        ),
+      ),
+    );
+  }
+}
Index: example/android/app/src/main/res/values-night/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/values-night/styles.xml b/example/android/app/src/main/res/values-night/styles.xml
new file mode 100644
--- /dev/null	(date 1652867892057)
+++ b/example/android/app/src/main/res/values-night/styles.xml	(date 1652867892057)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             Flutter draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+         
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
+        <item name="android:windowBackground">?android:colorBackground</item>
+    </style>
+</resources>
Index: example/android/awesome_notifications_core/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/awesome_notifications_core/proguard-rules.pro b/example/android/awesome_notifications_core/proguard-rules.pro
new file mode 100644
--- /dev/null	(date 1652867892063)
+++ b/example/android/awesome_notifications_core/proguard-rules.pro	(date 1652867892063)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
\ No newline at end of file
Index: example/android/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/build.gradle b/example/android/build.gradle
new file mode 100644
--- /dev/null	(date 1652867892070)
+++ b/example/android/build.gradle	(date 1652867892070)
@@ -0,0 +1,30 @@
+buildscript {
+    repositories {
+        google()
+        jcenter()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:4.2.1'
+        classpath 'com.google.gms:google-services:4.3.3'
+    }
+}
+
+allprojects {
+    repositories {
+        google()
+        jcenter()
+    }
+}
+
+rootProject.buildDir = '../build'
+subprojects {
+    project.buildDir = "${rootProject.buildDir}/${project.name}"
+}
+subprojects {
+    project.evaluationDependsOn(':app')
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
Index: example/lib/datasources/common/datasource.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/datasources/common/datasource.dart b/example/lib/datasources/common/datasource.dart
new file mode 100644
--- /dev/null	(date 1652867891672)
+++ b/example/lib/datasources/common/datasource.dart	(date 1652867891672)
@@ -0,0 +1,13 @@
+import 'package:flutter/cupertino.dart';
+import 'package:http/http.dart';
+
+abstract class DataSource {
+  @protected
+  Future<Response?> fetchData({
+    String directory = '',
+    Map<String, String>? parameters,
+    Map<String, String> headers = const {},
+    String body = '',
+    int timeoutInMilliseconds = 5000,
+  });
+}
Index: example/android/app/src/main/res/drawable/res_ic_close.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_close.xml b/example/android/app/src/main/res/drawable/res_ic_close.xml
new file mode 100644
--- /dev/null	(date 1652867891682)
+++ b/example/android/app/src/main/res/drawable/res_ic_close.xml	(date 1652867891682)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="32dp"
+    android:height="32dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#ffffff"
+      android:pathData="M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z"/>
+</vector>
Index: example/android/app/src/main/res/drawable/res_ic_next.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_next.xml b/example/android/app/src/main/res/drawable/res_ic_next.xml
new file mode 100644
--- /dev/null	(date 1652867891688)
+++ b/example/android/app/src/main/res/drawable/res_ic_next.xml	(date 1652867891688)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="36dp"
+    android:height="36dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#ffffff"
+      android:pathData="M6,18l8.5,-6L6,6v12zM16,6v12h2V6h-2z"/>
+</vector>
Index: example/android/app/src/main/res/drawable/res_ic_next_disabled.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_next_disabled.xml b/example/android/app/src/main/res/drawable/res_ic_next_disabled.xml
new file mode 100644
--- /dev/null	(date 1652867891694)
+++ b/example/android/app/src/main/res/drawable/res_ic_next_disabled.xml	(date 1652867891694)
@@ -0,0 +1,4 @@
+<vector android:alpha="0.25" android:height="36dp" android:viewportHeight="24"
+    android:viewportWidth="24" android:width="36dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#ffffff" android:pathData="M6,18l8.5,-6L6,6v12zM16,6v12h2V6h-2z"/>
+</vector>
Index: example/lib/datasources/firebase_datasource.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/datasources/firebase_datasource.dart b/example/lib/datasources/firebase_datasource.dart
new file mode 100644
--- /dev/null	(date 1652867891699)
+++ b/example/lib/datasources/firebase_datasource.dart	(date 1652867891699)
@@ -0,0 +1,91 @@
+import 'dart:async';
+import 'dart:convert';
+import 'package:http/http.dart' show Response;
+
+import 'common/http_datasource.dart';
+
+class FirebaseDataSource extends HttpDataSource {
+  /// ************************************************************************************
+  ///
+  /// SINGLETON CONSTRUCTOR PATTERN
+  ///
+  /// ************************************************************************************
+
+  static FirebaseDataSource? _instance;
+  factory FirebaseDataSource() {
+    _instance ??= FirebaseDataSource._internalConstructor();
+    return _instance!;
+  }
+
+  FirebaseDataSource._internalConstructor()
+      : super(
+        baseAPI:'fcm.googleapis.com',
+        isUsingHttps: true,
+        isCertificateHttps: false
+      );
+  
+//   /// ************************************************************************************
+//   ///
+//   /// FETCH DATA METHODS
+//   ///
+//   /// ************************************************************************************
+
+  Future<String> _notificationModel(
+      {required String firebaseServerKey, Map<String, dynamic> body = const {}}) async {
+    if (firebaseServerKey.isEmpty) {
+      return 'Server Key not defined';
+    }
+
+    Response? response = await fetchData(
+        directory: '/fcm/send',
+        headers: {
+          'Authorization': 'key=$firebaseServerKey',
+          'Content-Type': 'application/json'
+        },
+        body: jsonEncode(body));
+
+    if (response?.statusCode == 200) {
+      return response!.bodyBytes.toString();
+    }
+
+    return '';
+  }
+
+  Future<String> pushBasicNotification({
+    required String firebaseServerKey,
+    required String firebaseAppToken,
+    required int notificationId,
+    required String title,
+    required String body,
+    Map<String, String> payload = const {}
+  }) async {
+    return await _notificationModel(
+        firebaseServerKey: firebaseServerKey,
+        body: getFirebaseExampleContent(firebaseAppToken: firebaseAppToken));
+  }
+
+  Map<String, dynamic> getFirebaseExampleContent({required String firebaseAppToken}) {
+    return {
+      'to': firebaseAppToken,
+      'mutable_content' : true,
+      'content_available': true,
+      'priority': 'high',
+      'data': {
+        'content': {
+          'id': 100,
+          'channelKey': 'big_picture',
+          'title': "Huston!\nThe eagle has landed!",
+          'body':
+              "A small step for a man, but a giant leap to Flutter's community!",
+          'notificationLayout': 'BigPicture',
+          'largeIcon':
+              "https://avidabloga.files.wordpress.com/2012/08/emmemc3b3riadeneilarmstrong3.jpg",
+          'bigPicture': "https://www.dw.com/image/49519617_303.jpg",
+          'showWhen': true,
+          'autoDismissible': true,
+          'privacy': 'Private'
+        }
+      }
+    };
+  }
+}
Index: example/lib/utils/playback_timer.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/lib/utils/playback_timer.dart b/example/lib/utils/playback_timer.dart
new file mode 100644
--- /dev/null	(date 1652867891706)
+++ b/example/lib/utils/playback_timer.dart	(date 1652867891706)
@@ -0,0 +1,89 @@
+import 'dart:async';
+
+class PlaybackTimer {
+  Duration _clockTic = Duration(seconds: 1);
+  Duration? _totalTime;
+
+  bool _isPlaying = false;
+
+  Timer? _timer;
+  Duration _now = Duration.zero;
+
+  Function(Duration duration)? _onDone;
+  Function(Duration duration)? _onData;
+
+  PlaybackTimer({
+    Function(Duration duration)? onDone,
+    Function(Duration duration)? onData,
+  })  : _onDone = onDone,
+        _onData = onData;
+
+  Duration get now => _now;
+  set now(Duration duration) {
+    _now = duration;
+    if (_onData != null) _onData!(now);
+  }
+
+  bool get isPlaying => _isPlaying;
+
+  void playPause(Duration totalTime) {
+    if (now == Duration.zero) {
+      _startNewCycle(totalTime);
+      return;
+    }
+    if (_isPlaying) {
+      _isPlaying = false;
+      _timer?.cancel();
+      return;
+    }
+    _resume();
+  }
+
+  void goTo(Duration moment) {
+    if (moment == _totalTime) {
+      stop();
+      if (_onDone != null) _onDone!(now);
+    } else {
+      now = moment;
+    }
+  }
+
+  void stop() {
+    _isPlaying = false;
+
+    _timer?.cancel();
+    _timer = null;
+
+    _totalTime = null;
+    now = Duration.zero;
+  }
+
+  void _startNewCycle(Duration totalTime) {
+    _isPlaying = false;
+
+    _timer?.cancel();
+    _timer = null;
+
+    _totalTime = totalTime;
+    now = Duration.zero;
+
+    _resume();
+  }
+
+  void _resume() {
+    _isPlaying = true;
+
+    _timer = Timer(_clockTic, () {
+      now += _clockTic;
+
+      if (now > _totalTime!) {
+        _timer!.cancel();
+        now = Duration.zero;
+
+        if (isPlaying && _onDone != null) _onDone!(now);
+      } else {
+        _resume();
+      }
+    });
+  }
+}
Index: example/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json b/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json
new file mode 100644
--- /dev/null	(date 1652867891713)
+++ b/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json	(date 1652867891713)
@@ -0,0 +1,23 @@
+{
+  "images" : [
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage.png",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage@3x.png",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
Index: example/android/app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/build.gradle b/example/android/app/build.gradle
new file mode 100644
--- /dev/null	(date 1652867892196)
+++ b/example/android/app/build.gradle	(date 1652867892196)
@@ -0,0 +1,59 @@
+def localProperties = new Properties()
+def localPropertiesFile = rootProject.file('local.properties')
+if (localPropertiesFile.exists()) {
+    localPropertiesFile.withReader('UTF-8') { reader ->
+        localProperties.load(reader)
+    }
+}
+
+def flutterRoot = localProperties.getProperty('flutter.sdk')
+if (flutterRoot == null) {
+    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
+}
+
+def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
+if (flutterVersionCode == null) {
+    flutterVersionCode = '1'
+}
+
+def flutterVersionName = localProperties.getProperty('flutter.versionName')
+if (flutterVersionName == null) {
+    flutterVersionName = '1.0'
+}
+
+apply plugin: 'com.android.application'
+apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
+
+android {
+    compileSdkVersion 31
+
+    lintOptions {
+        disable 'InvalidPackage'
+    }
+
+    defaultConfig {
+        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
+        applicationId "me.carda.awesome_notifications_example"
+        minSdkVersion 21
+        targetSdkVersion 30
+        versionCode flutterVersionCode.toInteger()
+        versionName flutterVersionName
+    }
+
+    buildTypes {
+        release {
+            // TODO: Add your own signing config for the release build.
+            // Signing with the debug keys for now, so `flutter run --release` works.
+            signingConfig signingConfigs.debug
+            // NOT RECOMMENDED DUE SECURITY AGAINST REVERSE ENGINEERING
+            // shrinkResources false
+        }
+    }
+}
+
+flutter {
+    source '../..'
+}
+
+// UNCOMMENT THIS LINE TO ACTIVATE FIREBASE SERVICES ON EXAMPLE APP
+// apply plugin: 'com.google.gms.google-services'
Index: example/android/app/src/main/res/drawable/res_ic_pause.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/app/src/main/res/drawable/res_ic_pause.xml b/example/android/app/src/main/res/drawable/res_ic_pause.xml
new file mode 100644
--- /dev/null	(date 1652867892203)
+++ b/example/android/app/src/main/res/drawable/res_ic_pause.xml	(date 1652867892203)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="36dp"
+    android:height="36dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#ffffff"
+      android:pathData="M6,19h4L10,5L6,5v14zM14,5v14h4L18,5h-4z"/>
+</vector>
Index: example/android/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/gradle.properties b/example/android/gradle.properties
new file mode 100644
--- /dev/null	(date 1652867892209)
+++ b/example/android/gradle.properties	(date 1652867892209)
@@ -0,0 +1,4 @@
+org.gradle.jvmargs=-Xmx1536M
+android.enableR8=true
+android.useAndroidX=true
+android.enableJetifier=true
Index: example/android/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/android/settings.gradle b/example/android/settings.gradle
new file mode 100644
--- /dev/null	(date 1652867892218)
+++ b/example/android/settings.gradle	(date 1652867892218)
@@ -0,0 +1,15 @@
+// Copyright 2014 The Flutter Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+include ':app'
+
+def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
+def properties = new Properties()
+
+assert localPropertiesFile.exists()
+localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
+
+def flutterSdkPath = properties.getProperty("flutter.sdk")
+assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
+apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
diff --git a/example/android/awesome_notifications_core/consumer-rules.pro b/example/android/awesome_notifications_core/consumer-rules.pro
new file mode 100644
